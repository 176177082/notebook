#+TITLE:      Python 笔记

* 目录                                                    :TOC_4_gh:noexport:
- [[#小整数对象池][小整数对象池]]
- [[#函数默认参数的问题][函数默认参数的问题]]
- [[#内置函数相关][内置函数相关]]
- [[#语法上的问题][语法上的问题]]
- [[#函数对象的属性][函数对象的属性]]
- [[#模块和包的导入与执行][模块和包的导入与执行]]
  - [[#模块相关概念][模块相关概念]]
  - [[#包相关概念][包相关概念]]
  - [[#执行包与包内模块][执行包与包内模块]]
- [[#异常执行顺序问题][异常执行顺序问题]]
- [[#关键字相关][关键字相关]]
- [[#限制实例属性][限制实例属性]]
- [[#抽象类][抽象类]]
- [[#获取对象属性][获取对象属性]]
- [[#数值运算相关][数值运算相关]]
- [[#作用域问题][作用域问题]]
  - [[#修改全局变量][修改全局变量]]
- [[#python-垃圾回收机制][Python 垃圾回收机制]]
- [[#成员相关][成员相关]]
  - [[#保护成员和私有成员][保护成员和私有成员]]
  - [[#内置成员][内置成员]]
- [[#导入机制][导入机制]]
- [[#特殊属性][特殊属性]]
- [[#字节转字符串][字节转字符串]]

* 小整数对象池
  Python 中存在一个小整数对象池， 这使得这些小整数在内存中只存在唯一的一个实例。

  参考： [[https://foofish.net/python-int-mystery.html][Python 解惑：整数比较]]

* 函数默认参数的问题
  当函数的关键字参数为 *引用类型* 时需要注意不要在函数体内部对参数直接修改：
  #+BEGIN_SRC python
    In [1]: def func(lst=[]):
       ...:     lst.append(10)
       ...:     print(lst)
       ...:

    In [2]: func
    Out[2]: <function __main__.func>

    In [3]: func()
    [10]

    In [4]: func()
    [10, 10]

    In [5]: func()
    [10, 10, 10]
  #+END_SRC

* 内置函数相关
  + super :: ~super~ 的一般使用方式为： ~super(class, self).xxx~.

    + [[https://mozillazg.com/2016/12/python-super-is-not-as-simple-as-you-thought.html][Python: super 没那么简单]].

  + staticmethod :: 通常作为装饰器使用，未被 ~staticmethod~ 装饰的方法， 如果没有绑定 ~self~ 变量，
                    那么这个方法可以用类名访问， 但是不能用实例访问。

                    使用 ~staticmethod~ 来装饰方法， 那么这个方法既可以使用类名访问， 
                    也可以使用实例访问。

  + iter :: 函数 iter 可以接受一个可调用对象和一个终止条件，当可调用对象的返回值等于终止条件
            时就结束迭代。

            #+BEGIN_SRC python
              iter(callable, sentinel) -> iterator
            #+END_SRC

* 语法上的问题
  和 [[file:../c-c++/c.org::语法相关][C - 语法相关]] 的对比。

  + 赋值语句 :: 不能像 ~if x = func()~ 这样使用, 但是可以 ~func(x = 2)~, 最后传入的参数就是 ~2~.
  + 连续赋值 :: 只要最右端的变量或字面值已定义即可
  + 括号 :: 元组
  + 逗号 :: 不能那样使用

  作为动态语言， 如果像：
  #+BEGIN_SRC python
    def func():
        pass

    def func():
        pass
  #+END_SRC

  定义同名的对象， 最后的对象以 *最后一次* 定义为准

* 函数对象的属性
  *函数* 作为 ~Python~ 对象自然也可以有属性：
  #+BEGIN_SRC python
    In [1]: def func():
       ...:     pass
       ...:

    In [2]: func
    Out[2]: <function __main__.func>

    In [3]: func.name = 'func'

    In [4]: func.name
    Out[4]: 'func'
  #+END_SRC
  
  这一特性的使用： [[https://stackoverflow.com/questions/338101/python-function-attributes-uses-and-abuses][Python function attributes - uses and abuses]].

* 模块和包的导入与执行
  导入 *模块* 或 *包* 时， ~Python~ 会动态执行一遍 *模块* 中的内容。

  函数或类的定义的执行就只是定义了函数或类， 而其他语句会直接执行， 
  如果有输出还会直接进行输出。

** 模块相关概念
   模块，在 ~Python~ 可理解为对应于一个文件。在创建了一个脚本文件后，定义了某些函数和变量。你在其他需要这些功能的文件中，导入这模块，就可重用这些函数和变量。

   一般用 ~module_name.fun_name~, 和 ~module_name.var_name~ 进行使用。这样的语义用法使模块看起来很像类或者名字空间，可将 ~module_name~ 理解为名字限定符。模块名就是文件名去掉 ~.py~ 后缀。

   模块属性 ~__name__~, 它的值由 ~Python~ 解释器设定。如果脚本文件是作为主程序调用，其值就设为 ~__main__~, 如果是作为模块被其他文件导入，它的值就是其文件名。

   模块能像包含函数定义一样，可包含一些可执行语句。这些可执行语句通常用来进行模块的初始化工作。这些语句 *只在模块第一次被导入时* 被执行。
   这非常重要，有些人以为这些语句会多次导入多次执行，其实不然。

   模块在被导入执行时, ~python~ 解释器为加快程序的启动速度，会在与模块文件同一目录下生成 ~.pyc~ 文件。
   我们知道 ~python~ 是解释性的脚本语言，而 ~.pyc~ 是经过编译后的字节码，这一工作会自动完成，而无需程序员手动执行。

** 包相关概念
   通常包总是一个目录，可以使用 ~import~ 导入包，或者 ~from + import~ 来导入包中的部分模块。包目录下为首的一个文件便是 ~__init__.py~.
   然后是一些模块文件和子目录，假如子目录中也有 ~__init__.py~ 那么它就是这个包的子包了。

   创建许许多多模块后，我们可能希望将某些功能相近的文件组织在同一文件夹下，这里就需要运用包的概念了。
   包对应于文件夹，使用包的方式跟模块也类似，唯一需要注意的是，当文件夹当作包使用时，文件夹需要包含 ~__init__.py~ 文件，主要是为了避免将文件夹名当作普通的字符串。
   ~__init__.py~ 的内容可以为空，一般用来进行包的某些初始化工作或者设置 ~__all__~ 值， ~__all__~ 是在 ~from package-name import *~ 这语句使用的，全部导出定义过的模块。

   可以从包中导入单独的模块:
   1). ~import PackageA.SubPackageA.ModuleA~, 使用时必须用全路径名
   2). 变种: ~from PackageA.SubPackageA import ModuleA~, 可以直接使用模块名而不用加上包前缀。
   3). 也可以直接导入模块中的函数或变量： ~from PackageA.SubPackageA.ModuleA import functionA~

   ~import~ 语句语法：
   1. 当使用 ~from package import item~ 时, ~item~ 可以是 ~package~ 的子模块或子包，或是其他的定义在包中的名字（比如一个函数、类或变量）。
      首先检查 ~item~ 是否定义在包中，不过没找到，就认为 ~item~ 是一个模块并尝试加载它，失败时会抛出一个 ~ImportError~ 异常。

   2. 当使用 ~import item.subitem.subsubitem~ 语法时，最后一个 ~item~ 之前的 ~item~ 必须是包，最后一个 ~item~ 可以是一个模块或包，但不能是类、函数和变量

   3. ~from pacakge import *~

      如果包的 ~__init__.py~ 定义了一个名为 ~__all__~ 的列表变量，它包含的模块名字的列表将作为被导入的模块列表。
      如果没有定义 ~__all__~, 这条语句不会导入所有的 ~package~ 的子模块，它只保证包 ~package~ 被导入，然后导入定义在包中的所有名字。

   包是一个有层次的文件目录结构，它定义了由 n 个模块或 n 个子包组成的 python 应用程序执行环境。

   通俗一点：包是一个包含 ~__init__.py~ 文件的目录，该目录下一定得有这个 ~__init__.py~ 文件和其它模块或子包

** 执行包与包内模块
   如果你希望 ~python~ 将一个文件夹作为 ~package~ 对待，那么这个文件夹中必须包含一个名为 ~__init__.py~ 的文件，即使它是空的

   如果你需要 ~python~ 讲一个文件夹作为 ~package~ 执行，那么这个文件夹中必须包含一个名为 ~__main__.py~ 的文件，
   当执行 ~python -m pkg~ 或者 ~python pkg~ 的时候，这个文件中的代码都会被执行

   特别的， 对于包内的 *模块*, 如果使用了 *相对导入*, 那么可以使用 ~python -m pkg.module~ 指令执行模块.

* 异常执行顺序问题
  #+BEGIN_SRC python
    try:
        ...
    except Exception:
        raise
  #+END_SRC

  ~finally~ 代码块必然会执行， 哪怕 ~try/catch~ 中存在 ~return~.

* 关键字相关
  + with :: with 语句后不一定需要 as, 不过没有 as 会无法捕获上下文对象
  + as :: as 可以在 import, except, with 语句后使用
  + global :: 说明当前变量为全局变量
  + nonlocal :: 说明当前变量不是局部变量， 会根据作用域逐层寻找变量（Python3）

* 限制实例属性
  在 ~Python~ 中，每个类都有实例属性。默认情况下 ~Python~ 用一个字典来保存一个对象的实例属性。这非常有用，因为它允许我们在运行时去 *设置任意的新属性*

  然而，对于有着已知属性的小类来说，它可能是个瓶颈。这个字典浪费了很多内存。 ~Python~ 不能在对象创建时直接分配一个固定量的内存来保存所有的属性。
  因此如果你创建许多对象（我指的是成千上万个），它会消耗掉很多内存。

  不过还是有一个方法来规避这个问题。这个方法需要使用 ~__slots__~ 来告诉 ~Python~ 不要使用字典，而且只给一个固定集合的属性分配空间。

  此时， ~__slots__~ 将为已声明的变量保留空间并阻止为每个实例自动创建 ~__dict__~ 和 ~__weakref__~

  简单来说， ~__slots__~ 的一个直接的作用便是减少内存消耗。

  使用方式：
  #+BEGIN_SRC python
    class MyClass(object):
        __slots__ = ['name', 'identifier']
        def __init__(self, name, identifier):
            self.name = name
            self.identifier = identifier
            self.set_up()
            # ...
  #+END_SRC

  注意事项：
  + 当从没有 ~__slots__~ 的类继承时， 该类的 ~__dict__~ 属性将始终可访问，因此子类中的 ~__slots__~ 定义没有意义
  + 没有 ~__dict__~ 变量时， 实例不能被分配 ~__slots__~ 定义中未列出的新变量。 即不能随意设置变量
  + 没有 ~__weakref__~ 变量， 定义 ~__slots__~ 的类不支持对其实例的弱引用。 如果需要弱引用支持， 则将 ~__weakref__~
    添加到 ~__slots__~ 声明的字符串序列中
  + 类属性不能用于为由 ~__slots__~ 定义的实例变量设置默认值
  + ~__slots__~ 声明的操作仅限于定义它的类， 子类将由一个 ~__dict__~, 除非定义 ~__slots__~


  文档： [[https://docs.python.org/2/reference/datamodel.html?highlight=__slots__#slots][ __slots__]]

* 抽象类
  使用 ~abc~ 模块定义一个接口或抽象类，
  并且通过执行类型检查来确保子类实现了某些特定的方法。

  #+BEGIN_SRC python
    from abc import ABCMeta, abstractmethod

    class IStream(metaclass=ABCMeta):  # only python3
        @abstractmethod
        def read(self, maxbytes=-1):
            pass

        @abstractmethod
        def write(self, data):
            pass
  #+END_SRC

  *抽象类不能实例化*.

  *抽象类* 的 *子类* 必须实现特定的 *抽象* 方法.

  + [[http://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p12_define_interface_or_abstract_base_class.html][定义接口或者抽象基类]].

* 获取对象属性  
  方法 ~__getattr__~ 和 ~__getattribute__~ 的使用：
  + __getattr__(self, attr)
    - 触发时机： 获取不存在的对象成员时触发
    - 作用： 为访问不存在的属性设置值
    - 注意：__getattribute__() 无论何时都会在 __getattr__() 之前触发， 
      触发了 __getattribute__() *有返回值* 就不会在触发 __getattr__() 了

  + __getattribute__(self, attr)
    - 触发时机： 使用对象成员时触发， 无论成员是否存在

* 数值运算相关
  + 乘方
    #+BEGIN_SRC python
      >>> 2 ** 2
      4
      >>> 2 ** 0.5
      1.4142135623730951
      >>> 2 ** .5
      1.4142135623730951
    #+END_SRC

  + 正负无穷
    #+BEGIN_SRC python
      >>> float('inf')  # 正无穷
      inf
      >>> float('-inf')  # 负无穷
      -inf
      >>> 1 + float('inf')
      inf
      >>> 1 - float('inf')
      -inf
      >>> 0 * float('inf')
      nan  #  not a number
    #+END_SRC

* 作用域问题
  ~Python~ 没有块级作用域, 也就是: ~if/elif/else/ try/except for/while~ 内定义的变量, 
  外部也是可以访问的。局部作用域还是有的。

  #+BEGIN_SRC python
    In [1]: for i in range(10):
       ...:     pass
       ...:

    In [2]: i
    Out[2]: 9
  #+END_SRC
 
  + LEGB :: ~locals -> enclosing function -> globals -> __builtins__~

            参考： [[https://segmentfault.com/a/1190000000640834][理解 Python 的 LEGB]]

** 修改全局变量
   1. 内部函数， *不修改* 全局变量可以访问全局变量
   2. 内部函数， *修改* 同名全局变量，则 ~python~ 会认为它是一个局部变量

   即： 如果在函数中对全局变量进行赋值修改， 就会出现 ~Unbound-LocalError~.

   *注*: 不仅是对于 *全局变量* 是这样， 对于所有 *父* 作用域的 *子* 作用域都是如此， 如嵌套函数等。

   #+BEGIN_SRC python
     In [1]: def test():        
        ...:     name = 10      
        ...:     def in_test(): 
        ...:         print(name)
        ...:         name = 100 
        ...:     in_test()      
        ...:                    
     In [2]: test()
     ---------------------------------------------------------------------------
     UnboundLocalError                         Traceback (most recent call last)
     <ipython-input-4-ea594c21b25d> in <module>()
     ----> 1 test()

     <ipython-input-3-9edf775478c7> in test()
           4         print(name)
           5         name = 100
     ----> 6     in_test()
           7

     <ipython-input-3-9edf775478c7> in in_test()
           2     name = 10
           3     def in_test():
     ----> 4         print(name)
           5         name = 100
           6     in_test()

     UnboundLocalError: local variable 'name' referenced before assignment
   #+END_SRC

* Python 垃圾回收机制
  ~Python~ 的垃圾回收是根据 *引用计数* 来判断的， 当一个对象的 *引用* 为 0 是，
  该对象便会被回收。

* 成员相关
** 保护成员和私有成员
   + *单下划线* 开头的对象为 *保护成员*, 如 ~_obj~.

     *保护成员* 不能通过 ~from module impport *~ 的方式导入， 但可以在使用
     ~import module~ 导入模块后， 通过 ~module._obj~ 的形式访问。

     除此之外， *保护成员* 的行为与一般成员的行为 *无区别*.

   + *双下划线* 开头的对象为 *私有成员*, 只能由 *类对象* 自身进行访问。 但可以通过 ~_class__obj~ 的
     形式强行访问。

   #+BEGIN_SRC python
     In [1]: class Test(object):
        ...:     def __init__(self):
        ...:         self._protect = 10
        ...:         self.__private = 10
        ...:

     In [2]: t = Test()

     In [3]: t._protect
     Out[3]: 10

     In [4]: t.__private
     ---------------------------------------------------------------------------
     AttributeError                            Traceback (most recent call last)
     <ipython-input-4-948bf5e358da> in <module>()
     ----> 1 t.__private

     AttributeError: 'Test' object has no attribute '__private'

     In [5]: t._Test__private
     Out[5]: 10
   #+END_SRC

** 内置成员
   + ~__name__~ *模块* 或 *类* 的名称， 如果 *模块* 是被直接执行的模块， ~__name__~ 的值为 ~__main__~.

     #+BEGIN_SRC python
       In [7]: class Test(object):
          ...:     pass
          ...:

       In [8]: Test.__name__
       Out[8]: 'Test'
     #+END_SRC

     *注：* *类实例* 没有 ~__name__~ 属性。

   + ~__dict__~ 用来存储 *对象属性* 的一个字典， 其 *键* 为 *属性名*, *值* 为 *属性* 的值.

     需要注意的是：
     1. 并不是所有对象都拥有 ~__dict__~ 属性， 许多内建类型就没有 ~__dict__~ 属性

     2. 实例的 ~__dict__~ 仅存储与该实例相关的实例属性

     3. 类的 ~__dict__~ 存储所有实例共享的变量和函数, 类的 ~__dict__~ 并不包含其父类的属性

   + ~__doc__~ 定义一个 *对象* 的 *文档字符串*.

   + ~__path__~ 包含这个属性的 *模块* 会被当做一个 *包*.

   + ~__class__~ 当前对象的类

* 导入机制
  #+BEGIN_SRC python
    import spam
    spam = __import__('spam', globals(), locals(), [], 0)
  #+END_SRC

  以上两行代码等价

* 特殊属性
  + [[https://segmentfault.com/a/1190000005701971][Python （类）实例方法的特殊属性]]
  + [[https://segmentfault.com/a/1190000005685090][Python 自定义函数的特殊属性]]

* 字节转字符串
  #+BEGIN_SRC python
    bytes.hex()
  #+END_SRC

  
