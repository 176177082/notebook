#+TITLE:      C 语言笔记

* 目录                                                    :TOC_4_gh:noexport:
- [[#语法相关][语法相关]]
- [[#有符号数--无符号数][有符号数 & 无符号数]]
- [[#自增运算][自增运算]]
- [[#内存分区][内存分区]]
- [[#预处理器][预处理器]]
- [[#柔性数组][柔性数组]]
- [[#内存对齐][内存对齐]]
- [[#类型转化][类型转化]]
- [[#static][static]]
  - [[#使用][使用]]
- [[#struct][struct]]

* 语法相关
  + 赋值语句 :: 类似 ~if (x = func())~ 的语句, ~if~ 判断的值为执行 ~x = func()~ 后 ~x~ 的值,
            此时, ~x~ 的值已经改变。

  + 连续赋值 :: 类似 ~x = y = z~ 的语句， 只要 *右边* 的变量都 *已定义*, 那么左边的所有
            变量都会赋值为 *右边* 变量的值。

            ~int x = y = 2~ 的形式， ~y~ 没有定义会执行出错。

  + 逗号 :: 类似 ~expression, expression~ 的语句， 会根据顺序执行。

  + 括号 :: 类似 ~(expression)~ 的语句， 会将 *括号* 内部的结果单独作为一个整体。

* 有符号数 & 无符号数
  整数字面值默认为 *有符号数*, 定义无符号数可以使用后缀 ~u~ 或 ~U~.

  如果一个运算同时存在有符号数和无符号数， 那么会隐式的将有符号数转换为无符号数：
  #+BEGIN_SRC C
    // 1st. -2147483647 - 1 = -2147483648
    // 2st. -2147483648 ==> 2147483648U
    // 3st. 2147483647 > 2147483648U

    2147483647U > -2147483647 - 1;  // false
  #+END_SRC

* 自增运算
  + 一般情况：
    #+BEGIN_SRC C
      #include <stdio.h>

      int main(void) {
        int num = 0, count = 0;

        for (int i = 0; i < 10; ++i) {
          num = count++;  // 7
        }

        return 0;
      }
    #+END_SRC

    第七行对应汇编代码：
    #+BEGIN_SRC asm
        // count in -4(rbb), num in -8(rbp)
        0x0000000000401594 <+36>:    mov    -0x4(%rbp),%eax
        0x0000000000401597 <+39>:    lea    0x1(%rax),%edx
        0x000000000040159a <+42>:    mov    %edx,-0x4(%rbp)
        0x000000000040159d <+45>:    mov    %eax,-0x8(%rbp)
    #+END_SRC

  + 特殊情况：
    #+BEGIN_SRC C
      #include <stdio.h>

      int main(void) {
        int count = 0;

        for (int i = 0; i < 10; ++i) {
          count = count++;  // 7
        }

        return 0;
      }
    #+END_SRC

    第七行对应汇编代码：
    #+BEGIN_SRC asm
        // count in -4(rbp)
        0x000000000040158d <+29>:    mov    -0x4(%rbp),%eax
        0x0000000000401590 <+32>:    lea    0x1(%rax),%edx
        0x0000000000401593 <+35>:    mov    %edx,-0x4(%rbp)
        0x0000000000401596 <+38>:    mov    %eax,-0x4(%rbp)
    #+END_SRC

  + 执行过程：
    1. 取有右操作数的值放入寄存器 eax
    2. eax + 1 放入寄存器 edx
    3. edx 的值放入右操作数地址
    4. eax 的值放入左操作数地址

  + 理解：
    在这样的操作中， 编译器使用了两个寄存器来保存 *自增前* 和 *自增后* 的值。

    然后首先将 *自增后* 的值保存， 然后将 *自增前* 的值赋给 *左值*.

    因此 ~count = count++~ 不会改变 ~count~ 的值。

    这是一个运算优先级的问题。 先赋值在自增指的只是赋给 *左值* 的值是 *自增前* 的值。

    而 ~++count~ 赋的是 *自增后* 的值。

* 内存分区
  + 栈 :: 由编译器在需要的时候分配， 在不需要的时候自动清处的变量的存储区。里面的变量通常是局部变量、函数参数等。

  + 堆 :: ~new(c++)~ 分配的内存块， 它们的释放编译器不去管， 由应用程序去控制，
         一般一个 ~new~ 就要对应一个 ~delete~. 如果程序没有释放掉， 那么在程序结束后， 操作系统会自动回收。

  + 自由存储区 :: 由 ~malloc~ 等分配的内存块，它和堆十分相似，不过它是用 ~free~ 来结束自己的生命的。

  + 全局/静态存储区 :: 局部变量和静态变量被分配到同一块内存中，在 ~C~ 语言中，全局变量又分为初始化的和未初始化的，
                在 ~C++~ 里面没有这个区分， 它们共同占用同一块内存区。

  + 常量存储区 :: 这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。（可通过特殊的方式进行修改）

* 预处理器
  + 预处理器会将仅用 *空白字符* 分隔的字符串常量序列串联起来：
    #+BEGIN_EXAMPLE
      "123"  "456" ==> "123456"
    #+END_EXAMPLE

* 柔性数组
  在结构体最后一个成员定义为长度为 0 的数组。

  这个数组的实际大小为 0, 数组的地址就是结构体后内存区域的地址。

  #+BEGIN_SRC C
    struct Example {
      int num;
      char data[];
    }
  #+END_SRC

  + [[https://blog.csdn.net/gatieme/article/details/64131322][柔性数组]]

* 内存对齐
  结构体的内存对齐只要能满足对齐规则， 就尽量少补。

  结构体内部的字段补内存时只有靠近需要对齐内存的字段的字段需要：
  #+BEGIN_SRC C
    struct P {
      int i;
      char c;  // 不补， 下一个字段对齐的
      char d;  // 补， 下一个字段内存不对齐
      long j;  // x86-64
    }
  #+END_SRC

* 类型转化
  链接： [[http://zh.cppreference.com/w/c/language/conversion][隐式转换]]

  + 一般情况 :: 自动转换将 ~比较窄的~ 操作数 转换为 ~比较宽~ 的操作数。
            #+BEGIN_EXAMPLE
              char, short --> int --> unsigned --> long -- > double
                                                             ^
                                                             |
                                                             float
            #+END_EXAMPLE
* static
  1. 在修饰变量的时候，static 修饰的静态局部变量只执行一次，而且延长了局部变量的生命周期，直到程序运行结束以后才释放
  2. static 修饰全局变量的时候，这个全局变量只能在本文件中访问，不能在其它文件中访问，即便是 extern 外部声明也不可以
  3. static 修饰一个函数，则这个函数的只能在本文件中调用，不能被其他文件调用
  4. static 修饰的局部变量存放在全局数据区的静态变量区, 初始化的时候自动初始化为0

** 使用
   1. 不想被释放的时候，可以使用 static 修饰。比如修饰函数中存放在栈空间的数组。如果不想让这个数组在函数调用结束释放可以使用 static 修饰
   2. 考虑到数据安全性(当程序想要使用全局变量的时候应该先考虑使用 static)

* struct
  嵌套的结构体只能在结构体内部定义变量, 在结构体外不能使用.
  #+BEGIN_SRC C
    struct Outside {
      static Inside {
        int val;
      } _inside;
      int val;
    };

    struct Outside out;

    out.val = 0;
    out._insiade.val = 0;
  #+END_SRC

