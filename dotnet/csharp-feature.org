#+TITLE:      C# 高级特性

* 目录                                                    :TOC_4_gh:noexport:
- [[#lambda--func--action][Lambda & Func & Action]]
- [[#引用-com-组件][引用 COM 组件]]
- [[#关键字-as-和-is][关键字 as 和 is]]
- [[#文档注释标记][文档注释标记]]
- [[#初始化字典][初始化字典]]
- [[#创建和引发异常][创建和引发异常]]

* Lambda & Func & Action
  + [[https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions][Lambda 表达式]]
  + [[https://docs.microsoft.com/zh-cn/dotnet/api/system.func-1?view=netframework-4.7.2][Func<TResult> Delegate]]
  + [[https://docs.microsoft.com/zh-cn/dotnet/api/system.action-1?redirectedfrom=MSDN&view=netframework-4.7.2][Action<T> Delegate]]

  ~Func~ 和 ~Action~ 属于委托类型，因此可以将 ~Lambda~ 表达式作为值赋给 ~Func~ 或 ~Action~ 类型的变量。

  特别的， ~Func~ 必然有一个参数为返回值，而 ~Action~ 必然没有返回值。

* 引用 COM 组件
  应用程序 ~aximp.exe~ 可以将 ~COM~ 组件转换为 ~.NET~ 可以用的 ~DLL~ 库。

  简单的使用方式为： ~aximp xxx.dll~.

  参考： [[https://docs.microsoft.com/en-us/dotnet/framework/tools/aximp-exe-windows-forms-activex-control-importer][Aximp.exe (Windows Forms ActiveX Control Importer)]]
  
* 关键字 as 和 is
  使用 ~as~ 进行类型转换。转换失败返回 ~null~ 而不是抛出异常。使用 ~is~ 判断类型。

  以下两个表达式等价：
  #+BEGIN_SRC csharp
    expression as type
    expression is type ? (type) expression : (type) null
  #+END_SRC

* 文档注释标记
  | <c>         | <para>       | <see>          |
  | <code>      | <param>      | <seealso>      |
  | <example>   | <paramref>   | <summary>      |
  | <exception> | <permission> | <typeparam>    |
  | <include>   | <remarks>    | <typeparamref> |
  | <list>      | <returns>    | <value>        |

  Refrence [[https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments][Recommended Tags for Documentation Comments]]

* 初始化字典
  #+BEGIN_SRC csharp
    class StudentName
    {
      public string FirstName { get; set; }
      public string LastName { get; set; }
      public int ID { get; set; }
    }

    Dictionary<int, StudentName> students = new Dictionary<int, StudentName>()
    {
      { 111, new StudentName {FirstName="Sachin", LastName="Karnik", ID=211}},
      { 112, new StudentName {FirstName="Dina", LastName="Salimzianova", ID=317}},
      { 113, new StudentName {FirstName="Andy", LastName="Ruth", ID=198}}
    };
  #+END_SRC

* 创建和引发异常 
  + 方法无法完成其定义的功能
    #+BEGIN_SRC csharp
      static void CopyObject(SampleClass original)
      {
        if (original == null)
        {
          throw new System.ArgumentException("Parameter cannot be null", "original");
        }

      }
    #+END_SRC

  + 对某个对象进行不适当的调用
    #+BEGIN_SRC csharp
      class ProgramLog
      {
        System.IO.FileStream logFile = null;
        void OpenLog(System.IO.FileInfo fileName, System.IO.FileMode mode) {}

        void WriteLog()
          {
            if (!this.logFile.CanWrite)
            {
              throw new System.InvalidOperationException("Logfile cannot be read-only");
            }
            // Else write data to the log and return.
          }
      }
    #+END_SRC

  + 方法的参数引发了异常
    #+BEGIN_SRC csharp
      static int GetValueFromArray(int[] array, int index)
      {
        try
        {
          return array[index];
        }
        catch (System.IndexOutOfRangeException ex)
        {
          System.ArgumentException argEx = new System.ArgumentException("Index is out of range", "index", ex);
          throw argEx;
        }
      }
    #+END_SRC

