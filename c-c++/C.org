#+SETUPFILE:  ./_style/style.setup
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:nil -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+TITLE:      C 语言笔记
#+AUTHOR:     rgb_24bit
#+EMAIL:      rgb_24bit@foxmail.com
#+DATE:       <2018-02-05 周一>

* 整数
  默认为有符号数

  定义无符号数后缀： ~u~ 或 ~U~
  
  如果一个运算同时存在有符号数和无符号数， 那么会隐式的将有符号数转换为无符号树。
 
  #+BEGIN_EXAMPLE
    2147483647U > -2147483647 - 1, False

    运算1: -2147483647 - 1

    运算2: 2147483647U > -2147483648
  #+END_EXAMPLE
 
* 错误处理
  + 头文件: <assert.h> <error.h> <stdio.h>
    - <assert.h>
      + 定义函数: assert(int express) 当括号内判断表达式为 0 时, 输出错误信息
        程序可能异常终止, 不知道 linux 是不是这样的.
    - <error.h>
      + 定义宏: error, 当 error 不为零时, 说明程序运行过程中出现了错误, 应该在使用前
        设置为 0
    - <stdio.h>
      + 定义函数: perror(const char* s) 输出程序运行过程中的错误信息, 会自动在字符串 s 
        后添加一个 : 和一个空格

* 内存分区
  在C++中, 内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区.
  + 栈 :: 就是那些由编译器在需要的时候分配，在不需要的时候自动清楚的变量的存储区。里面的变量通常是局部变量、函数参数等。
  + 堆 :: 就是那些由new分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个new就要对应一个delete。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。
  + 自由存储区 :: 就是那些由malloc等分配的内存块，他和堆是十分相似的，不过它是用free来结束自己的生命的。
  + 全局/静态存储区 :: 局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。
  + 常量存储区 :: 这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改（当然，你要通过非正当手段也可以修改，而且方法很多）

* 预处理器
  + 处理仅用空格(或其他空白字符) 分隔的字符串常量序列时， 就把它们串联起来
    : "1234"   "4567"  ==> "12344567"

* 类型转化
  链接： [[http://zh.cppreference.com/w/c/language/conversion][隐式转换]]

  + 一般情况 :: 自动转换将 ~比较窄的~ 操作数 转换为 ~比较宽~ 的操作数。
            #+BEGIN_EXAMPLE
              char, short --> int --> unsigned --> long -- > double
                                                             ^
                                                             |
                                                             float
            #+END_EXAMPLE
* static
** C语言中static关键字的作用
   1. 在修饰变量的时候，static修饰的静态局部变量只执行一次，而且延长了局部变量的生命周期，直到程序运行结束以后才释放
   2. static修饰全局变量的时候，这个全局变量只能在本文件中访问，不能在其它文件中访问，即便是extern外部声明也不可以
   3. static修饰一个函数，则这个函数的只能在本文件中调用，不能被其他文件调用
   4. tatic修饰的局部变量存放在全局数据区的静态变量区, 初始化的时候自动初始化为0

*** 使用
    1. 不想被释放的时候，可以使用static修饰。比如修饰函数中存放在栈空间的数组。如果不想让这个数组在函数调用结束释放可以使用static修饰
    2. 考虑到数据安全性(当程想要使用全局变量的时候应该先考虑使用static)

** 在C++中static关键字除了具有C中的作用还有在类中的使用 
*** 修饰静态数据成员
    1. 静态数据成员可以实现多个对象之间的数据共享，它是类的所有对象的共享成员，它在内存中只占一份空间，如果改变它的值，则各对象中这个数据成员的值都被改变
    2. 静态数据成员是在程序开始运行时被分配空间，到程序结束之后才释放，只要类中指定了静态数据成员，即使不定义对象，也会为静态数据成员分配空间
    3. 静态数据成员可以被初始化，但是只能在类体外进行初始化，若为对静态数据成员赋初值，则编译器会自动为其初始化为0
    4. 静态数据成员既可以通过对象名引用，也可以通过类名引用

*** 修饰静态成员方法
    1. 静态成员函数和静态数据成员一样，他们都属于类的静态成员，而不是对象成员
    2. 非静态成员函数有this指针，而静态成员函数没有this指针
    3. 静态成员函数主要用来方位静态数据成员而不能访问非静态成员

* struct
  嵌套的结构体只能在结构体内部定义变量, 在结构体外不能使用.
  #+BEGIN_SRC C
    struct Outside {
      static Inside {
        int val;
      } _inside;
      int val;
    };

    struct Outside out;

    out.val = 0;
    out._insiade.val = 0;
  #+END_SRC

