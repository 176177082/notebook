#+SETUPFILE:  ./_style/style.setup
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:nil -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+TITLE:      C 语言指针

- [[http://home.netcom.com/~tjensen/ptr/pointers.htm][完整教程]]

* 指针与数组
  : An object is a named region of storage; an lvalue is an expression referring to an object.
  译: 一个 ~对象~ 是一个 ~命名~ 的 ~储存区域~, 左值是指对象的表达式.

  值类型(如 ~int~) 的每一个变量都对应一个单独的对象.
  而引用类型(如 ~指针~ 传递) 的是对一个对象的 ~引用~, 不创建新的对象.

  指针类型的变量储存的是一个 ~内存对象~.

   #+BEGIN_SRC C :results output :exports both
     int my_array[] = {1,23,17,4,-5,100};
     int *ptr;

     int main(void)
     {
         int i;
         ptr = &my_array[0];     /* point our pointer to the first
                                    element of the array */
         printf("\n\n");
         for (i = 0; i < 6; i++)
         {
             printf("my_array[%d] = %d   ",i,my_array[i]);   /*<-- A */
             printf("ptr + %d = %d\n",i, *(ptr + i));        /*<-- B */
         }
         return 0;
     }
   #+END_SRC

   #+RESULTS:
   : my_array[0] = 1   ptr + 0 = 1
   : my_array[1] = 23   ptr + 1 = 23
   : my_array[2] = 17   ptr + 2 = 17
   : my_array[3] = 4   ptr + 3 = 4
   : my_array[4] = -5   ptr + 4 = -5
   : my_array[5] = 100   ptr + 5 = 100

   在 ~C~ 标准中, 凡是我们可以使用 ~&var_name[0]~ 的地方, 我们都可以用 ~var_name~ 代替.
   
   而, ~a[5]~ 可以转化为 ~5[a]~, 等价于: ~*(a + 5)~.
   
* 指针与字符串
   #+BEGIN_SRC C :results output :exports both

     #include <stdio.h>

     char strA[80] = "A string to be used for demonstration purposes";
     char strB[80];

     int main(void)
     {

         char *pA;     /* a pointer to type character */
         char *pB;     /* another pointer to type character */
         puts(strA);   /* show string A */
         pA = strA;    /* point pA at string A */
         puts(pA);     /* show what pA is pointing to */
         pB = strB;    /* point pB at string B */
         putchar('\n');       /* move down one line on the screen */
         while(*pA != '\0')   /* line A (see text) */
         {
             *pB++ = *pA++;   /* line B (see text) */
         }
         *pB = '\0';          /* line C (see text) */
         puts(strB);          /* show strB on screen */
         return 0;
     }
   #+END_SRC

   #+RESULTS:
   : A string to be used for demonstration purposes
   : A string to be used for demonstration purposes
   : 
   : A string to be used for demonstration purposes
   
   字符串, 相当于字符数组.

* 二级指针与二维数组
   #+BEGIN_SRC C
     #include<stdio.h>

     int **returnNum()
     {
       int **a,i,j;
       a = (int**)malloc(5*sizeof(int*));
       for(i=0;i<5;++i)
       {
         a[i] = (int*)malloc(5*sizeof(int));
         for(j=0;j<5;++j)
         {
           a[i][j]=i;
         }
       }
       return a;//error: cannot convert `int (*)[5]' to `int**' in return
     }

     int main()
     {
       //int cpy[5][5]=returnNum; // error: invalid initializer
       int **cpy=returnNum();
       int i,j;
       for(i=0;i<5;++i)
       {
         for(j=0;j<5;++j)
         {
           printf("%d ", cpy[i][j]);
         }
         printf("\n");
         free(cpy[i]);
       }
       free(cpy);

       return 0;
     }
   #+END_SRC
   
   二级指针, 指向指针的指针.

* 函数指针
  #+BEGIN_SRC c
    /* 定义一个函数指针 */
    int (*func)(int num);

    /* 假定存在函数 int fib(int n) */
    func = fib;  /* 赋值 */

    /* 定义一个函数指针类型 */
    typedef int(*Func)(int num);  /* 定义了名为 Func 的函数指针类型 */

    /* 定义 Func 类型函数指针变量 */
    Func func = fib;
  #+END_SRC

* 传递指针参数
  指针也是 ~按值~ 传参的：
  #+BEGIN_SRC c
    #include <stdio.h>

    void test_point(int* point) {
      int num = 10;
      point = &num;
      printf("%p\n", point);
    }

    int main(void) {
      int num = 10;
      int* point = &num;

      printf("%p\n", point);
      test_point(point);
      printf("%p\n", point);

      return 0;
    }
  #+END_SRC

  输出结果：
  #+BEGIN_EXAMPLE
    000000000022FE44
    000000000022FE0C
    000000000022FE44
  #+END_EXAMPLE

  所以， 如果要在递归中对指针进行 ~realloc~, 可能在递归中将指针原来指向的内存清理了。

* 细节问题
** 运算符优先级
   ~*p++~, 先 ~*p~, 后 ~p++~.
   ~*++p~, 先 ~++p~, 后 ~*p~.

** 数组初始化
   数组如果未初始化, 那么数组元素的值是不确定的.

   如果进行初始化时， 初始化的元素小于数组的长度， 那么剩下的值默认为 0.
   
   可变长对象数组不能初始化.
** 值类型理解
   ~结构体~ 是值类型.

   函数返回结构体时, 返回的是结构体的值, 因此函数内部创建的结构体返回
   值依然存在.

   ~数组~ 是引用类型.

   函数返回数组的时候, 返回的是数组所在那片内存区域的地址
   而那片地址在函数执行完成后便消毁了.

