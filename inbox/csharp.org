* 委托
  #+BEGIN_SRC csharp
    public delegate void Del(string message);  // 声明委托

    // Create a method for a delegate.
    public static void DelegateMethod(string message)
    {
      System.Console.WriteLine(message);
    }

    // Instantiate the delegate.
    Del handler = DelegateMethod;

    // Call the delegate.
    handler("Hello World");
  #+END_SRC

  委托表示对具有特定参数列表和返回类型的 *方法的引用*.

  + [[https://stackoverflow.com/questions/7735159/why-use-new-delegatetypedelegate][Why use “new DelegateType(Delegate)” ?]]
  + [[https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate][How to: Declare, Instantiate, and Use a Delegate]]

* 事件
  #+BEGIN_SRC csharp
    // 声明事件处理程序对应的委托类型
    public delegate void BoilerLogHandler(string status);

    // 声明事件本身
    public event BoilerLogHandler BoilerEventLog;

    // 触发事件
    BoilerEventLog();
  #+END_SRC

  可以将事件理解为封装了委托的数据结构，添加事件处理程序的时候就是在添加委托的引用。

  而触发事件就是将调用委托引用的方法，并自动传递参数。

