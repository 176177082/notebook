* 设计原则
  1. 找出应用中肯需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起
  2. 针对接口变成，而不是针对实现编程
  3. 多用组合，少用继承
  4. 为交换对象之间的松耦合设计而努力
  5. 类应该对扩展开发，对修改关闭
  6. 要依赖抽象，不要依赖具体类

* Spring
  + [[https://www.quora.com/What-are-the-design-patterns-for-the-spring-framework][What are the design patterns for the spring framework? - Quora]]
  + [[https://stackoverflow.com/questions/755563/what-design-patterns-are-used-in-spring-framework][What design patterns are used in Spring framework? - Stack Overflow]]
  + [[https://blog.eduonix.com/java-programming-2/learn-design-patterns-used-spring-framework/][Learn about Design Patterns used in Spring Framework]]

* 适配器模式
  接口 -> 提供默认实现的抽象类 -> 具体类

* 桥接模式
  + [[http://www.blogjava.net/wangle/archive/2007/04/25/113545.html][从桥接模式与策略模式谈起 - 一半是火焰，一半是海水 - BlogJava]]

* 类之间的关系
  关联关系是指一个类包含另一个类的引用：
  + 聚合关系：一个类包含另一个类的引用，两者生命周期相互独立，通过空心菱形表示
  + 组合关系：一个类包含另一个类的引用，两者生命周期相一致，通过实心菱形表示

  依赖关系通常是指一个类的方法的参数或返回值包含另一个类型，通常用虚线箭头表示。

  泛化关系通常指继承关系，通常用实线空心三角形表示，对于接口来说通常用虚线空心三角形表示。

* 面向对象设计原则
  |--------------+------------------------------------------------|
  | 设计原则     | 解释                                           |
  |--------------+------------------------------------------------|
  | 单一职责原则 | 类的职责要单一，不能将太多的职责放在一个类中   |
  | 开闭原则     | 对扩展开放，对修改关闭                         |
  | 里氏代换原则 | 所有引用基类的地方必须能透明地使用其子类的对象 |
  | 依赖倒转原则 | 针对抽象编程，而不是针对具体编程               |
  | 接口隔离原则 | 使用多个专门的接口来取代一个统一的接口         |
  | 合成复用原则 | 尽量多使用组合和聚合关系，少用或不用继承关系   |
  | 迪米特法则   | 一个软件实体对其他实体的引用越少越好           |
  |--------------+------------------------------------------------|

* 模式概览
  |--------------+------------------------------------------------------+------------------------------|
  | 模式名称     | 模式角色                                             | 模式扩展                     |
  |--------------+------------------------------------------------------+------------------------------|
  | 工厂方法模式 | 抽象工厂、具体工厂、抽象产品、具体产品               |                              |
  | 抽象工厂模式 | 抽象工厂、具体工厂、抽象产品、具体产品               |                              |
  | 建造者模式   | 抽象建造者、具体建造者、产品、指挥者                 |                              |
  | 原型模式     | 抽象原型类、具体原型类、客户类                       | 带原型管理器的原型模式       |
  | 单例模式     | 单例角色                                             | 饿汉式单例类、懒汉式单例类   |
  | 适配器模式   | 目标抽象类、适配器类、适配者类、客户类               | 缺省适配器模式               |
  | 桥接模式     | 抽象类、扩充抽象类、实现类接口、具体实现类           |                              |
  | 组合模式     | 抽象构件、叶子构件、容器构件、客户类                 | 透明组合模式、安全组合模式   |
  | 装饰模式     | 抽象构件、具体构件、抽象装饰类、具体装饰类           | 透明装饰模式、半透明装饰模式 |
  | 外观模式     | 外观角色、子系统角色                                 |                              |
  | 享元模式     | 抽象享元类、具体享元类、非共享具体享元类、享元工厂类 | 单次享元模式、复合享元模式   |
  | 代理模式     | 抽象主题角色、代理主题角色、真实主题角色             | 远程代理、虚拟代理           |
  | 责任链模式   | 抽象处理者、具体处理者、客户类                       | 纯/不纯责任链模式            |
  | 命令模式     | 抽象命令类、具体命令类、调用者、接受者、客户类       | 撤销操作、宏命令             |
  | 解释器模式   | 略                                                   | 略                           |
  | 迭代器模式   | 抽象迭代器、具体迭代器、抽象聚合类、具体聚合类       |                              |
  | 中介者模式   | 抽象中介者、具体中介者、抽象同事类、具体同事类       |                              |
  | 备忘录模式   | 原发器、备忘录、负责人                               |                              |
  | 观察者模式   | 目标、具体目标、观察者、具体观察者                   |                              |
  | 状态模式     | 环境类、抽象状态类、具体状态类                       | 简单状态模式、可切换状态     |
  | 策略模式     | 环境类、抽象策略了、具体策略类                       |                              |
  | 模板方法模式 | 抽象类、具体子类                                     |                              |
  | 访问者模式   | 抽象访问者、具体访问者、抽象元素、具体元素、对象结构 |                              |
  |--------------+------------------------------------------------------+------------------------------|

* 相关问题
  + [[https://www.nowcoder.com/discuss/66230][为什么半透明装饰模式不能实现对同一个对象的多次装饰？_技术交流_牛客网]]
  + [[https://stackoverflow.com/questions/18618779/differences-between-proxy-and-decorator-pattern][oop - Differences between Proxy and Decorator Pattern - Stack Overflow]]


