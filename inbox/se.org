#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://rgb-24bit.github.io/org-html-theme-list/org-readthedocs/theme/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://rgb-24bit.github.io/org-html-theme-list/org-readthedocs/theme/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>

#+HTML_HEAD: <script type="text/javascript" src="https://rgb-24bit.github.io/org-html-theme-list/org-readthedocs/theme/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://rgb-24bit.github.io/org-html-theme-list/org-readthedocs/theme/js/readtheorg.js"></script>

#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc

#+TITLE: 软件工程方法与实践
#+AUTHOR: rgb-24bit

* 第 1 章 软件工程概述
  + 软件是计算机系统中与硬件对应的另一部分， 是一系列程序， 数据及文档的集合。

  + 程序、 数据和文档为软件的三要素

  + 软件的特征包括： 复杂性、 一致性、 退化性、 易变性、 移植性、 高成本

  #+CAPTION: 软件特征
  |--------+--------------------------------------------------------------|
  | 特征   | 描述                                                         |
  |--------+--------------------------------------------------------------|
  | 复杂性 | 比硬件更加复杂。是一个庞大的逻辑系统。                       |
  | 一致性 | 软件必须和运行它的硬件保持一致，依赖于硬件。                 |
  | 退化性 | 不存在硬件的磨损和老化问题。                                 |
  | 易变性 | 软件在生产过程、投入运行后也可以在改变，硬件不行。           |
  | 移植性 | 受计算机系统运行，不易移植。                                 |
  | 高成本 | 软件开发需要耗费大量的开发成本和管理成本。硬件可以走流水线。 |
  |--------+--------------------------------------------------------------|

  + 软件危机的主要表现为：

    - 软件供给需差距大

    - 软件开发管理困难

    - 软件开发模式过时

  + 方法、 工具和过程为软件工程的三要素

  + 质量、 成本和工具为软件工程管理的三要素

  + 软件工程的基本原理包括： 推迟实现、 逐步求精、 分解与抽象、 信息隐蔽、 质量保证

  + 软件工程的基本原则包括： 分阶段软件开发、 坚持进行阶段评审、 采用先进的程序设计技术、 明确责任、 开发小组的人员应少而精、 不断改进开发过程

  + 软件工程开发的方法有： 结构化开发方法学、 面向对象开发方法学、 形式化开发方法学

* 第 2 章 软件过程
  + 软件过程的定义是： 软件的诞生及其生命周期

  + 软件过程框架： 沟通、 策划、 建模、 构建和部署

  + 软件生存周期可以划分为： 定义、 开发和运行三个阶段

  + 软件生存周期包括： 问题的定义与可行性分析、 项目计划、 需求分析、 软件设计、 编码与测试、 运行与维护等阶段

  #+CAPTION: 软件生存周期
  |------------------------+----------------------------------------------------------------------------------------------------------------|
  | 阶段                   | 描述                                                                                                           |
  |------------------------+----------------------------------------------------------------------------------------------------------------|
  | 问题的定义与可行性分析 | 软件开发人员与客户沟通，确定软件的开发目标、范围、规模及项目的可行性。                                         |
  | 项目计划               | 根据项目的问题、范围、规模制定初步的开发计划。                                                                 |
  | 需求分析               | 在确定软件开发可行的情况下，对软件需要实现的各个功能进行详细分析。                                             |
  | 软件设计               | 根据需求分析的结果，对整个软件系统进行设计。                                                                   |
  | 编码与测试             | 将软件设计的结果转化为计算机可运行的程序代码。并在设计完成后进行严密的测试，以发现整个设计工过程中存在的问题。 |
  | 运行与维护             | 软件开发完成投入使用，延续软件的使用寿命进行维护。                                                             |
  |------------------------+----------------------------------------------------------------------------------------------------------------|

  + 软件工程活动包括： 沟通活动、 计划活动、 建模活动、 实现活动、 部署活动、 维护活动、 管理活动、 过程改进活动

* 第 3 章 软件过程模型
  + 软件过程模型： 把软件生存周期中各项开发活动的流程用一个合理框架 - 开发模型来规范描述

  + 传统的软件过程模型包括： 瀑布模型、 原型模型、 增量模型、 螺旋模型

  + 面向对象模型包括： 构建集成模型、 统一过程模型

  + 瀑布模型将软件生存周期划分为： 软件计划、 需求分析、 软件设计、 软件实现、 软件测试、 运行与维护这 6 个阶段

  + 瀑布模型接受上一项活动的工作结果作为输入， 然后实施该项活动应该完成的工作， 并将该活动的工作结果作为输出传给下一项活动

  + 瀑布模型具有的特点： 顺序性和依赖性、 推迟实现、 质量保证

  + 瀑布模型局限性： 缺乏灵活性，如用户需求一开始很难确定， 到最后阶段才能得到可运行的软件版本

* 第 4 章 敏捷软件开发方法
  略

* 第 5 章 软件需求分析
  + 软件需求包括的四个层次：
    1. 业务需求： 反映了组织机构或客户对系统、产品高层次的目标要求。 从总体上描述了为什么要开发系统（why），组织希望达到什么目标。

    2. 用户需求： 描述了用户使用产品必须要完成的任务， 描述了用户能使用系统来做些什么（what）

    3. 功能需求：开发人员在产品中实现的软件功能，用户利用这些功能来完成任务，满足业务需求。 功能需求是需求的主体，
       它描述的是开发人员如何设计具体的解决方案来实现这些需求（how）

    4. 非功能需求： 功能需求的补充，描述了系统完成功能实现的补充和约束条件, 可分为： 产品需求、 机构需求、 外部需求

  + 软件需求应该满足的基本特征： 完整性、 一致性和准确性

  + 需求分析过程为： 沟通、 导出需求、 精化需求、可行性研究、 与客户和用户协商、 编写需求规格说明书、 验证需求、 管理需求

  + 可行性研究包括： 经济可行性、 技术可行性、 社会法律可行性

  + 需求获取的技术： 会谈技术、 调查技术、 场景分析技术

* 第 6 章 结构化分析
  + 结构化分析 ~SA~ 是 *面向数据流* 的需求分析方法

  + 结构化的需求分析模型有： 数据字典（DD）、 数据流图（DFD）、  状态状态转换图（STD）、 实体关系图（ERD）

  + 数据流图的符号包括：
    - 矩形或立方体： 数据源点或终点

    - 圆角矩形或椭圆： 变换数据的处理

    - 开口矩形： 数据存储

    - 箭头： 数据流

  #+CAPTION: 数据字典语法
  |-------------+-------------------|
  | 符号        | 作用              |
  |-------------+-------------------|
  | x=...       | x 由 ... 组成     |
  | a+b         | a 和 b            |
  | [a, b]      | a 或 b            |
  | [a \vert b] | a 或 b            |
  | {a}         | 重复 a 任意次数   |
  | m{a}n       | 重复 a m 到 n 次  |
  | (a)         | 重复 a 零到一次   |
  | "a"         | 表示 a 是基本数据 |
  |-------------+-------------------|

  + 数据流建模方法的步骤： 数据流图要素分析、 构建数据流图和建立数据字典

  + 实体关系图的基本对象为： 实体、联系和属性

  + 实体间的关系包括： 一对一关系、 一对多关系、 多对多关系

  + 状态建模方法步骤： 系统状态、行为与事件分析、 构建状态图

  + 状态图符号：
    + 初态用实心圆表示
    + 终态用一对同心圆(内圆为实心圆)表示
    + 中间状态用圆角矩形表示

* 第 7 章 结构化设计
  + 软件设计主要包含两个阶段： 概要设计和详细设计

