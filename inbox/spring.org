* Future
  + [[http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html][全文搜索引擎 Elasticsearch 入门教程 - 阮一峰的网络日志]]
  + [[https://jwt.io/][JSON Web Tokens - jwt.io]]
  + [[https://www.baeldung.com/spring-boot-devtools][Overview of Spring-Boot Dev Tools | Baeldung]]
  + [[https://juejin.im/post/5af02571f265da0b9e64fcfd#heading-39][消息队列之 RocketMQ - 掘金]]
  + [[https://juejin.im/post/5b00c52ef265da0b95276091][可能是最漂亮的 Spring 事务管理详解 - 掘金]]
  + [[https://commons.apache.org/][Apache Commons – Apache Commons]]
* security
  security 这一块用到的东西有点多，主要有：
  + HTTP 身份验证
    - [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication][HTTP 身份验证 - HTTP | MDN]]
    - [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Authorization][Authorization - HTTP | MDN]]
    - [[http://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml][Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry]]
  + 非 BASIC 验证方式
    - [[https://www.cnblogs.com/XiongMaoMengNan/p/6785155.html][OAuth 2.0: Bearer Token Usage - 熊猫猛男 - 博客园]]
  + Spring security 框架
    - [[https://juejin.im/post/58c29e0b1b69e6006bce02f4][重拾后端之Spring Boot（四）：使用JWT和Spring Security保护REST API - 掘金]]
    - [[https://www.ibm.com/developerworks/cn/web/wa-spring-security-web-application-and-fingerprint-login/index.html][Spring Security 的 Web 应用和指纹登录实践]]
  + 前端的验证
    - [[https://stackoverflow.com/questions/51506579/sending-authorization-token-bearer-through-javascript][jquery - Sending Authorization Token Bearer through Javascript - Stack Overflow]]
    #+BEGIN_SRC js
      fetch(‘https://api.twitter.com/1.1/search/tweets.json', {
            headers: {
              authorization: ‘Bearer your-access-token’
            }
           }).then(response => {
             if (response.status === 401) {
               // try getting the new access token and repeat the same request
             }
             // otherwise carry on
           })
    #+END_SRC
  + Token 的获取与生成：[[https://developer.github.com/v3/oauth_authorizations/][Authorizations | GitHub Developer Guide]]
  + realm [[https://stackoverflow.com/questions/12701085/what-is-the-realm-in-basic-authentication][http - What is the "realm" in basic authentication - Stack Overflow]]
  + 401 响应头中好像没有标准字段给出获取 Token 的位置与方法，好像需要自己设计

* logger
  + [[https://www.baeldung.com/spring-boot-logging][Logging in Spring Boot | Baeldung]]

* Bean
  + AbstractBeanFactory
  + AbstractAutowireCapableBeanFactory
  + P75

* 代理
  + [[http://www.importnew.com/27772.html][Java Proxy 和 CGLIB 动态代理原理 - ImportNew]]
  + JDK原生动态代理是Java原生支持的，不需要任何外部依赖，但是它只能基于接口进行代理
  + CGLIB通过继承的方式进行代理，无论目标对象有没有实现接口都可以代理，但是无法处理final的情况

* 事件机制
  + [[http://www.importnew.com/26782.html][浅析 Spring 中的事件驱动机制 - ImportNew]]

  这是不是意味着创建 Publisher 的时候会自动将响应的 Listener 传递进去。

* scan
  扫描机制的实现可以了解一下。

* mybatis
  + [[http://blog.didispace.com/mybatisinfo/][Spring Boot中使用MyBatis注解配置详解 | 程序猿DD]]
  + MyBatis 会获取结果中返回的列名并在 Java 类中查找相同名字的属性
  #+BEGIN_SRC xml
    <resultMap id="userResultMap" type="User">
      <id property="id" column="user_id" />
      <result property="username" column="user_name"/>
      <result property="password" column="hashed_password"/>
    </resultMap>
  #+END_SRC
  
  + XML 配置中，如果返回值是 List<XXX>，那么只需要指定 XXX 类型就可以了
  + https://github.com/mybatis/typehandlers-jsr310

* gralbum
  问题：
  1. 数据库的设计存在问题
  2. mybatis 的使用不熟练
  3. 测试不知道怎么操作
  4. SQL 语句不熟练
  5. 规范不明确
  6. 内存不够用

* 测试
  SpringApplicationConfiguration 通过 SpringBootTest 替代。

* 收获
  + 配置属性注入
  + Mybatis 使用
  + 测试
  + 数据库版本控制
  + Apache Common
  + EditorConfig
  + ConfigurationProperties
  + [[https://www.baeldung.com/configuration-properties-in-spring-boot][Guide to @ConfigurationProperties in Spring Boot | Baeldung]]

* 注入
  + [[https://docs.spring.io/spring/docs/4.3.x/spring-framework-reference/htmlsingle/#beans-autowired-annotation][Spring Framework Reference Documentation]]
  + [[https://dzone.com/articles/logger-injection-with-springs-injectionpoint][Logger Injection With Spring’s InjectionPoint - DZone Java]]
  + [[https://moelholm.com/2016/10/09/spring-4-3-introducing-the-injectionpoint/][Spring 4.3: Introducing the InjectionPoint class | moelholm.com]]

* cache
  + [[https://www.concretepage.com/spring-boot/spring-boot-redis-cache#RedisCacheManager][Spring Boot Redis Cache]]

* spring mvc
  + [[https://examples.javacodegeeks.com/enterprise-java/spring/mvc/spring-mvc-interceptor-tutorial/][Spring MVC Interceptor Tutorial | Examples Java Code Geeks - 2019]]
  + [[https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestparam][Web on Servlet Stack]]

  请求和响应：
  + [[https://www.baeldung.com/spring-mvc-controller-custom-http-status-code][Custom Status Codes from Spring Controllers | Baeldung]]
  + [[https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html][ResponseEntity (Spring Framework 5.1.8.RELEASE API)]]
  + [[https://www.cnblogs.com/zeroingToOne/p/8992746.html][@RequestParam、@RequestBody和@ModelAttribute区别 - zeroingToOne - 博客园]]

* 事务
  + [[https://www.cnblogs.com/dennyzhangdd/p/9549535.html][spring事务详解（一）初探事务 - 只会一点java - 博客园]]
  + [[https://www.cnblogs.com/dennyzhangdd/p/9602673.html][spring事务详解（三）源码详解 - 只会一点java - 博客园]]
  + 事务可以有名称

* 事务原理
  1. 通过 ThreadLocal 将连接绑定到当前线程
  2. 获取连接时获取 ThreadLocal 中的连接对象
  3. 调用方法前开启事务
  4. 调用方法后提交回退事务，其他数据库的事务可以在获取连接时挂上

  关键：SqlSessionFactoryBean
  + [[https://my.oschina.net/fifadxj/blog/785621][mybatis-spring事务处理机制分析 - fifadxj的个人空间 - OSCHINA]]

* Misc
  + 数据的校验
  + Sentry
  + [[http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html][mybatis – MyBatis 3 | 动态 SQL]]


* spring cloud
  + [[http://www.ityouknow.com/springcloud/2017/05/10/springcloud-eureka.html][springcloud(二)：注册中心Eureka - 纯洁的微笑博客]]
  + [[http://www.ityouknow.com/spring-cloud.html][spring-cloud - 纯洁的微笑博客]]

* mro
  + 多数据源
  + BeanCopier
  + ……
  + [[https://segmentfault.com/a/1190000006922799][BeanCopier 与 BeanUtils 及 人工setter之间的比较 - zhuguowei - SegmentFault 思否]]

* mvc
  过滤器 -> DispactchServlet -> 拦截器 -> Controller -> 拦截器 -> DispactchServlet -> 过滤器

* 事件
  从 ~SpringApplication~ 的源码可以发现，他妈的就只发布了 Refresh 事件，没有发布 Started 事件……

  + [[https://www.jianshu.com/p/ce83ebca5d9d][Spring 事件监听 - 简书]]
  + [[https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L298][spring-boot/SpringApplication.java at master · spring-projects/spring-boot]]
  + [[http://www.iocoder.cn/Spring/ApplicationContextEvent/][Spring 5 源码解析 —— Spring 框架中的事件和监听器 | 芋道源码 —— 纯源码解析博客]]

  本来以为事件没有多少用，结果，用的地方还很多……

  Spring Cloud 和 LoggingSystem 都会监听事件，其中，SpringCloud 会创建一个没有配置的 SpringApplication 上下文，
  LoggingSystem 会使用上下文中的配置。

  + [[https://www.jianshu.com/p/8b8aa9a51c4e][spring boot 启动源码阅读(二) - 简书]]
  + [[https://www.cnblogs.com/larryzeal/p/5799633.html][Spring Boot 官方文档学习（二）特点 - LarryZeal - 博客园]]
    
  需要注意的是，SpringApplication.run 方法执行时，自动配置已经完成了！

  由于 SpringCloud 会自己创建一个 SpringApplication 上下文，因此，在调试 SpringApplication 初始化过程的时候需要注意，当前栈时属于 SpringCloud 还是属于自己。

  Logback LoggingSystem 初始化时，会解析相关的日志配置文件，并使用 Spring 配置替换日志配置文件中的占位符。

  + [[https://www.cnblogs.com/jianliang-Wu/p/8945343.html][SpringBoot中logback.xml使用application.yml中属性 - 吴建良 - 博客园]]

* uri
  noop - 自定义，表示空操作

* servlet
  + [[http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-19-Spring-boot%E4%B8%8EServlet%E7%BB%84%E4%BB%B6.html][逆水行舟]]
  + [[https://www.cnblogs.com/lodor/p/7568765.html][【spring boot】FilterRegistrationBean介绍 - 码农阿当lodor - 博客园]]
  + [[https://juejin.im/post/5cdcdaf7f265da038f7767d0][@DependsOn或depends-on配置的使用 - 掘金]]

