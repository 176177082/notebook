* 模式
  [[https://blog.tonyseek.com/post/notes-about-ioc-and-di/][控制反转 (IoC) 和依赖注入 (DI)]]

* 自我装配
  + [[https://stackoverflow.com/questions/5152686/self-injection-with-spring][java - Self injection with Spring - Stack Overflow]]

* springcore
  #+BEGIN_SRC plantuml
    ,* 装配
    ,** 装配方式
    ,*** 自动装配
    ,*** JavaConfig
    ,*** XMLConfig
    ,** 高级装配
    ,*** @Profile
    ,*** @Condition
    ,*** @Qualifier
    ,*** @Scope
    ,*** @Value - 运行时值注入
    ,* AOP
    ,** 概念
    ,** Spring 切面
    ,** AspectJ 切面
  #+END_SRC

* 目录结构
  + [[https://www.tutorialspoint.com/spring_boot/spring_boot_code_structure.htm][Spring Boot Code Structure]]

* Servlet 3.0
  + [[https://www.ibm.com/developerworks/cn/java/j-lo-servlet30/index.html][Servlet 3.0 新特性详解]]
  + [[http://www.oracle.com/technetwork/cn/community/4-servlet-3-324302-zhs.pdf][JavaEE 6 Servlet 3.0 中的新特性 - Oracle]]
  + [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types][MIME 类型 - HTTP | MDN]]
  + [[https://www.infoq.cn/article/2013/11/use-asynchronous-servlet-improve][使用异步 Servlet 改进应用性能]]
  + [[https://www.cnblogs.com/davenkin/p/async-servlet.html][Servlet 3.0/3.1 中的异步处理 - 无知者云 - 博客园]]
  + [[https://segmentfault.com/a/1190000012318350][Servlet 3.0 异步处理详解 - 颇忒脱 - SegmentFault 思否]]
  + [[https://elim.iteye.com/blog/2426592][通过ServletContainerInitializer注册Servlet对象 - Elim的博客 - ITeye博客]]

** spring
   + [[https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/SpringServletContainerInitializer.java][spring-framework/SpringServletContainerInitializer.java at master · spring-projects/spring-framework]]
   + [[https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java][spring-framework/DispatcherServlet.java at master · spring-projects/spring-framework]]
   + [[https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/context/ContextLoaderListener.java][spring-framework/ContextLoaderListener.java at master · spring-projects/spring-framework]]

** 流程描述
   应用上下文的创建与配置：
   1. Servlet 容器寻找实现了 ServletContainerInitializer 的对象，Spring 中的是 SpringServletContainerInitializer，
      它会要求容器找到所有 WebApplicationInitializer 并传递给它
   2. SpringServletContainerInitializer 会创建 DispatcherServlet 和 ContextLoaderListener，两者会分别创建一个应用上下文
   3. 我们的 WebApplicationInitializer 实现中，方法 getServletMapping 配置 DispatcherServlet 的路径映射，getRootConfigClasses 提供 ContextLoaderListener 应用上下文的配置，
      getServletConfigClasses 提供 DispatcherServlet 应用上下文的配置
   4. 通常，我们会在 DispatcherServlet 上下文中配置视图解析器，静态资源处理，而 ContextLoaderListener 上下文中配置其他 Bean。

   请求的处理：
   1. 请求首先会到达 DispatcherServlet，然后会查询处理器映射找到与请求对应的控制器
   2. 控制器处理请求，产生需要返回给用户的信息 Model 并返回 *视图名*
   3. 视图解析器根据视图名找到视图
   4. 视图处渲染数据并返回给用户

   控制器：
   1. 使用注解 Controller 声明为控制器
   2. 使用 RequestMapping 声明路径映射
   3. 客户端数据获取：查询参数、表单参数和路径变量
   4. 表单效验可以通过注解实现

   视图解析器：
   1. SpringMVC 定义的视图解析器接口为：
      #+BEGIN_SRC java
        public interface ViewResolver {
          View resolverViewName(String viewName, Locale locale);
        }
      #+END_SRC

      方法 resolverViewName 会返回 View 实例。

   2. View 接口的定义：
      #+BEGIN_SRC java
        public interface View {
          void render(Map<String, ?> model, req, resp);
        }
      #+END_SRC
      
      方法 render 接受模型数据，请求和响应对象，渲染数据输入的响应。

   3. 使用 JSP 时，如果需要使用 JSTL，那么应该使用 JstlView。也就是说默认的视图不会渲染 JSTL 标签？

      没有人权的容器 QAQ

** 更多的配置
   鉴于初始化时或获取所有实现 WebApplicationInitializer 的类，那么我们可以实现这一接口，在这个接口的 onStartup 方法中借助 Servlet 3.0 进行动态配置。

   特别的：
   + AbstractAnnotationConfigDispatcherServletInitializer 的子类可以覆盖 customRegistrantion 进行额外的配置
   + 过滤器的配置可以通过覆盖 getServletFilters 方法完成

** 通过 DD 进行配置
   完全通过 XML 进行配置，需要分别指定 DispatcherServlet 和 ContextLoaderListener 上下文的配置文件。

   但也可以通过指定上下文类的方式指定使用 Java 配置，即：在 DispatcherServlet 和 ContextLoaderListener 的初始化参数中指定上下文为 AnnotationConfigWebApplicationContext，
   并指定配置类。

   估计默认情况下使用的是 XmlWebApplicationContext。

   
* 教程
  + Spring 官方教程
  + Servlet 3.0
  + Java 8
  + Object as Map
  + commons package
  + Junit
  + Maven
  + Gradle
  + [[https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html][Web on Servlet Stack]]

* 编码设置
  + [[https://stackoverflow.com/questions/5928046/spring-mvc-utf-8-encoding][java - Spring MVC UTF-8 Encoding - Stack Overflow]]
  + 通过 jsp-config 设置也行

    
* SpringMVC
  Handler 方法：支持灵活的方法签名，同时支持 java 8 Optional 作为具有 require 属性的注解参数，require 默认为 false。

  参数和返回值：
  + [[https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-arguments][Web on Servlet Stack - Handler Methods - Method Arguments]]
  + [[https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-return-types][Web on Servlet Stack - Handler Methods - Return Values]]

  类型转换：对于部分字符串形式的参数，Spring 支持自动将它们转换为其他类型，比如int、long、Date

  可以通过 @RequestBody 将请求主题转换为对象，还可以和 @Valid 配合使用。

  可以通过 @ResponseBody 将返回对象转为为响应主体。

  DispatcherServlet 上下文是 ContextLoaderListener 的子上下文，它找不到的 Bean 会委托给 ContextLoaderListener 上下文。

* recent
  + [[https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html][Core Technologies]]
  + [[https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html][Testing]]
  + [[https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/data-access.html][Data Access]]
  + [[https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html][Web on Servlet Stack]]

* structure
  + [[https://stackoverflow.com/questions/12397940/spring-and-mvc-proper-project-structure][java - Spring and MVC proper project structure - Stack Overflow]]


* 静态资源和 CLASSPATH
  + [[https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-static-resources][mvc-config-static-resources]]
  + [[https://segmentfault.com/a/1190000015802324][java项目中的classpath到底是什么 - mmmming - SegmentFault 思否]]

  静态页面的映射的配置是需要的吗？


* springcore
  Bean 的属性包括：Class、Name、Scope、构造器参数、属性、自动注入模式、延迟初始化模式、
  初始化方法、销毁方法。

  + [[https://blog.csdn.net/aitangyong/article/details/50629525][spring配置文件中的id和name属性区别，以及identifier和aliases - aty - CSDN博客]]

  自动注入可以获取 Spring 上下文中的对象，比如 ApplicationContext。

  ComponentScan 的 Filter：
  + [[https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-scanning-filters][beans-scanning-filters]]


* myblog
  + [[https://github.com/jwtk/jjwt][jwtk/jjwt: Java JWT: JSON Web Token for Java and Android]]
  + [[https://github.com/auth0/java-jwt][auth0/java-jwt: Java implementation of JSON Web Token (JWT)]]
  + [[http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html][全文搜索引擎 Elasticsearch 入门教程 - 阮一峰的网络日志]]
  + [[https://juejin.im/post/5b00517cf265da0ba0636d4b][Java效率工具之Lombok - 掘金]]
  + [[https://jwt.io/][JSON Web Tokens - jwt.io]]
  + [[https://www.baeldung.com/spring-boot-devtools][Overview of Spring-Boot Dev Tools | Baeldung]]
  + [[https://juejin.im/post/5af02571f265da0b9e64fcfd#heading-39][消息队列之 RocketMQ - 掘金]]

* spring-boot
  + [[https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/documentation-overview.html#boot-documentation][Spring Boot Documentation]]
  + [[https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/index.html][Spring Framework Documentation]]

* token
  + [[https://stackoverflow.com/questions/48171199/generating-one-time-only-security-tokens-from-uuid-or-hmac-jwt-hash][authentication - Generating one-time-only security tokens from UUID or HMAC/JWT/hash? - Stack Overflow]]

* documentation & Test
  + [[http://articles.kevinz.cn/2017/12/19/restdoc/][Spring Cloud构建RESTful API文档 - 星燃处 | Kriz' Blog]]
  + [[https://juejin.im/entry/5b0d7066f265da08cd0e176b][单元测试——工程师 Style 的测试方法 - 后端 - 掘金]]
  + [[https://www.jianshu.com/p/eb31911dbc7b][测试替身Test double - 简书]]
    
* 几大组件注解的区别
  + [[https://stackoverflow.com/questions/6827752/whats-the-difference-between-component-repository-service-annotations-in][java - What's the difference between @Component, @Repository & @Service annotations in Spring? - Stack Overflow]]

* 事务
  + [[https://juejin.im/post/5b00c52ef265da0b95276091][可能是最漂亮的Spring事务管理详解 - 掘金]]

* security
  security 这一块用到的东西有点多，主要有：
  + HTTP 身份验证
    - [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication][HTTP 身份验证 - HTTP | MDN]]
    - [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Authorization][Authorization - HTTP | MDN]]
    - [[http://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml][Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry]]
  + 非 BASIC 验证方式
    - [[https://www.cnblogs.com/XiongMaoMengNan/p/6785155.html][OAuth 2.0: Bearer Token Usage - 熊猫猛男 - 博客园]]
  + Spring security 框架
    - [[https://juejin.im/post/58c29e0b1b69e6006bce02f4][重拾后端之Spring Boot（四）：使用JWT和Spring Security保护REST API - 掘金]]
    - [[https://www.ibm.com/developerworks/cn/web/wa-spring-security-web-application-and-fingerprint-login/index.html][Spring Security 的 Web 应用和指纹登录实践]]
  + 前端的验证
    - [[https://stackoverflow.com/questions/51506579/sending-authorization-token-bearer-through-javascript][jquery - Sending Authorization Token Bearer through Javascript - Stack Overflow]]
    #+BEGIN_SRC js
      fetch(‘https://api.twitter.com/1.1/search/tweets.json', {
            headers: {
              authorization: ‘Bearer your-access-token’
            }
           }).then(response => {
             if (response.status === 401) {
               // try getting the new access token and repeat the same request
             }
             // otherwise carry on
           })
    #+END_SRC
  + Token 的获取与生成：[[https://developer.github.com/v3/oauth_authorizations/][Authorizations | GitHub Developer Guide]]
  + realm [[https://stackoverflow.com/questions/12701085/what-is-the-realm-in-basic-authentication][http - What is the "realm" in basic authentication - Stack Overflow]]
  + 401 响应头中好像没有标准字段给出获取 Token 的位置与方法，好像需要自己设计

