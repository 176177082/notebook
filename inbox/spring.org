* Future
  + [[http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html][全文搜索引擎 Elasticsearch 入门教程 - 阮一峰的网络日志]]
  + [[https://jwt.io/][JSON Web Tokens - jwt.io]]
  + [[https://www.baeldung.com/spring-boot-devtools][Overview of Spring-Boot Dev Tools | Baeldung]]
  + [[https://juejin.im/post/5af02571f265da0b9e64fcfd#heading-39][消息队列之 RocketMQ - 掘金]]
  + [[https://juejin.im/post/5b00c52ef265da0b95276091][可能是最漂亮的 Spring 事务管理详解 - 掘金]]
  + [[https://commons.apache.org/][Apache Commons – Apache Commons]]
  
* security
  security 这一块用到的东西有点多，主要有：
  + HTTP 身份验证
    - [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication][HTTP 身份验证 - HTTP | MDN]]
    - [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Authorization][Authorization - HTTP | MDN]]
    - [[http://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml][Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry]]
  + 非 BASIC 验证方式
    - [[https://www.cnblogs.com/XiongMaoMengNan/p/6785155.html][OAuth 2.0: Bearer Token Usage - 熊猫猛男 - 博客园]]
  + Spring security 框架
    - [[https://juejin.im/post/58c29e0b1b69e6006bce02f4][重拾后端之Spring Boot（四）：使用JWT和Spring Security保护REST API - 掘金]]
    - [[https://www.ibm.com/developerworks/cn/web/wa-spring-security-web-application-and-fingerprint-login/index.html][Spring Security 的 Web 应用和指纹登录实践]]
  + 前端的验证
    - [[https://stackoverflow.com/questions/51506579/sending-authorization-token-bearer-through-javascript][jquery - Sending Authorization Token Bearer through Javascript - Stack Overflow]]
    #+BEGIN_SRC js
      fetch(‘https://api.twitter.com/1.1/search/tweets.json', {
            headers: {
              authorization: ‘Bearer your-access-token’
            }
           }).then(response => {
             if (response.status === 401) {
               // try getting the new access token and repeat the same request
             }
             // otherwise carry on
           })
    #+END_SRC
  + Token 的获取与生成：[[https://developer.github.com/v3/oauth_authorizations/][Authorizations | GitHub Developer Guide]]
  + realm [[https://stackoverflow.com/questions/12701085/what-is-the-realm-in-basic-authentication][http - What is the "realm" in basic authentication - Stack Overflow]]
  + 401 响应头中好像没有标准字段给出获取 Token 的位置与方法，好像需要自己设计

* logger
  + [[https://www.baeldung.com/spring-boot-logging][Logging in Spring Boot | Baeldung]]

* find class
  + [[https://www.jetbrains.com/help/idea/searching-everywhere.html][Search for a target by name - Help | IntelliJ IDEA]]

* 自动配置原理
  + [[http://tengj.top/2017/03/09/springboot3/#%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2SpringApplication%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B][Spring Boot干货系列：（三）启动原理解析 | 嘟嘟独立博客]]
  + [[https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java][spring-framework/SpringFactoriesLoader.java at master · spring-projects/spring-framework]]
  + [[https://www.baeldung.com/spring-boot-custom-auto-configuration][A Custom Auto-Configuration with Spring Boot | Baeldung]]
  + [[https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories][spring-boot/spring.factories at master · spring-projects/spring-boot]]
  + [[https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-using-springbootapplication-annotation.html][18. Using the @SpringBootApplication Annotation]]
  + [[https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-configuration-classes.html][15. Configuration Classes]]

  #+BEGIN_SRC java
    import java.net.URL;
    import java.util.Enumeration;

    public class Test {
      public static void main(String[] args) throws Exception {
        Enumeration<URL> urls = Test.class.getClassLoader().getResources("META-INF/spring.factories");
        while (urls.hasMoreElements()) {
          System.out.println(urls.nextElement());
        }
      }
    }
  #+END_SRC
  
  无参的 ComponentScan 会自动扫描所有子包，似乎会自动加载 Configuration……

  测试：
  + 移动 SpringApplication 类的位置
  + 修改 ComponentScan 的参数


