* 基本概念
  + 名词的中文译名：
    |----------+--------+----------------------------------------|
    | 名词     | 译名   | 解释                                   |
    |----------+--------+----------------------------------------|
    | Internet | 因特网 | 推荐但未得到推广的译名                 |
    |          | 互联网 | 流行最广的译名                         |
    | internet | 互连网 | 泛指多个计算机网络互连而成的计算机网络 |
    |----------+--------+----------------------------------------|

  + 互联网是覆盖全球的，仅在局部范围互连起来的计算机网络只能成为互连网，譬如说 GFW

  + 互联网的基本特点是连通性和共享性，可以快速和网络中的其他用户传递信息，可以方便和其他用户共享资源

  + 计算机网络由若干 *结点* 和连接这些结点的 *链路* 组成，结点可以是计算机、集线器、交换机、路由等

  + 计算机网络之间通过路由器连接起来就形成了互连网，也就是说：结点组成网络、网络组成互连网。
    与网络相连的计算机称为主机。

  + 互联网的标准化工作：互联网草案 -> 建议标准 RFC -> 互联网标准 STD

* 互联网的组成
  互联网的组成可以分为边缘部分和核心部分，边缘部分为连接在互联网上的所有主机，而核心部分是连接这些网络的路由器。
  
  互联网边缘部分的主机又称为端系统，端系统之间的通信方式主要有：客户-服务器（C/S）方式和对等连接（P2P）方式。

  而核心部分的路由器的作用则是 *转发分组*, 是实现 *分组交换* 的关键构建，通过分组交换的方式，可以避免一直占用通信资源，
  提高通信资源的利用率。

  分组交换采用的是 *存储转发* 技术，将要发送的整块数据称为 *报文*, 将报文划分成等长的小数据段，
  每个数据段加上有必要的控制信息组成的 *首部* 后，就构成一个分组。分组又称为 *包*, 包的首部 称为 *包头*.

  分组交换的优点为：高效、灵活、迅速、可靠，但是，路由器存储转发需要排队，这会造成一定的时延。

  因此，当传送时间远大于建立连接的时间是，时延电路交换的传输效率较快。而分组交换便适合传输突发数据。

  路由器必须经常交换彼此掌握的路由信息，以便动态创建和维护路由器中的转发表。

* 网络分类
  + 按照网络的作用范围划分：广域网 WAN、城域网 MAN、局域网 LAN、个人局域网 PAN
  + 按照网络的使用者划分：公用网和专用网，公用网值典型公司出资建造的大型网络，所有愿意按照电信公司的规定缴纳费用的人都可以使用。
    国有的好处就是基建吧。
  + 接入网：用于吧用户接入互联网的网络

* 计算机网络的性能
  性能指标及其含义与计算方式：
  |--------------+------------+------------+------------------------------------------+---------------------|
  | 指标         | 子指标     | 基本单位   | 含义                                     | 计算方式            |
  |--------------+------------+------------+------------------------------------------+---------------------|
  | 速率         |            | bit/s、bps | 单位时间传输的 bit 数                    | 略                  |
  |--------------+------------+------------+------------------------------------------+---------------------|
  | 带宽         |            |            |                                          |                     |
  |              | 频带宽度   | HZ         | 某信号具有的频带宽度                     | 略                  |
  |              | 最高数据率 | bit/s      | 最大速率                                 | 略                  |
  |--------------+------------+------------+------------------------------------------+---------------------|
  | 吞吐量       |            | bit/s      | 实际速率                                 | 略                  |
  |--------------+------------+------------+------------------------------------------+---------------------|
  | 时延         |            |            |                                          |                     |
  |              | 发送时延   | s          | 发送数据需要的时间                       | 数据帧长度/发送速率 |
  |              | 传播时延   | s          | 电磁波在信道中传播一定距离需要花费的时间 | 信道长度/传播速率   |
  |              | 处理时延   | s          | 处理分组数据的时间，GFW 增加的时延       |                     |
  |              | 排队时延   | s          | 分组在路由器中的排队时间                 |                     |
  |--------------+------------+------------+------------------------------------------+---------------------|
  | 时延带宽积   |            | bit        | 以比特为单位的链路长度                   | 传播时延 x 带宽     |
  |--------------+------------+------------+------------------------------------------+---------------------|
  | 往返时间 RTT |            | s          | 数据发送后等待返回数据的时间             |                     |
  |--------------+------------+------------+------------------------------------------+---------------------|
  | 利用率       |            |            |                                          |                     |
  |              | 信道利用率 |            | 信道有百分之几的时间又数据提供           |                     |
  |              | 网络利用率 |            | 全网络信道利用率的加权平均值             |                     |
  |--------------+------------+------------+------------------------------------------+---------------------|

  网络的利用率不是越高越好，另网络空闲时延为 D0， 当前时延为 D， 网络利用率为 U，那么： D = D0/(1 - U)

* 计算机网络体系结构
  三个模型与它们之间的关系：
  + OSI 七层模型，法律上的国际标准，但未得到广泛的使用
  + TCP/IP 四层模型，事实上的国际标准，得到了市场的认可
  + 五层模型，结合 OSI 和 TCP/IP 模型的优点，用于概念解释的模型

  模型层次划分：
  |------------+------------+------------+----------------------|
  | OSI        | TCP/IP     | 五层协议   | 传输数据单元/协议    |
  |------------+------------+------------+----------------------|
  | 应用层     | 应用层     | 应用层     | 报文                 |
  | 表示层     |            |            |                      |
  | 会话层     |            |            |                      |
  |------------+------------+------------+----------------------|
  | 运输层     | 运输层     | 运输层     | TCP/UDP              |
  |------------+------------+------------+----------------------|
  | 网络层     | 网际层 IP  | 网络层     | IP 数据报（分组）/IP |
  |------------+------------+------------+----------------------|
  | 数据链路层 | 网络接口层 | 数据链路层 | 帧                   |
  | 物理层     |            | 物理层     | 比特                 |
  |------------+------------+------------+----------------------|

* 数据链路层
  数据链路层的三个基本问题：封装成帧、透明传输、差错控制

  封装成帧是在得到上一层的数据后添加首部和尾部，构成一个帧，首部和尾部包含必要的控制信息。

  帧的数据部分的最大长度称为 MTU，当传递的数据是 ASCII 字符时，可以使用 SOH 和 EOT 字符作为边界字符。

  但是，如果传输的数据包含了这些特殊字符，为了避免传输出错，需要对这些数据进行处理，达到透明传输：
  无论传输什么数据，都能无差错的传输。

  简单的处理方式是在每个特殊字符前面添加转义字符 ESC，在 ESC 前面也添加 ESC，读取时去掉就可以了。

  差错控制可以通过 CRC 循环效验实现，通过 CRC 算法生成冗余码添加到要传输的数据尾部，形成帧效验序列 FCS。

  通过差错控制只能达到无差错接受，不能达到可靠传输，因为只能保证接受到的数据是正确的，但不能避免丢失、重复、顺序紊乱。

  + 点对点协议 - PPP 帧
  + 以太网-广播信道 - MAC 帧

* CRC 循环效验
  假设需要校验的数据为 M，除数为 P，P 的位数为 N，那么 CRC 效验过程为：
  1. 在数据 M 尾添加 N - 1 个零作为被除数
  2. 被除数模 2 除以 P，得到的 *余数* 添加到 M 的末尾
  3. 接收方将得到的数据模 2 除以除数 P，判断得到的余数是否为 0

  表示除数的方式：
  P(X) = X^3 + X^2 + 1, P = 1101, 最高位对应 X^3，对低位对应 X^0

* 模 2 运算
  模 2 运算的核心就是异或运算：
  |-----------+---------------------------------------|
  | 运算      | 规则                                  |
  |-----------+---------------------------------------|
  | 模 2 加法 | 异或                                  |
  | 模 2 减法 | 异或                                  |
  | 模 2 乘法 | 将每步的中间结果用模 2 加法的方式相加 |
  | 模 2 除法 | 每步使用模 2 减法进行运算             |
  |-----------+---------------------------------------|

