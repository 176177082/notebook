* Optional
  + [[https://lw900925.github.io/java/java8-optional.html][Java 8新特性（三）：Optional类]]

* 反射
  + [[https://www.cnblogs.com/rollenholt/archive/2011/09/02/2163758.html][java 反射详解]]
  + [[https://www.sczyh30.com/posts/Java/java-reflection-1/][深入解析Java反射（1） - 基础]]

* 泛型教程
  + [[https://docs.oracle.com/javase/tutorial/extra/generics/index.html][Lesson: Generics]]

* 网络编程
  + [[https://docs.oracle.com/javase/tutorial/networking/overview/index.html][官方教程]]
  + [[https://www.baeldung.com/java-http-request][Do a Simple HTTP Request in Java]]

* 图片处理
  + [[https://www.cnblogs.com/XL-Liang/archive/2011/12/14/2287566.html][java 图片处理 (文字水印、图片水印、缩放、补白)]]
  + [[https://segmentfault.com/a/1190000011388060][Java图像处理之正片叠底]]


* 枚举类型
  枚举类型的声明可以在 *类外部* 或 *类内部*, 但是不能再 *方法内部*.

  枚举类型的简单声明和使用：
  #+BEGIN_SRC java
    public enum Members {JOB, ALICE, PHIL}

    Members member = Members.ALICE;  // default is null
  #+END_SRC

  枚举类型自动继承 ~java.lang.Enum~, 即： 所有枚举类型都是 ~Enum~ 的子类。

  不同枚举变量之间的比较可以用 ~==~ 或 ~equals~, 但 ~==~ 是一个更好的方式。

  枚举类型中定义的的每个值都是该枚举类型的 *实例*, 可以为这些实例定义属性和方法。

  #+BEGIN_SRC java
    public enum Names {
      JERRY("lead guitar") {
        public String sings() {
          return "JERRY";
        }
      },

      BOBBY("bass");

      private String instrument;

      Names(String instrument) {
        this.instrument = instrument;
      }

      public String getInstrument() {
        return this.instrument;
      }

      public String sings() {
        return "Default";
      }
    }
  #+END_SRC
    
  ~BOBBY("bass")~ 调用构造函数 ~Names~.

  如下代码定义之自己的 ~sings~ 方法。
  #+BEGIN_SRC java
    JERRY("lead guitar") {
      public String sings() {
        return "JERRY";
      }
    }
  #+END_SRC

  #+BEGIN_SRC java
    for (Names name : Names.value()) {  // Enum.value()
      System.out.println(name.sing());
    }
  #+END_SRC

