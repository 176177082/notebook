* Future
** 图形处理
  + [[https://www.cnblogs.com/XL-Liang/archive/2011/12/14/2287566.html][Java 图片处理 (文字水印、图片水印、缩放、补白)]]
  + [[https://segmentfault.com/a/1190000011388060][Java图像处理之正片叠底]]

** 函数式编程
   + [[https://www.ibm.com/developerworks/cn/java/j-understanding-functional-programming-4/index.html][深入理解 Java 函数式编程，第 4 部分: 使用 Vavr 进行函数式编程]]
   + [[https://www.vavr.io/vavr-docs/][Vavr User Guide]]
   + [[https://www.baeldung.com/java-currying][Currying in Java | Baeldung]]

** 异步
   + [[https://juejin.im/post/5adbf8226fb9a07aac240a67][Java 8 CompletableFuture 教程 - 掘金]]
   + [[https://juejin.im/post/5b4622df5188251ac9766f47#heading-7][异步技巧之CompletableFuture - 掘金]]

** Agent
   本来是想看一下调试中断点是怎么一回事，结果，和 Java Agent 扯上了。

   Java Agent 是一种依附于 JVM 进程的程序，可以通过这种方式来监听控制 JVM 进程。

   加载 Java Agent 的方式主要有两种：
   1. 通过命令行参数指定要加载的 Java Agent 程序，主要的选项为：
      |------------------------------+------------------------------|
      | 选项                         | 作用                         |
      |------------------------------+------------------------------|
      | javaagent:jarpath[=options]  | 加载指定的 jar               |
      | agentlib:libname[=options]   | 加载 PATH 环境变量下的动态库 |
      | agentpath:pathname[=options] | 通过完全路径加载动态库       |
      |------------------------------+------------------------------|

      参考：
      + [[http://www.voidcn.com/article/p-ptghvuzj-bbz.html][6.1 java 选项 -javaagent、-agentlib、-agentpath - 程序园]]
      + 

   2. 通过 Sun 公司提供的 VirtualMachine 接口动态加载 Agent，参考：
      + [[https://www.cnblogs.com/LittleHann/p/4783581.html][Java Attach API - 郑瀚 Andrew.Hann - 博客园]]
      + [[https://docs.oracle.com/javase/8/docs/jdk/api/attach/spec/com/sun/tools/attach/VirtualMachine.html][VirtualMachine (Attach API )]]
     
   其中，Java Agent 程序的编写利用了 java.lang.instrument 包下提供的接口，参考：
   + [[https://www.cnkirito.moe/instrument/][JAVA 拾遗--Instrument 机制 | 徐靖峰|个人博客]]
   + [[https://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html][Java SE 6 新特性: Instrumentation 新功能]]

   至于调试：[[https://www.ibm.com/developerworks/cn/java/j-lo-jpda3/index.html][深入 Java 调试体系，第 3 部分: JDWP 协议及实现]]

** 注解
   + [[https://www.race604.com/annotation-processing/][Java 注解处理器]]
   + [[https://github.com/zhuhean/BuilderProcessor][zhuhean/BuilderProcessor: Android注解处理演示项目]]
   + [[https://github.com/square/javapoet][square/javapoet: A Java API for generating .java source files.]]
   + [[https://www.jetbrains.com/help/idea/configuring-annotation-processing.html#create_profile][Configuring Annotation Processing - Help | IntelliJ IDEA]]

** JNI
   + [[https://blog.csdn.net/hackooo/article/details/48395765][Java JNI实现原理初探_最帅惋红曲-CSDN博客]]

** 动态语言
   + [[https://www.infoq.cn/article/jdk-dynamically-typed-language][解析 JDK 7 的动态类型语言支持-InfoQ]]

** ConcurrentHashMap
   + [[https://www.cnblogs.com/study-everyday/p/6430462.html][ConcurrentHashMap原理分析（1.7与1.8） - 明志健致远 - 博客园]]
   + [[https://juejin.im/post/5ca89afa5188257e1d4576ff#heading-3][解读Java8中ConcurrentHashMap是如何保证线程安全的 - 掘金]]
   + [[https://www.ibm.com/developerworks/cn/java/java-lo-concurrenthashmap/index.html][探索 ConcurrentHashMap 高并发性的实现机制]]
   + [[https://www.cnblogs.com/aspirant/p/8623864.html][ConcurrentHashMap原理分析（1.7与1.8）]]

* NIO
  + [[https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html][NIO 入门]]

* Fork/Join
  + [[https://www.ibm.com/developerworks/cn/java/j-lo-forkjoin/index.html][JDK 7 中的 Fork/Join 模式]]
  + [[https://www.baeldung.com/java-fork-join][Guide to the Fork/Join Framework in Java | Baeldung]]

* 网络请求
  + [[https://github.com/akullpp/awesome-java#http-clients][akullpp/awesome-java: A curated list of awesome frameworks, libraries and software for the Java programming language.]]
  + [[https://liudanking.com/sitelog/java-http-client-lib-comparison/][Java HTTP 组件库选型看这篇就够了 | 行思錄 | Travel Coder]]
  + [[https://juejin.im/post/5d6a0612f265da03b46c04c5][跨平台调用 Retrofit - 掘金]]

* 并发
  + [[https://www.jianshu.com/p/155260c8af6c][ReentrantLock的使用 - 简书]]
  + [[https://juejin.im/post/5c33400c6fb9a049fe35503b][彻底弄懂 Java 线程池原理 - 掘金]]
  + [[https://segmentfault.com/a/1190000008471362][浅谈Java并发编程系列（九）—— AQS结构及原理分析 - codershamo - SegmentFault 思否]]
  + [[https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html][ThreadPoolExecutor (Java Platform SE 8 )]]

* 语法
  + [[https://www.jianshu.com/p/7954b61bc6ee][java 中 break continue label的使用 - 简书]]

