* string
  + [[https://docs.python.org/3.4/library/string.html#template-strings][Template strings]]
  + [[https://docs.python.org/3/library/string.html][string — Common string operations]]
    
* 元编程
  + [[http://www.dabeaz.com/py3meta/index.html][Python 3 Metaprogramming]]

* ast
  + [[https://eli.thegreenplace.net/2009/11/28/python-internals-working-with-python-asts/][Python internals: Working with Python ASTs]]
  + [[http://video.tudou.com/v/XMjEzODYwNzA0OA==.html?__fr=oldtd][PyCon 2011: What would you do with an ast?]]
  + [[https://www.rddoc.com/doc/Python/3.6.0/zh/library/ast/][ast — 抽象语法树]]
  + [[https://stackoverflow.com/questions/1515357/simple-example-of-how-to-use-ast-nodevisitor][Simple example of how to use ast.NodeVisitor?]]
  + [[https://stackoverflow.com/questions/4922520/determining-if-a-given-python-module-is-a-built-in-module][Determining if a given Python module is a built-in module - Stack Overflow]]
  + [[https://docs.python.org/3/library/importlib.html#importlib.machinery.ModuleSpec][importlib — The implementation of import — Python 3.7.1 documentation]]

* gevent
  + [[http://www.gevent.org/index.html][What is gevent?]]

* statistics
  + [[https://docs.python.org/3/library/statistics.html][statistics — Mathematical statistics functions — Python 3.7.1 documentation]]

* 性能统计
  + [[https://www.v2ex.com/t/524217#reply11][Python 功能点实现：函数级/代码块级计时器 - V2EX]]
  + [[https://www.jianshu.com/p/c890d5258ac9][Python功能点实现：函数级/代码块级计时器 - 简书]]
  + [[https://www.v2ex.com/t/524241#reply0][Python 性能分析 - V2EX]]
  + [[https://stackoverflow.com/questions/15707056/get-time-of-execution-of-a-block-of-code-in-python-2-7][Get time of execution of a block of code in Python 2.7 - Stack Overflow]]

* Jupyter 和 Ipython 的关系
  Jupyter notebook 是从 Ipython 分离出来的项目，在 Github 上可以直接渲染 .ipynb 后缀名的文件。 

  + [[https://zh.wikipedia.org/wiki/Jupyter%E9%A1%B9%E7%9B%AE][Jupyter项目 - 维基百科，自由的百科全书]]

* 事件驱动程序
  + [[https://github.com/rgb-24bit/python3-cookbook/blob/master/source/c11/p12_understanding_event_driven_io.rst][python3-cookbook/p12_understanding_event_driven_io.rst at master · rgb-24bit/python3-cookbook]]

* 配置
  + [[https://hackernoon.com/4-ways-to-manage-the-configuration-in-python-4623049e841b][4 Ways to manage the configuration in Python – Hacker Noon]]

* Flask
  对于以/结尾的 route, 在浏览器中访问 url 时若不以/结尾, 会被 flask 重定向到与以/结尾的 endpoint 上

  对于不以/结尾的 route, 在浏览器中访问 url 时若以/结尾, 则会返回 404 错误

  和 Tomcat 的处理方式存在区别

* 特殊属性
  + [[https://segmentfault.com/a/1190000005701971][Python 实例方法的特殊属性]]
  + [[https://segmentfault.com/a/1190000005685090][Python 自定义函数的特殊属性]]

* 随机生成和为 100 的序列
  #+BEGIN_SRC python
    def random_nums():
        nums = [random.randint(0, 101) for i in range(9)]
        nums.extend([0, 100])
        nums.sort()

        result = []
        for i in range(1, 11):
            result.append(nums[i] - nums[i - 1])

        return result
  #+END_SRC

  频率统计：
  #+BEGIN_SRC python
    counter = defaultdict(int)

    for i in range(1000):
        for num in random_nums():
            counter[num] += 1

    total = sum(counter.keys())
    for i in range(101):
        print('%d: %f' % (i, counter[i] / total))

    print(random_nums())
  #+END_SRC

* 其他
  #+BEGIN_SRC python
    class Condition(object):
        def __init__(self, obj=None, predicate=None):
            if obj is not None:
                if callable(predicate):
                    self.o = obj
                    self.p = predicate
                else:
                    self.o = obj
                    self.p = lambda x: x
            else:
                self.o = True
                self.p = lambda x: x
            self.t = True

        def __bool__(self):
            return self.t and self.p(self.o)

    class RangeValue(object):
        def __init__(self):
            self.t = True
            self.v = None


    def prange(iterable):
        value = RangeValue()
        for v in iterable:
            value.v = v
            yield value
            if not value.t:
                break


    for i in prange(100):
        for j in prange(100):
            for k in prange(100):
                print(1)
                i.t = j.t = k.t = False
  #+END_SRC

* mmap
  + [[https://www.cnblogs.com/zhoujinyi/p/6062907.html][Python之mmap内存映射模块（大文本处理）说明 - jyzhou - 博客园]]

* math
  + [[https://stackoverflow.com/questions/18646477/why-is-sin180-not-zero-when-using-python-and-numpy][Why is sin(180) not zero when using python and numpy? - Stack Overflow]]

* profile
  + [[https://docs.python.org/3.7/library/profile.html][The Python Profilers — Python 3.7.3 documentation]]
