#+TITLE:      JavaScript 基础笔记

* 目录                                                    :TOC_4_gh:noexport:
- [[#javascript-指南][JavaScript 指南]]
- [[#bom---browser-object-model][BOM - Browser Object Model]]
  - [[#window][Window]]
  - [[#window-screen][Window Screen]]
  - [[#window-location][Window Location]]
  - [[#window-history][Window History]]
  - [[#window-popupalert][Window PopupAlert]]
  - [[#window-timing][Window Timing]]
  - [[#window-cookies][Window Cookies]]
- [[#html-dom][HTML DOM]]
  - [[#dom-节点][DOM 节点]]
  - [[#dom-方法][DOM 方法]]
  - [[#dom-属性][DOM 属性]]
  - [[#dom-访问][DOM 访问]]
  - [[#dom-修改][DOM 修改]]

* JavaScript 指南
  + [[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide][JavaScript 指南]]

* BOM - Browser Object Model
** Window
   所有 ~JavaScript~ 全局对象， 函数以及变量均自动成为 ~window~ 对象的成员。

   + 全局变量是 ~window~ 对象的属性, 包括 ~HTML DOM~ 的 ~document~ 对象
   + 全局函数是 ~window~ 对象的方法
 
   *Window 尺寸:*
   + ~window.innerHeight~ - 浏览器窗口的内部高度
   + ~window.innerWidth~ - 浏览器窗口的内部宽度

   *PS:* 不兼容 ~Internet Explorer 5, 6, 7, 8~.
     
   *兼容方案:*
   #+BEGIN_SRC javascript
     var w = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;

     var h = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
   #+END_SRC

   *一些方法:*
   + ~window.open()~ - 打开新窗口
   + ~window.close()~ - 关闭当前窗口
   + ~window.moveTo()~ - 移动当前窗口
   + ~window.resizeTo()~ - 调整当前窗口的尺寸
   
** Window Screen
   ~window.screen~ 对象包含有关用户屏幕的信息， 编写时可以不使用 ~window~ 这个前缀。

   *一些属性*:
   + ~screen.availWidth~ - 可用的屏幕宽度
   + ~screen.availHeight~ - 可用的屏幕高度

** Window Location
   ~window.location~ 对象用于获得当前页面的地址 (URL)， 并把浏览器重定向到新的页面。
   编写时可不使用 ~window~ 这个前缀。

   *一些属性*:
   + ~location.hostname~ 返回 web 主机的域名
   + ~location.pathname~ 返回当前页面的路径和文件名
   + ~location.port~ 返回 web 主机的端口 （80 或 443）
   + ~location.protocol~ 返回所使用的 web 协议（http:// 或 https://）

   *一些方法*:
   + ~location.assign()~ 方法加载新的文档

** Window History
   ~window.history~ 对象包含浏览器的历史。 编写时可不使用 ~window~ 这个前缀。

   *一些方法*:
   + ~history.back()~ - 与在浏览器点击后退按钮相同
   + ~history.forward()~ - 与在浏览器中点击按钮向前相同

** Window PopupAlert
   + [[http://www.w3school.com.cn/js/js_popup.asp][JavaScript 消息框]]

   #+BEGIN_SRC javascript
     alert("文本");  // 警告框

     confirm("文本");  // 确认框

     prompt("文本","默认值");  // 提示框
   #+END_SRC

** Window Timing
   #+BEGIN_SRC javascript
     var t = setTimeout("JavaScript 语句", 毫秒)

     clearTimeout();  // 取消 setTimeout()
   #+END_SRC

** Window Cookies
   + [[http://www.w3school.com.cn/js/js_cookies.asp][JavaScript Cookies]]

   ~Window.document.cookie~.

* HTML DOM
  *HTML DOM 树*

  [[http://www.w3school.com.cn/i/ct_htmltree.gif]]

** DOM 节点
   + 整个文档是一个文档节点
   + 每个 HTML 元素是元素节点
   + HTML 元素内的文本是文本节点
   + 每个 HTML 属性是属性节点
   + 注释是注释节点

   通过 HTML DOM，树中的所有节点均可通过 JavaScript 进行访问。
   所有 HTML 元素（节点）均可被修改，也可以创建或删除节点。

   *节点父、子和同胞*

   + 在节点树中，顶端节点被称为根（root）
   + 每个节点都有父节点、除了根（它没有父节点）
   + 一个节点可拥有任意数量的子
   + 同胞是拥有相同父节点的节点

   [[http://www.w3school.com.cn/i/dom_navigate.gif]]

** DOM 方法
   + [[http://www.w3school.com.cn/htmldom/dom_methods.asp][HTML DOM 方法]]

** DOM 属性
   + ~innerHTML~ 属性: 获取或替换元素内容
   + ~nodeName~ 属性: 规定节点的名称
     - nodeName 是只读的
     - 元素节点的 nodeName 与标签名相同
     - 属性节点的 nodeName 与属性名相同
     - 文本节点的 nodeName 始终是 #text
     - 文档节点的 nodeName 始终是 #document
   + ~nodeValue~ 属性: 规定节点的值
     - 元素节点的 nodeValue 是 undefined 或 null
     - 文本节点的 nodeValue 是文本本身
     - 属性节点的 nodeValue 是属性值
   + ~nodeType~ 属性: 返回节点的类型
     |----------+----------|
     | 元素类型 | NodeType |
     |----------+----------|
     | 元素     |        1 |
     | 属性     |        2 |
     | 文本     |        3 |
     | 注释     |        8 |
     | 文档     |        9 |
     |----------+----------|

** DOM 访问
   + [[http://www.w3school.com.cn/htmldom/dom_using.asp][HTML DOM 访问]]

** DOM 修改
   + [[http://www.w3school.com.cn/htmldom/dom_modify.asp][HTML DOM - 修改]]
