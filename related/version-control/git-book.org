#+SETUPFILE:  ../_style/style.setup
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:nil -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+TITLE:      Git-Book 阅读笔记
#+AUTHOR:     rgb_24bit

* 目录                                                    :TOC_4_gh:noexport:
- [[#起步][起步]]
  - [[#git-基础][Git 基础]]
  - [[#初次运行-git-前的配置][初次运行 Git 前的配置]]
  - [[#获取帮助][获取帮助]]
- [[#git-基础-1][Git 基础]]
  - [[#简单的命令][简单的命令]]
  - [[#忽略文件][忽略文件]]

* 起步
** Git 基础
   + 已提交 -- ~committed~ -- 数据已经安全的保存在本地数据库中
   + 已修改 -- ~modified~ -- 修改了文件， 但还没保存到数据库中
   + 已暂存 -- ~staged~ -- 对一个已修改文件的当前版本做了标记， 使之包含在下次提交的快照中

   对应三个工作区域： Git 仓库， 工作目录， 暂存区域

   基本的 Git 工作流程：
   1. 在工作目录中修改文件
   2. 暂存文件， 将文件的快照放入暂存区域
   3. 提交更新， 找到暂存区域的文件， 将快照永久性存储到 Git 仓库目录

** 初次运行 Git 前的配置
   配置文件位置：
   1. ~etc/gitconfig~ 文件： 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 ~--system~ 选项的 ~git config~ 时，它会从此文件读写配置变量。
   2. ~~/.gitconfig~ 或 ~~/.config/git/config~ 文件：只针对当前用户。 可以传递 ~--global~ 选项让 Git 读写此文件。
   3. 当前使用仓库的 Git 目录中的 ~config~ 文件（就是 ~.git/config~ ）：针对该仓库。

   每一个级别覆盖上一级别的配置。

   ~Windows~: ~$HOME~ -- 一般是 ~C:\Users\$USER~

   用户信息：
   #+BEGIN_SRC bash
     $ git config --global user.name "John Doe"
     $ git config --global user.email johndoe@example.com
   #+END_SRC

   文本编辑器：
   #+BEGIN_SRC bash
     $ git config --global core.editor vim
   #+END_SRC

   检查配置信息：
   #+BEGIN_SRC bash
     $ git config --list
     $ git config <key>
   #+END_SRC

** 获取帮助
   获取帮助的三种方法：
   #+BEGIN_SRC bash
     $ git help <verb>
     $ git <verb> --help
     $ man git-<verb>
   #+END_SRC

* Git 基础
** 简单的命令
   #+BEGIN_SRC bash
     # 初始化仓库
     $ git init

     # 文件跟踪 - add 和 提交 - commit
     $ git add *.c
     $ git add LICENSE
     $ git commit -m 'initial project version'

     # 克隆仓库
     $ git clone [url]

     # 检查当前文件状态
     $ git status

     # 状态概览
     $ git status -s
     $ git status --short

     # 查看尚未暂存的文件更新了哪些部分
     $ git diff

     # 查看已暂存的将要添加到下次提交里的内容
     $ git diff --cached
     $ git diff --staged

     # 启动文本编辑器输入本次提交的说明
     $ git commit

     # 跳过 add
     $ git commit -a

     # 移除文件
     $ git rm

     # 强制删除
     $ git rm -f

     # 从暂存区删除
     $ git rm --cached

     # 移动文件或重命名
     $ git mv
   #+END_SRC

** 忽略文件
   文件 ~.gitignore~ 的格式规范如下：
   + 所有空行或者以 ~#~ 开头的行都会被 Git 忽略
   + 可以使用标准的 glob 模式匹配
   + 匹配模式可以以 ~/~ 开头防止递归
   + 匹配模式可以以 ~/~ 结尾指定目录
   + 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号 ~!~ 取反

   glob 模式：
   + ~*~ 匹配任意多字符
   + ~[abc]~ 匹配任何 *一个* 列在方括号中的字符
   + ~?~ 匹配 *一个* 任意字符
   + ~[0-9]~ 匹配 ~0-9~ 任意一个字符
   + ~**~ 匹配任意中间目录， 如 ~a/**/z~ 可以匹配 ~a/z~, ~a/b/z~ 或 ~a/b/c/z~ 等
