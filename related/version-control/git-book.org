#+SETUPFILE:  ../_style/style.setup
#+TITLE:      Git-Book 阅读笔记
#+AUTHOR:     rgb_24bit

* 目录                                                    :TOC_4_gh:noexport:
- [[#起步][起步]]
  - [[#git-基础][Git 基础]]
  - [[#git-配置][Git 配置]]
- [[#git-基础-1][Git 基础]]
  - [[#获取-git-仓库][获取 Git 仓库]]
  - [[#记录每次更新到仓库][记录每次更新到仓库]]

* 起步
** Git 基础
   + 已提交 -- ~committed~ -- 数据已经安全的保存在本地数据库中
   + 已修改 -- ~modified~ -- 修改了文件， 但还没保存到数据库中
   + 已暂存 -- ~staged~ -- 对一个已修改文件的当前版本做了标记， 使之包含在下次提交的快照中

   对应三个工作区域： Git 仓库， 工作目录， 暂存区域

   基本的 Git 工作流程：
   1. 在工作目录中修改文件
   2. 暂存文件， 将文件的快照放入暂存区域
   3. 提交更新， 找到暂存区域的文件， 将快照永久性存储到 Git 仓库目录

** Git 配置
   配置文件位置：
   1. ~etc/gitconfig~ 文件： 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 ~--system~ 选项的 ~git config~ 时，它会从此文件读写配置变量。
   2. ~~/.gitconfig~ 或 ~~/.config/git/config~ 文件：只针对当前用户。 可以传递 ~--global~ 选项让 Git 读写此文件。
   3. 当前使用仓库的 Git 目录中的 ~config~ 文件（就是 ~.git/config~ ）：针对该仓库。

   每一个级别覆盖上一级别的配置。

   ~Windows~: ~$HOME~ -- 一般是 ~C:\Users\$USER~

   用户信息：
   #+BEGIN_SRC bash
     $ git config --global user.name "John Doe"
     $ git config --global user.email johndoe@example.com
   #+END_SRC

   文本编辑器：
   #+BEGIN_SRC bash
     $ git config --global core.editor vim
   #+END_SRC

   检查配置信息：
   #+BEGIN_SRC bash
     $ git config --list
     $ git config <key>
   #+END_SRC

* Git 基础
** 获取 Git 仓库
   #+BEGIN_SRC bash
     # 在现有项目或目录下导入所有文件到 Git 中
     $ git init

     # 从一个服务器克隆一个现有的 Git 仓库
     $ git clone [url]
   #+END_SRC

** 记录每次更新到仓库
   + 检查当前文件状态 :: 使用 ~git status~ 命令
   + 跟踪新文件/暂存已修改文件 :: 使用命令 ~git add~ 开始跟踪/暂存一个文件
   + 忽略文件 :: 使用名为 ~.gitignore~ 的文件，列出要忽略的文件模式

             文件 ~.gitignore~ 的格式规范如下：
     + 所有空行或者以 ~#~ 开头的行都会被 Git 忽略
     + 可以使用标准的 [[https://en.wikipedia.org/wiki/Glob_(programming)][glob]] 模式匹配
     + 匹配模式可以以 ~/~ 开头防止递归
     + 匹配模式可以以 ~/~ 结尾指定目录
     + 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号 ~!~ 取反
   + 查看已暂存和未暂存的修改 :: 要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 ~git diff~,
                     若要查看已暂存的将要添加到下次提交里的内容，可以用 ~git diff --cached~ 命令（
                     Git 1.6.1 及更高版本还允许使用 ~git diff --staged~, 效果是相同的）
   + 提交更新 :: 启动文本编辑器并输入本次提交的说明 ~git commit~, ~-v~ 选项可以将所做的改变的 ~diff~ 输出放到编辑器中
             从而知道本次提交具体做了哪些修改。可以在 ~commit~ 命令后添加 ~-m~ 选项，将提交信息与命令放在同一行
