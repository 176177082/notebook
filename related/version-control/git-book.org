#+SETUPFILE:  ../_style/style.setup
#+TITLE:      Git-Book 阅读笔记
#+AUTHOR:     rgb_24bit

* 目录                                                    :TOC_4_gh:noexport:
- [[#起步][起步]]
  - [[#git-基础][Git 基础]]
  - [[#git-配置][Git 配置]]
- [[#git-基础-1][Git 基础]]
  - [[#获取-git-仓库][获取 Git 仓库]]
  - [[#记录每次更新到仓库][记录每次更新到仓库]]
  - [[#查看提交历史][查看提交历史]]
  - [[#撤销操作][撤销操作]]
  - [[#远程仓库的使用][远程仓库的使用]]
  - [[#打标签][打标签]]
  - [[#git-别名][Git 别名]]
- [[#git-分支][Git 分支]]
  - [[#分支简介][分支简介]]
  - [[#分支的新建与合并][分支的新建与合并]]
  - [[#分支管理][分支管理]]
  - [[#远程分支][远程分支]]
  - [[#变基][变基]]

* 起步
** Git 基础
   + 已提交 -- ~committed~ -- 数据已经安全的保存在本地数据库中
   + 已修改 -- ~modified~ -- 修改了文件， 但还没保存到数据库中
   + 已暂存 -- ~staged~ -- 对一个已修改文件的当前版本做了标记， 使之包含在下次提交的快照中

   对应三个工作区域： Git 仓库， 工作目录， 暂存区域

   基本的 Git 工作流程：
   1. 在工作目录中修改文件
   2. 暂存文件， 将文件的快照放入暂存区域
   3. 提交更新， 找到暂存区域的文件， 将快照永久性存储到 Git 仓库目录

** Git 配置
   配置文件位置：
   1. ~etc/gitconfig~ 文件： 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 ~--system~ 选项的 ~git config~ 时，它会从此文件读写配置变量。
   2. ~~/.gitconfig~ 或 ~~/.config/git/config~ 文件：只针对当前用户。 可以传递 ~--global~ 选项让 Git 读写此文件。
   3. 当前使用仓库的 Git 目录中的 ~config~ 文件（就是 ~.git/config~ ）：针对该仓库。

   每一个级别覆盖上一级别的配置。

   ~Windows~: ~$HOME~ -- 一般是 ~C:\Users\$USER~

   用户信息：
   #+BEGIN_SRC bash
     $ git config --global user.name "John Doe"
     $ git config --global user.email johndoe@example.com
   #+END_SRC

   文本编辑器：
   #+BEGIN_SRC bash
     $ git config --global core.editor vim
   #+END_SRC

   检查配置信息：
   #+BEGIN_SRC bash
     $ git config --list
     $ git config <key>
   #+END_SRC

* Git 基础
** 获取 Git 仓库
   #+BEGIN_SRC bash
     # 在现有项目或目录下导入所有文件到 Git 中
     $ git init

     # 从一个服务器克隆一个现有的 Git 仓库
     $ git clone [url]
   #+END_SRC

** 记录每次更新到仓库
   + 检查当前文件状态 :: 使用 ~git status~ 命令
   + 跟踪新文件/暂存已修改文件 :: 使用命令 ~git add~ 开始跟踪/暂存一个文件
   + 忽略文件 :: 使用名为 ~.gitignore~ 的文件，列出要忽略的文件模式

             文件 ~.gitignore~ 的格式规范如下：
     + 所有空行或者以 ~#~ 开头的行都会被 Git 忽略
     + 可以使用标准的 [[https://en.wikipedia.org/wiki/Glob_(programming)][glob]] 模式匹配
     + 匹配模式可以以 ~/~ 开头防止递归
     + 匹配模式可以以 ~/~ 结尾指定目录
     + 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号 ~!~ 取反
   + 查看已暂存和未暂存的修改 :: 要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 ~git diff~,
                     若要查看已暂存的将要添加到下次提交里的内容，可以用 ~git diff --cached~ 命令（
                     Git 1.6.1 及更高版本还允许使用 ~git diff --staged~, 效果是相同的）
   + 提交更新 :: 启动文本编辑器并输入本次提交的说明 ~git commit~, ~-v~ 选项可以将所做的改变的 ~diff~ 输出放到编辑器中
             从而知道本次提交具体做了哪些修改。可以在 ~commit~ 命令后添加 ~-m~ 选项，将提交信息与命令放在同一行
   + 移除文件 :: ~git rm~ 可以完成这一工作。 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 ~-f~.
             把文件从 ~Git~ 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中， 使用 ~--cached~ 选项。
   + 移动文件 :: 使用 ~git mv~

** 查看提交历史
   #+BEGIN_SRC bash
     $ git config --global alias.lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
   #+END_SRC

** 撤销操作
   运行带有 ~--amend~ 选项的提交命令尝试重新提交:
   : $ git commit --amend

   例如，提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：
   #+BEGIN_SRC bash
     $ git commit -m 'initial commit'
     $ git add forgotten_file
     $ git commit --amend
   #+END_SRC

   最终只会有一个提交 - 第二次提交将代替第一次提交的结果。

   + 取消暂存的文件 :: 使用 ~git reset HEAD <file>...~ 来取消暂存
   + 撤消对文件的修改 :: 使用 ~git checkout -- [file]~ 来撤销对文件的修改， 但是
                 对那个文件做的任何修改都会消失。

** 远程仓库的使用
   - 查看远程仓库 :: ~git remote~ 列出你指定的每一个远程服务器的简写，
               ~git remote -v~ 显示需要读写远程仓库使用的 ~Git~ 保存的简写与其对应的 ~URL~
   - 添加远程仓库 :: 运行 ~git remote add <shortname> <url>~ 添加一个新的远程 ~Git~ 仓库，同时指定一个可以轻松引用的简写。
   - 从远程仓库中抓取与拉取 :: 执行 ~git fetch [remote-name]~ 访问远程仓库，从中拉取所有还没有的数据。
                    如果使用 ~clone~ 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 ~origin~ 为简写。
                    如果一个分支设置为跟踪一个远程分支，可以使用 ~git pull~ 命令来自动的抓取然后合并远程分支到当前分支。
   - 推送到远程仓库 :: 简单直接： ~git push [remote-name]~
   - 查看远程仓库 :: 看某一个远程仓库的更多信息，可以使用 ~git remote show [remote-name]~ 命令
   - 远程仓库的移除与重命名 :: 运行 ~git remote rename~ 修改一个远程仓库的简写名， 使用 ~git remote rm~ 移除一个远程仓库。

** 打标签
   *PS:* ~Github~ 可以根据 ~tag~ 自动生成 ~release~.

   + 列出标签 :: 列出所有标签使用 ~git tag~, 使用通配符： git tag -l "*"
   + 创建标签 :: 附注标签 git tag -a version -m "comment", ~git show~ 命令可以看到标签信息与对应的提交信息。
             轻量标签 ~git tag version~.
   + 后期打标签 :: 可以对过去的提交打标签， ~git tag -a version 9fceb02~.
   + 共享标签 :: 运行 ~git push origin [tagname]~, 带有 ~--tags~ 选项的 ~git push~ 命令
             会把所有不在远程仓库服务器上的标签全部传送到那里。
   + 检出标签 :: 使用 ~git checkout -b [branchname] [tagname]~ 在特定的标签上创建一个新分支。

** Git 别名 
   看一下例子就清楚了：
   #+BEGIN_SRC bash
     $ git config --global alias.co checkout
     $ git config --global alias.br branch
     $ git config --global alias.ci commit
     $ git config --global alias.st status
   #+END_SRC

* Git 分支
** 分支简介
   + 提交对象 :: 一个提交对象可以代表仓库在提交时的完整状态， 同时一个提交对象会包含一个指向前一个
             提交对象的指针（即父对象）。 最初的提交对象没有父对象。

   + 分支 :: 指向一个提交对象的指针。

   + 当前分支 :: ~HEAD~ 指针指向的分支。

   + 创建分支 :: 创建一个指向提交对象的指针。

   + 切换分支 :: 移动 ~HEAD~ 指针指向要切换的分支。
   
   理解： 一连串的提交会形成一个由 *提交对象* 构成的链表。 当前分支指向这个链表的某个节点上。
   而 ~HEAD~ 指针指向当前分支。

   创建一个分支时， 创建一个新的指针指向一个提交对象， 切换分支时将 ~HEAD~ 指针指向该指针。

   当在分支上进行新的提交的时， 这个链表出现分叉。

   [[https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B][Git 分支 - 分支简介]]

** 分支的新建与合并
   #+BEGIN_SRC bash
     # 新建分支
     $ git branch <name>

     # 切换分支
     $ git checkout <name>

     # 新建并切换
     $ git checkout -b <name>

     # 合并分支
     $ git merge <name>

     # 删除分支
     $ git branch -d <name>
   #+END_SRC

   [[https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6][Git 分支 - 分支的新建与合并]]
** 分支管理
   + 获取当前分支列表 :: 不加任何参数运行 ~git branch~ 命令
   + 检查每一个分支最后的提交 :: 运行 ~git branch -v~ 命令
   + 过滤列表中已经合并或尚未合并到当前分支的分支 :: 选项 ~--merged~ 和 ~--no-merged~

** 远程分支
   ~origin/master~ 和 ~master~ 不一定是指向同一个 *提交对象*. 当远程分支更新后， 需要通过 ~git fetch~ 命令
   将更新拉取到本地。 这时 ~origin/master~ 和 ~master~ 指向的提交对象会出现区别甚至分叉。 这时需要运行
   ~git merge~ 指令同步更新。

   ~git pull~ 指令可以自动完成 ~git fetch~ 和 ~git merge~ 指令。

   + 跟踪分支 :: 如果在一个跟踪分支上输入 ~git pull~, ~Git~ 能自动地识别去哪个服务器上抓取、合并到哪个分支

             设置其他跟踪分支：
             #+BEGIN_SRC bash
               # 跟踪分支， branch 的名称可以和远程分支的不同
               $ git checkout -b [branch] [remotename]/[branch]

               # 快捷方式， 名称相同
               $ git checkout --track [remotename]/[branch]
             #+END_SRC

             设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，
             可以在使用 ~-u~ 或 ~--set-upstream-to~ 选项运行 ~git branch~ 来显式地设置
             #+BEGIN_SRC bash
               $ git branch -u origin/serverfix
             #+END_SRC

   + 删除远程分支 :: 运行带有 ~--delete~ 选项的 ~git push~ 命令来删除一个远程分支(从服务器删除)
               #+BEGIN_SRC bash
                 $ git push origin --delete serverfix
               #+END_SRC

   + [[https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF][Git-分支-远程分支]]

** 变基
   + 变基 :: 提取在一个分支中引入的补丁和修改， 然后在另一个分支的基础上应用一次。
           #+BEGIN_SRC bash
             # 切换到要提取修改的分支
             $ git checkout <branch>

             # 变基到目标分支
             $ git rebase <branch>
           #+END_SRC

   + [[https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA][Git 分支 - 变基]]

