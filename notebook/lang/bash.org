#+TITLE:      Bash

* 目录                                                    :TOC_4_gh:noexport:
- [[#基础][基础]]
  - [[#变量][变量]]
  - [[#数组][数组]]
  - [[#字符串替换][字符串替换]]
  - [[#函数][函数]]
  - [[#条件语句][条件语句]]
  - [[#循环][循环]]

* 基础
  脚本第一行叫做 ~shebang~, 用于告诉 ~shell~ 使用什么程序执行这个脚本。

  #+BEGIN_SRC bash
    #!/usr/bin/env bash
  #+END_SRC

** 变量
   变量名和等号之间不能有空格， 使用变量需要在变量名前面加上 ~$~. 可以使用 ~${}~ 的形式来确定变量边界：
   #+BEGIN_SRC bash
     str="hello world"

     echo $str  # hello world
     echo "${str}."  # hello world.
   #+END_SRC

** 数组
   数组的大小没有限制， 数组的第一个元素的下标为 ~0~. 创建数组的几种方法：
   #+BEGIN_SRC bash
     array[0] = val
     array[1] = val
     array[2] = val
     array=([2]=val [0]=val [1]=val)
     array=(val val val)
   #+END_SRC

   显示数组某个元素的值：
   #+BEGIN_SRC bash
     ${array[i]}     # where i is the index
   #+END_SRC

   如果未提供索引， 则假定为数组元素 0. 获取数组存在多少元素的方式：
   #+BEGIN_SRC bash
     ${#array[@]}
   #+END_SRC

   特殊的取值操作：
   #+BEGIN_SRC bash
     ${varname:-word}    # if varname exists and isn't null, return its value; otherwise return word
     ${varname:=word}    # if varname exists and isn't null, return its value; otherwise set it word and then return its value
     ${varname:+word}    # if varname exists and isn't null, return word; otherwise return null
     ${varname:offset:length}    # performs substring expansion. It returns the substring of $varname starting at offset and up to length characters
   #+END_SRC

** 字符串替换
   #+BEGIN_SRC bash
     ${variable#pattern}         # if the pattern matches the beginning of the variable's value, delete the shortest part that matches and return the rest
     ${variable##pattern}        # if the pattern matches the beginning of the variable's value, delete the longest part that matches and return the rest
     ${variable%pattern}         # if the pattern matches the end of the variable's value, delete the shortest part that matches and return the rest
     ${variable%%pattern}        # if the pattern matches the end of the variable's value, delete the longest part that matches and return the rest
     ${variable/pattern/string}  # the longest match to pattern in variable is replaced by string. Only the first match is replaced
     ${variable//pattern/string} # the longest match to pattern in variable is replaced by string. All matches are replaced
     ${#varname}     # returns the length of the value of the variable as a character string
   #+END_SRC

** 函数
   定义函数的方式：
   #+BEGIN_SRC bash
     function name() {
         shell commands
     }
   #+END_SRC

   例子：
   #+BEGIN_SRC bash
     #!/bin/bash
     function hello {
         echo world!
     }
     hello

     function say {
         echo $1
     }
     say "hello world!"
   #+END_SRC

   ~$1~ 表示传入函数的第一个参数。

** 条件语句
   #+BEGIN_SRC bash
     if [ expression ]; then
         will execute only if expression is true
     else
         will execute if expression is false
     fi
   #+END_SRC

   ~expression~ 和 ~[]~ 之间必须有空格， 即 *不能* 是 ~[expression]~.

   #+BEGIN_SRC bash
     case expression in
         pattern1 )
             statements
             ;;
         pattern2 )
             statements
             ;;
         ...
     esac
   #+END_SRC

   分号 ~;;~ 充当 ~break~ 的角色。

   各种表达式：
   #+BEGIN_SRC bash
     statement1 && statement2  # both statements are true
     statement1 || statement2  # at least one of the statements is true

     str1=str2       # str1 matches str2
     str1!=str2      # str1 does not match str2
     str1<str2       # str1 is less than str2
     str1>str2       # str1 is greater than str2
     -n str1         # str1 is not null (has length greater than 0)
     -z str1         # str1 is null (has length 0)

     -a file         # file exists
     -d file         # file exists and is a directory
     -e file         # file exists; same -a
     -f file         # file exists and is a regular file (i.e., not a directory or other special type of file)
     -r file         # you have read permission
     -s file         # file exists and is not empty
     -w file         # you have write permission
     -x file         # you have execute permission on file, or directory search permission if it is a directory
     -N file         # file was modified since it was last read
     -O file         # you own file
     -G file         # file's group ID matches yours (or one of yours, if you are in multiple groups)

     file1 -nt file2     # file1 is newer than file2
     file1 -ot file2     # file1 is older than file2

     -lt     # less than
     -le     # less than or equal
     -eq     # equal
     -ge     # greater than or equal
     -gt     # greater than
     -ne     # not equal
   #+END_SRC

** 循环
   ~bash~ 的三种循环为 ~for~, ~while~ 和 ~until~.

   三种 ~for~:
   #+BEGIN_SRC bash
     for x := 1 to 10 do
     begin
         statements
     end

     for name [in list]
     do
         statements that can use $name
     done

     for (( initialisation ; ending condition ; update ))
     do
         statements...
     done
   #+END_SRC
   
   ~while~:
   #+BEGIN_SRC bash
     while condition; do
         statements
     done
   #+END_SRC

   ~until~:
   #+BEGIN_SRC bash
     until condition; do
         statements
     done
   #+END_SRC
