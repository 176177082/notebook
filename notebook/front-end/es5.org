#+TITLE:      ECMAScript 5

* 目录                                                    :TOC_4_gh:noexport:
- [[#基础概念][基础概念]]
  - [[#宿主环境][宿主环境]]
- [[#数据类型][数据类型]]
- [[#属性描述符][属性描述符]]
- [[#对象字面量][对象字面量]]
- [[#数据类型的转换][数据类型的转换]]
- [[#面向对象][面向对象]]
  - [[#类型判断][类型判断]]
- [[#this-指针][this 指针]]
- [[#事件机制][事件机制]]
- [[#相关技巧][相关技巧]]
  - [[#javascript-变量的命名][JavaScript 变量的命名]]
  - [[#让返回值变成-undefined][让返回值变成 undefined]]
  - [[#显示所有元素的-outline][显示所有元素的 outline]]
  - [[#iife][IIFE]]
  - [[#数值运算符][数值运算符]]
- [[#相关问题][相关问题]]
  - [[#通过-innerhtml-的方式为-table-添加行失败][通过 innerHTML 的方式为 table 添加行失败]]
  - [[#浏览器中-es6-模块化的语法不能使用][浏览器中 ES6 模块化的语法不能使用]]
  - [[#怎样获取用户使用的语言][怎样获取用户使用的语言]]
  - [[#javascript-的入口函数][JavaScript 的入口函数？]]
  - [[#如何清空一个数组中的内容][如何清空一个数组中的内容]]
  - [[#变量提升的规则][变量提升的规则]]
  - [[#windowonload-和-documentonload][window.onload 和 document.onload]]
  - [[#普通函数和构造函数的区别][普通函数和构造函数的区别]]
  - [[#怎样实现字符串的-replaceall-操作][怎样实现字符串的 replaceAll 操作]]

* 基础概念
  JavaScript 本身不提供任何与 I/O 相关的 API，这些都要靠宿主环境提供，比如浏览器、Node.js 这些。

  JavaScript 的学习可以分为三个部分：
  1. 基本的语法构造，比如操作符、控制结构、语句等
  2. 标准库，就是一系列具有各种功能的对象比如 Array、Date、Math 等
  3. 各种宿主环境提供额外的 API

  JavaScript 常用的宿主环境为浏览器，浏览器提供的额外接口可以分为三类：
  1. 浏览器控制类，用于操作浏览器
  2. DOM 类，用于操作网页的各种元素
  3. Web 类，用于实现互联网的各种功能

  JavaScript 的核心语法不难，其复杂性体现在另外两个方面：
  1. 涉及的大量的外部 API
  2. 语言的一些设计缺陷
     
  ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。在日常场合，这两个词是可以互换的。

  其中，ECMAScript 只用来标准化 JavaScript 这种语言的基本语法结构，与部署环境相关的标准都由其他标准规定，比如 DOM 的标准就是由 W3C 组织制定的。

  参考：
  + [[https://wangdoc.com/javascript/index.html][JavaScript 教程 - 网道]]

** 宿主环境
   在学习 JavaScript 的时候需要注意区分不同的宿主环境，因为在不同的环境下 JavaScript 的表现多多少少还是存在一些区别。

   最常见的宿主环境应该是浏览器，提供了很多额外的接口，另外一个现在常用的宿主环境的是 Node.js，其中，Node 是 JavaScript 语言的服务器运行环境，
   提供大量工具库，使得 JavaScript 语言与操作系统互动。其中，Node 内部采用 Google 公司的 V8 引擎作为 JavaScript 语言解释器，
   通过自行开发的 libuv 库，调用操作系统资源。

   不同类型的宿主环境在 JavaScript 的实现上存在区别，不一定完全匹配 ECMAScript 标准，比如说，Node.js 中模块系统使用的便是 CommonJS 标准。

   同一类型的宿主环境在 JavaScript 的实现上同样存在差异，比如说 IE 浏览器，因此，往往需要一些工具将高版本的 JS 编译为兼容低版本的 JS，
   Babel 便是用来完成这一工作的。

   参考：
   + [[https://javascript.ruanyifeng.com/nodejs/basic.html][Node.js 概述 -- JavaScript 标准参考教程 (alpha)]]
   + [[https://wangdoc.com/javascript/basic/introduction.html][导论 - JavaScript 教程 - 网道]]

* 数据类型
  JavaScript 中除了 ES6 新增的 Symbol 以外存在六种数据类型，分别为：数值、布尔值、字符串、undefined、null 和 对象。其中对象又可以分为狭义的对象、数组和函数。

  JavaScript 可以通过三种方法来判断对象的类型：
  + ~typeof~ 运算符
  + ~instanceof~ 运算符
  + ~Object.prototype.toString~ 方法

  如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了 undefined、null、false、0、NaN 和空字符串这六个值被转为 false，其他值都视为 true。

  JavaScript 内部，所有数字都是以 64 位浮点数形式储存，即使整数也是如此。这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64 位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，
  此时 JavaScript 会自动把 64 位浮点数，转成 32 位整数，然后再进行运算。

  JavaScript 内部实际上存在 2 个0：一个是 +0，一个是 -0，几乎所有场合，正零和负零都会被当作正常的 0，除了在作为分母时。除以正零得到 +Infinity，除以负零得到 -Infinity。

  由于 NaN 和 Infinity 这两个特殊数值和自动转换规则的存在，使得 JavaScript 数值运算几乎不会出现异常，只会得到让你一脸懵逼的结构 @_@

  和数值操作相关的全局函数：
  + ~parseInt~ 方法用于将字符串转为整数
  + ~parseFloat~ 方法用于将字符串转为浮点数
  + ~isNaN~ 方法可以用来判断一个值是否为 ~NaN~
  + ~isFinite~ 方法返回一个布尔值，表示某个值是否为正常的数值，只有 Infinity、-Infinity、NaN 和 undefined 这几个值会返回 false。
   
  JavaScript 提供了两个原生方法 ~btoa~ 和 ~atob~ 来转换还原 Base64 字符串，这两个方法仅适用于 ASCII 字符。要将非 ASCII 码字符转为 Base64 编码，必须中间插入一个转码环节，再使用这两个方法：
  #+begin_src js
    function b64Encode(str) {
      return btoa(encodeURIComponent(str));
    }

    function b64Decode(str) {
      return decodeURIComponent(atob(str));
    }
  #+end_src

  可以通过 ~Object.keys~ 方法来查看对象的所有属性，同时可以通过 ~delete~ 命令删除对象的属性。而 ~in~ 运算符可以检查对象是否包含某个属性，但是不能识别哪些属性是对象自身的，哪些属性是继承的，
  这时，可以使用对象的 ~hasOwnProperty~ 方法判断一下，是否为对象自身的属性。

  可以通过 ~for...in~ 循环遍历一个对象的全部属性，需要注意的是：
  1. 它遍历的是对象所有可遍历的属性，会跳过不可遍历的属性
  2. 它不仅遍历对象自身的属性，还遍历继承的属性

  JavaScript 中的函数可以被多次声明，后面的声明就会覆盖前面的声明，这和变量不一样，变量多此声明时，如果不赋初始值，后面的声明就是无效的。也许，函数声明即有值，因此后面的会覆盖前面的。

  JavaScript 引擎将函数名视同变量名，所以采用 function 命令声明函数时， *整个函数* 会像变量声明一样，被提升到代码头部，但是，如果采用赋值语句定义函数，就会存在问题：
  #+begin_src js
    var f = function () {
      console.log('1');
    }

    function f() {
      console.log('2');
    }

    f()
  #+end_src

  上面的代码经过变量提升后就变成了：
  #+begin_src js
    var f;

    function f() {
      console.log('2');
    }

    var f = function () {
      console.log('1');
    }

    f() // 1
  #+end_src

  最后得到的就是通过赋值语句声明的函数，因此，如果同时采用 function 命令和赋值语句声明同一个函数，最后总是采用赋值语句的定义。

  函数的属性和方法：
  + 函数的 ~name~ 属性返回函数的名字
  + 函数的 ~length~ 属性返回函数预期传入的参数个数，即函数定义之中的参数个数
  + 函数的 ~toString~ 方法返回一个字符串，内容是函数的源码，包含注释

  在 ES5 中，作用域可以分为全局作用域和函数（局部）作用域，其中，函数内部定义的变量，会在该作用域内覆盖同名全局变量。

  JavaScript 中，函数参数不是必需的，JavaScript 允许省略参数，即使函数签名中有参数。另外，你多传参数也没有问题，JavaScript 会在填满参数列表后忽略后面的参数。

  如果函数签名中有同名的参数，则取最后出现的那个值。

  由于 JavaScript 中函数参数的不确定性，所以需要一种机制，可以在函数体内部读取所有参数。这就是 arguments 对象的由来。arguments 对象包含了函数运行时的所有参数，
  arguments[0] 就是第一个参数，arguments[1] 就是第二个参数，以此类推。这个对象只有在函数体内部，才可以使用。

  正常模式下，arguments 对象可以在运行时修改，而在严格模式下，严格模式下，arguments 对象与函数参数不具有联动关系。需要注意的是，arguments 对象虽然很像数组，但不是数组。

  arguments 对象带有一个 callee 属性，可以返回它所对应的原函数，这个属性在严格模式里面是禁用的，因此不建议使用。

  JavaScript 中数组是一种特殊的对象，数组的索引是通过对应的属性来实现的，即 ~0 - N~ 的索引其实是存在 ~0 - N~ 的属性，只不过，数字属性不能通过 ~obj.attr~ 的方式访问，
  于是便通过 ~obj[attr]~ 的方式来操作了。

  JavaScript 中数组可以存在空位，比如说 ~[1, ,3]~ 的形式中间便存在一个空位，可以通过 ~delete~ 命令删除数组元素，此时会在原数组上生成一个空位。

  如果一个对象的所有键名都是正整数或零，并且有 ~length~ 属性，那么这个对象就很像数组，语法上称为类似数组的对象，可以通过 ~Array.prototype.slice.call~ 将类似数组的对象变成真正的数组。
  
* 属性描述符
  JavaScript 提供了一个内部数据结构 - 属性描述符来描述对象的属性，对象里目前存在的属性描述符有两种主要形式：
  + 数据描述符：数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的
  + 存取描述符：存取描述符是由 ~getter-setter~ 函数对描述的属性

  描述符必须是这两种形式之一，不能同时是两者。

  用于描述符本身的属性：
  + ~configurable~ - 该属性描述符是否可以被改变，当值为 false 时，该属性描述符不能被修改，同时对应的属性也不能删除
  + ~enumerable~ - 该属性能否被枚举，当属性不能被枚举时，for...in 和 Object.keys 会跳过该属性
    
  用于数据描述符的属性：
  + ~value~ - 该属性对应的值
  + ~writable~ - 该属性是否可写

  用于存取描述符的属性：
  + ~get~ - 该属性的 ~getter~ 方法
  + ~set~ - 该属性的 ~setter~ 方法

  PS：可以通过 ~Proxy~ 对象拦截所有属性的 ~getter~ 和 ~setter~ 操作
    
  参考：
  + [[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6][Object.defineProperty() - JavaScript | MDN]]
  + [[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties][Object.defineProperties() - JavaScript | MDN]]
  + [[https://wangdoc.com/javascript/stdlib/attributes.html][属性描述对象 - JavaScript 教程 - 网道]]
  + [[https://es6.ruanyifeng.com/#docs/proxy][Proxy - ECMAScript 6入门]]

* 对象字面量
  在 ES2015，对象字面值扩展支持：
  + 在创建时设置原型
  + 简写了 ~foo: foo~ 形式的属性赋值
  + 方法定义
  + 父方法调用
  + 使用表达式动态计算属性名

  例子:
  #+begin_src js
    var obj = {
      // __proto__
      __proto__: theProtoObj,
      // Shorthand for ‘handler: handler’
      handler,
      // Methods
      toString() {
        // Super calls
        return "d " + super.toString();
      },
      // Computed (dynamic) property names
      [ 'prop_' + (() => 42)() ]: 42
    };
  #+end_src

  属性的 getter 和 setter 也可以简写：
  #+begin_src js
    const cart = {
      _wheels: 4,

      get wheels () {
        return this._wheels;
      },

      set wheels (value) {
        if (value < this._wheels) {
          throw new Error('数值太小了！');
        }
        this._wheels = value;
      }
    }
  #+end_src

  参考：
  + [[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types][语法和数据类型 - JavaScript | MDN]]
  + [[https://es6.ruanyifeng.com/#docs/object][对象的扩展 - ECMAScript 6入门]]

* 数据类型的转换
  JavaScript 中的数据类型转换规则是我目前见过的所有语言中最复杂的一个，其中，自动类型转换是通过调用 Boolean、String 和 Number 函数完成的。

  同时，自动类型转换又往往和比较运算符扯在一起，详细规则可以见：
  + [[https://wangdoc.com/javascript/features/conversion.html][数据类型的转换 - JavaScript 教程 - 网道]]
  + [[https://wangdoc.com/javascript/operators/comparison.html#%E7%9B%B8%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6][比较运算符 - JavaScript 教程 - 网道]]

* 面向对象
  JavaScript 中的原型链和我想象中的存在一点区别，大致存在三个层次：
  #+begin_example
                  ConstructorA      ConstructorB      ConstructorC
                       |                 |                 |
    Instance       prototype         prototype         prototype
        |       /      |         /       |         /       |
        |      /       |        /        |        /        |
    __proto__       __proto__         __proto__         __proto__
  #+end_example

  这和 Python 的存在区别，之前一直按 Python 中的 =__class__= 类比理解的：
  #+begin_example
    Instance         ClassA         ClassB         ClassB   
        |        /      |       /      |       /      |  
        |       /       |      /       |      /       |
    __class__       __class__      __class__      __class__
  #+end_example

  # 感觉这样理解不太好
  #
  # 不过本质上还是相似的：
  # + JavaScript 中的实例通过 =__proto__= 属性引用构造器的 =prototype= 属性，而 =prototype= 属性通过它的 =constructor= 属性引用构造器
  # + Python 中的实例通过 =__class__= 属性引用类对象，而类对象存在对自身属性字典的引用

  # 统一一下名词就是：
  # + JavaScript 是：实例 -> 构造器属性 -> 构造器
  # + Python 是：实例 -> 构造器 -> 构造器属性

  通过 ~instanceof~ 判断对象类型的时候，会判断右值的 ~prototype~ 是否在左值的原型链上，当左值的类型为以下类型时直接返回 Fasle：
  #+begin_quote
  Boolean Null Undefined Number BigInt String Symbol
  #+end_quote

  获取原型链：
  #+begin_src js
    function getPrototypes(obj) {
      prototypes = []
      while (obj) {
        prototypes.push(obj.__proto__)
        obj = obj.__proto__
      }
      return prototypes
    }
  #+end_src

  这里我一直也理解错了，以为 JavaScript 和 Python 一样，一切皆是对象，结果 JavaScript 中居然还有 primitive 类型，只不过在 primitive 调用方法时会自动包装为对象。
  
  参考：
  + [[https://segmentfault.com/q/1010000004457932][javascript - `1 instanceof Number` 为啥是 false? - SegmentFault 思否]]
  + [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures][JavaScript data types and data structures - JavaScript | MDN]]
  + [[https://wangdoc.com/javascript/oop/prototype.html][对象的继承 - JavaScript 教程 - 网道]]

** 类型判断  
   JavaScript 中可以通过 typeof、instanceof、constructor 和 toString 来判断对象的类型，其中：
   1) typeof 判断对象类型是通过对象的底层表示形式来判断的，这就导致了一个问题，typeof null 会被判断为 object，参考：
      #+begin_src js
        typeof '';              // string
        typeof 1;               // number
        typeof 1n;              // bigint
        typeof Symbol();        // symbol
        typeof true;            // boolean
        typeof undefined;       // undefined
        typeof new Function();  // function

        typeof null;            // object
        typeof [] ;             // object
        typeof new Date();      // object
        typeof new RegExp();    // object
      #+end_src
      
      返回值其实是有规律的：
      1. primitive type 类型中，除了 null 以外都可以得到正确的判断
      2. function 是特殊的对象，单独给个底层表示形式不过分
      3. 其他的都是 object 就可以了
      
      参考：
      1. [[https://segmentfault.com/q/1010000011846328][JavaScript 中 typeof 原理探究？ - SegmentFault 思否]]
      2. [[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof][typeof - JavaScript | MDN]]
   2) instanceof 通过原型链来判断对象类型，当一个对象的原型就是 null 时，它不能作为 instanceof 操作符的右值，而左值类型为 primitive 时会直接返回 false
   3) 原型对象的 constructor 属性指向构造器本身，因此，这种判断方式本质上还是在使用原型链：
      #+begin_src js
        obj = new Dog()
        obj.constructor == Dog
      #+end_src
   4) 方法 Object.prototype.toString 会返回对象的 ~[[Class]]~ 属性，其格式为 ~[object Xxx]~, 其中 ~Xxx~ 就是对象的类型
      #+begin_src js
        Object.prototype.toString.call('')              // [object String]
        Object.prototype.toString.call(1)               // [object Number]
        Object.prototype.toString.call(true)            // [object Boolean]
        Object.prototype.toString.call(Symbol())        // [object Symbol]
        Object.prototype.toString.call(undefined)       // [object Undefined]
        Object.prototype.toString.call(null)            // [object Null]
        Object.prototype.toString.call(newFunction())   // [object Function]
        Object.prototype.toString.call(newDate())       // [object Date]
        Object.prototype.toString.call([])              // [object Array]
        Object.prototype.toString.call(newRegExp())     // [object RegExp]
      #+end_src

   总的来说，JavaScript 中类型判断的坑很多，感觉其中一个原因大概就是存在 primitive 类型但是有没有类型系统的锅，像 Python 那样，一切皆是对象，直接一条原型链搞定。

   参考：
   + [[https://www.cnblogs.com/onepixel/p/5126046.html][判断 JS 数据类型的四种方法 - 一像素 - 博客园]]

* this 指针
  在全局执行环境下 =this= 指针指向全局对象，也就是 =window= 或 =global= 对象：
  #+begin_src js
    console.log(this === window);  // true

    a = 37;
    console.log(window.a);         // 37

    this.b = "MDN";
    console.log(window.b)          // "MDN"
    console.log(b)                 // "MDN"
  #+end_src
  
  在函数内部 =this= 指针的值取决于函数被调用的方式：
  + 简单调用 ::
    即在全局环境下直接调用，不在严格模式下时 =this= 指针指向全局对象，严格模式下 =this= 将保持他进入执行环境时的值，
    此时该值为 =undefined=:
    #+begin_src js
      function f1() {
        return this;  // window or global
      }

      function f2() {
        "use strict";
        return this;  // undefined
      }
    #+end_src
    
    需要注意的是，函数的直接调用 =f2()= 和类似 =window.f2()= 的调用是不同的，通过 =window.f2()= 调用时会返回 =window= 对象。
    
    如果要想把 this 的值从一个环境传到另一个，就要用 =call= 或者 =apply= 方法：
    #+begin_src js
      // 将一个对象作为 call 和 apply 的第一个参数，this 会被绑定到这个对象
      var obj = {a: 'Custom'};

      // 这个属性是在全局对象定义的
      var a = 'Global';

      function whatsThis(arg) {
        return this.a;  // this 的值取决于函数的调用方式
      }

      whatsThis();          // 'Global'
      whatsThis.call(obj);  // 'Custom'
      whatsThis.apply(obj); // 'Custom'
    #+end_src

    使用 =call= 和 =apply= 函数的时候要注意，如果传递给 this 的值不是一个对象，JavaScript 会尝试使用内部 =ToObject= 操作将其转换为对象。

  + bind 方法 :: 
    ECMAScript 5 引入了 =Function.prototype.bind()= 函数，调用 =f.bind(someObject)= 会创建一个与 =f= 具有相同函数体和作用域的函数，
    但是在这个新函数中，this 将永久地被绑定到了 =bind= 的第一个参数，无论这个函数是如何被调用的。
    #+begin_src js
      function f(){
        return this.a;
      }

      var g = f.bind({a:"azerty"});
      console.log(g());                       // azerty

      var h = g.bind({a:'yoo'});              // bind 只生效一次！
      console.log(h());                       // azerty

      var o = {a:37, f:f, g:g, h:h};
      console.log(o.a, o.f(), o.g(), o.h());  // 37, 37, azerty, azerty
    #+end_src

  + 箭头函数 :: 
    在箭头函数中，this 与 *封闭词法环境* 的 this 保持一致。在全局代码中，它将被设置为全局对象：
    #+begin_src js
      var globalObject = this;
      var foo = () => this;
      console.log(foo() === globalObject); // true
    #+end_src
    
    如果将 this 传递给 call、bind、或者 apply 来调用箭头函数，它将被忽略。

    更为复杂的例子：
    #+begin_src js
      var obj = {
        f1: function() {
          return x = () => this
        },
        f2: function() {
          'use strict'
          return x = () => this
        }
      };

      obj.f1()()  // 此时 f1 的 this 为 obj，因此返回值为 obj
      obj.f2()()  // 此时 f2 的 this 为 obj，因此返回值为 obj

      var f1 = obj.f1
      f1()()     // 非严格模式，此时 f1 的 this 指向全局对象，也就是 window

      var f2 = obj.f2
      f2()()     // 严格模式，此时 f2 的 this 指向 undefined
    #+end_src

  + 作为对象的方法 :: 
    当函数作为对象里的方法被调用时，它们的 =this= 指向调用该函数的对象：
    #+begin_src js
      var o = {
        prop: 37,
        f: function() {
          return this.prop;
        }
      };

      console.log(o.f()); // 37
    #+end_src
  
    同时，这样的行为，不受函数定义方式或位置的影响：
    #+begin_src js
      var o = {prop: 37};

      function independent() {
        return this.prop;
      }

      o.f = independent;

      console.log(o.f()); // 37
    #+end_src

    同时，this 的绑定只受最靠近的成员引用的影响：
    #+begin_src js
      o.b = {g: independent, prop: 42};
      console.log(o.b.g()); // 42
    #+end_src

  + 原型链中的 this :: 
    对于在对象原型链上某处定义的方法，同样的概念也适用。如果该方法存在于一个对象的原型链上，那么 this 指向的是调用这个方法的对象，
    就像该方法在对象上一样：
    #+begin_src js
      var o = {
        f: function() { 
          return this.a + this.b; 
        }
      };
      var p = Object.create(o);
      p.a = 1;
      p.b = 4;

      console.log(p.f()); // 5
    #+end_src

    就是说依然遵循上一个规则。

  + getter 与 setter 中的 this :: 
    用作 getter 或 setter 的函数都会把 this 绑定到设置或获取属性的对象：
    #+begin_src js
      function sum() {
        return this.a + this.b + this.c;
      }

      var o = {
        a: 1,
        b: 2,
        c: 3,
        get average() {
          return (this.a + this.b + this.c) / 3;
        }
      };

      Object.defineProperty(o, 'sum', {
        get: sum, enumerable: true, configurable: true});

      console.log(o.average, o.sum); // logs 2, 6
    #+end_src

  + 作为构造函数 :: 
    当一个函数用作构造函数时，它的 this 被绑定到正在构造的新对象：
    #+begin_src js
      function C(){
        this.a = 37;
      }

      var o = new C();
      console.log(o.a); // logs 37
    #+end_src

  + 作为一个 DOM 事件处理函数 :: 
    当函数被用作事件处理函数时，它的 this 指向触发事件的元素（一些浏览器在使用非 addEventListener 的函数动态添加监听函数时不遵守这个约定）：
    #+begin_src js
      // 被调用时，将关联的元素变成蓝色
      function bluify(e){
        console.log(this === e.currentTarget); // 总是 true

        // 当 currentTarget 和 target 是同一个对象时为 true
        console.log(this === e.target);        
        this.style.backgroundColor = '#A5D9F3';
      }

      // 获取文档中的所有元素的列表
      var elements = document.getElementsByTagName('*');

      // 将 bluify 作为元素的点击监听函数，当元素被点击时，就会变成蓝色
      for(var i=0 ; i<elements.length ; i++){
        elements[i].addEventListener('click', bluify, false);
      }
    #+end_src

  + 作为一个内联事件处理函数 :: 
    当代码被内联 =on-event= 处理函数调用时，它的 this 指向监听器所在的 DOM 元素：
    #+begin_src html
      <button onclick="alert(this.tagName.toLowerCase());">
        Show this
      </button>
    #+end_src

  + setTimeout :: 
    由 =setTimeout()= 调用的代码运行在与所在函数完全分离的执行环境上。这会导致，这些代码中包含的 this 关键字在非严格模式会指向全局对象，
    严格模式下为 undefined。

    同时，即使是在严格模式下，setTimeout() 的回调函数里面的 this 仍然默认指向 window 对象，并不是 undefined。

    PS：在 Chrome 上的测试结果是，无论是否是严格模式，函数和代码中的 this 都指向 window

  参考：
  + [[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this][this - JavaScript | MDN]]
  + [[https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout][window.setTimeout - Web API 接口参考 | MDN]]

* 事件机制
  + 通过 ~addEventListener~ 方法可以为同一个事件添加多个不同的监听函数。这些函数按照添加顺序触发，即先添加先触发。如果为同一个事件多次添加同一个监听函数，
    该函数只会执行一次，多余的添加将自动被去除。
  + 事件 =Event= 对象的 =timeStamp= 属性的值为打开当前页面后到触发该事件的事件长度，通过 =+new Date()= 减去该值便可以得到打开页面的时间 

* 相关技巧
** JavaScript 变量的命名
   JavaScript 的标识符允许大多数的 Unicode 字符，因此，你甚至可以使用颜文字来编写程序。

** 让返回值变成 undefined
   在浏览器地址栏执行函数时这个技巧挺有用的，可以避免因为函数返回值进行跳转：
   #+BEGIN_SRC js
     javascript:void window.prompt("Copy to clipboard: Ctrl+C, Enter", `[[${window.location.href}][${document.title}]]`)
   #+END_SRC  

   直接通过关键字 void 将值覆盖。

** 显示所有元素的 outline
   控制台中 $$ 相当于 document.querySelectorAll
   #+BEGIN_SRC js
     $$("*").forEach(
       e => e.style.outline = "1px solid #" + (~~(Math.random() * (1<<24))).toString(16)
     )
   #+END_SRC

** IIFE
   IIFE（立即调用函数表达式）是一个在定义时就会立即执行的 JavaScript 函数。

   这是一个被称为自执行匿名函数的设计模式，主要包含两部分:
   + 第一部分是包围在圆括号运算符 () 里的一个匿名函数，这个匿名函数拥有独立的词法作用域。
     这不仅避免了外界访问此 IIFE 中的变量，而且又不会污染全局作用域。
   + 第二部分再一次使用 () 创建了一个立即执行函数表达式，JavaScript 引擎到此将直接执行函数。

   #+BEGIN_SRC javascript
     (function () { 
       var name = "Barry";
     })();
   #+END_SRC

** 数值运算符
   数值运算符虽然使用加号，但它是一元运算符，作用在于可以将任何值转为数值，比如将 ~Date~ 转换为 Unix 时间戳：
   #+begin_src js
     let timestamp = +new Date();
   #+end_src

   与之相应的是负数值运算符，使用减号，参考：
   + [[https://wangdoc.com/javascript/operators/arithmetic.html#%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%8C%E8%B4%9F%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6][算术运算符 - 数值运算符 - JavaScript 教程 - 网道]]

* 相关问题
** 通过 innerHTML 的方式为 table 添加行失败
   通过 innerHTML 属性设置 HTML 时，底层引擎会自动关闭未关闭的标签，并修复其他错误的 HTML。

   而单独的 <tr> 标签将被视作为关闭的标签，因此，通过 innerHTML 的方式为 table 添加行会失败。

   解决方案：
   #+BEGIN_SRC js
     let table = document.createElement('table');
     for (let i = 0; i < 3; ++i) {
       let row = table.insertRow(i);
       let text = document.createTextNode(i.toString());
       let cell = row.insertCell(0);
       cell.appendChild(text);
     }
   #+END_SRC

** 浏览器中 ES6 模块化的语法不能使用
   需要使用如下形式的 script 标签：
   #+BEGIN_SRC html
     <script type="module" src="...">
   #+END_SRC

   参考：[[http://es6.ruanyifeng.com/#docs/module][Module 的语法 - ECMAScript 6入门]]

** 怎样获取用户使用的语言
   在 ~Firefox~ 和 ~Chrome~ 中可以使用如下方式获取：
   #+BEGIN_SRC js
     var language;
     if (window.navigator.languages) {
       language = window.navigator.languages[0];
     } else {
       language = window.navigator.userLanguage || window.navigator.language;
     }
   #+END_SRC

   参考：
   + [[https://stackoverflow.com/questions/25606730/get-current-locale-of-chrome/42070353][javascript - Get current locale of chrome - Stack Overflow]]
   + [[https://www.w3schools.com/jsref/obj_navigator.asp][Navigator Object]]

** JavaScript 的入口函数？
   在所有内容，包括外部图片之类的文件加载完后，才会执行的函数：
   #+BEGIN_SRC javascript
     window.onload = function () {
       // ...
     }
   #+END_SRC

** 如何清空一个数组中的内容
   我们可以使用如下五种方法来清空一个数组中的内容：
   1. 创建一个新的空数组，应该保证其他地方没有引用原来的数组：
      #+begin_src js
        A = [];
      #+end_src

   2. 将数组的 ~length~ 属性置为 0：
      #+begin_src js
        A.length = 0;
      #+end_src

   3. 使用数组的 ~splice~ 方法：
      #+begin_src js
        A.splice(0, A.length);
      #+end_src

   4. 暴力点，整一个循环：
      #+begin_src js
        while (A.length > 0) {
          A.pop();
        }
      #+end_src

   5. 再整一个循环：
      #+begin_src js
        while (A.length > 0) {
          A.shift();
        }
      #+end_src

   其中，最具可用性的是 ~2~ 和 ~3~ 这两种方式，它们两个的性能也差不多。

   参考：
   + [[https://stackoverflow.com/questions/1232040/how-do-i-empty-an-array-in-javascript][How do I empty an array in JavaScript? - Stack Overflow]]

** 变量提升的规则
   JavaScript 中的变量提升给我的感觉是一种略显尴尬的功能，主要原因大概就是它只提升声明不提升初始化，使得发生以下情况：
   #+begin_src js
     var x = 1;                 // 声明 + 初始化 x
     console.log(x + " " + y);  // '1 undefined'
     var y = 2;                 // 声明 + 初始化 y


     //上面的代码和下面的代码是一样的 
     var x = 1;                 // 声明 + 初始化 x
     var y;                     //声明 y
     console.log(x + " " + y);  //y 是未定义的
     y = 2;                     // 初始化  y 
   #+end_src

   同时，对于函数来说，通过赋值语句定义的函数提升规则和普通变量相同：
   #+begin_src js
     f();
     var f = function () {};
     // TypeError: undefined is not a function

     // 上面的代码等同于下面的形式
     var f;
     f();
     f = function () {};
   #+end_src

   参考：
   + [[https://wangdoc.com/javascript/types/function.html#%E5%87%BD%E6%95%B0%E5%90%8D%E7%9A%84%E6%8F%90%E5%8D%87][函数名的提升 - JavaScript 教程 - 网道]]
   + [[https://developer.mozilla.org/zh-CN/docs/Glossary/Hoisting][变量提升 - 术语表 | MDN]]

** window.onload 和 document.onload
   window.onload 触发在页面资源加载完成后，包括图像和脚本资源，而 document.onload 可以触发在图像和其他额外资源加载完成之前。

   参考：
   + [[https://stackoverflow.com/questions/588040/window-onload-vs-document-onload][javascript - window.onload vs document.onload - Stack Overflow]]

** 普通函数和构造函数的区别
   JS 中通过 ~new function~ 的方式来创建对象的方式让人多少有些不习惯，但是其本质还是很简单的，通过构造函数创建对象时会发生：
   #+begin_src js
     // 1. 创建一个空对象
     var _obj = {}

     // 2. this 变量指向对象 _obj
     Constructor.call(_obj)

     // 3. _obj 继承了构造函数 Constructor() 的原型
     _obj.__proto__ = Constructor.prototype

     // 4. 执行构造函数 Constructor() 内的代码
   #+end_src
   
   普通函数和构造函数的关键区别就在于 ~this~ 指针的指向。

   参考：
   + [[https://segmentfault.com/a/1190000008615288][普通函数和构造函数的区别 - 前端学习之路 - SegmentFault 思否]]
   + [[https://wangdoc.com/javascript/oop/prototype.html][对象的继承 - JavaScript 教程 - 网道]]
   + [[https://interactive-examples.mdn.mozilla.net/pages/js/function-call.html][JavaScript Demo: Function.call()]]

** 怎样实现字符串的 replaceAll 操作
   两种较为实用的方式为：
   #+begin_src js
     str.split('abc').join('')
     str.replace(/abc/g, '')
   #+end_src

   参考：
   + [[https://stackoverflow.com/questions/1144783/how-to-replace-all-occurrences-of-a-string][javascript - How to replace all occurrences of a string? - Stack Overflow]]

