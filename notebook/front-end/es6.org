#+TITLE:      ECMAScript 6

* 目录                                                    :TOC_4_gh:noexport:
- [[#ellipsis][Ellipsis]]
- [[#正则的扩展][正则的扩展]]
- [[#相关问题][相关问题]]
  - [[#通过字面量定义对象时如何将变量做为一个对象的-key][通过字面量定义对象时如何将变量做为一个对象的 Key]]
  - [[#es6commonjs-和-amd-之间的关系][ES6、CommonJS 和 AMD 之间的关系]]

* Ellipsis
  ES6 中的展开运算符和其余运算符都是 ~...~ 的形式，其中：
  + 展开运算符可以用来展开一个可迭代对象，效果如下：
    #+begin_src js
      const params = [ "hello", true, 7 ]
      const other = [ 1, 2, ...params ] // [ 1, 2, "hello", true, 7 ]

      function sum(a, b, c) {
        return a + b + c
      }
      const args = [1, 2, 3]
      sum(...args)    // 6

      [..."123456"]   // ["1", "2", "3", "4", "5", "6"]
    #+end_src
  + 其余运算符与展开运算符相反，效果如下：
    #+begin_src js
      function sum(...numbers) {
        const result = 0

        numbers.forEach(function (number) {
          result += number
        })

        return result
      }

      sum(1)              // 1
      sum(1, 2, 3, 4, 5)  // 15
    #+end_src
    
* 正则的扩展
  如果一个正则表达式在字符串里面有多个匹配，现在可以使用 g 修饰符或 y 修饰符，在循环里面逐一取出：
  #+begin_src js
    const string = 'test1test2test3';
    const regex = /t(e)(st(\d?))/g;

    for (const match of string.matchAll(regex)) {
      console.log(match);
    }
    // ["test1", "e", "st1", "1", index: 0, input: "test1test2test3"]
    // ["test2", "e", "st2", "2", index: 5, input: "test1test2test3"]
    // ["test3", "e", "st3", "3", index: 10, input: "test1test2test3"]''
  #+end_src
  
* 相关问题
** 通过字面量定义对象时如何将变量做为一个对象的 Key
   ES6 允许字面量定义对象时，用表达式作为对象的属性名：
   #+begin_src js
     var key = 'key'
     var obj = {[key]: 'value'}  // {key: "value"}
   #+end_src

** ES6、CommonJS 和 AMD 之间的关系
   在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，
   而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。
   
   也就是说，CommonJS 和 AMD 为了解决 JavaScript 文件之间的依赖与引用问题的包管理规范。在组织 JS 代码时，可以根据自己的喜好，选择合适的包管理规范，
   但应该注意，尽可能只选择一种。

   参考：
   + [[https://dev.to/iggredible/what-the-heck-are-cjs-amd-umd-and-esm-ikm][What are CJS, AMD, UMD, and ESM in Javascript? - DEV Community]]
   + [[https://www.cnblogs.com/cag2050/p/7419258.html][commonJS 模块规范 和 es6 模块规范 区别 - cag2050 - 博客园]]

