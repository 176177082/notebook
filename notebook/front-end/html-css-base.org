#+TITLE:     前端 - HTML/CSS 基础笔记

* 目录                                                    :TOC_4_gh:noexport:
- [[#html-基础][HTML 基础]]
  - [[#通用声明][通用声明]]
  - [[#标签和属性][标签和属性]]
  - [[#字符实体][字符实体]]
  - [[#html5-shiv][HTML5 Shiv]]
  - [[#html5-图形][HTML5 图形]]
  - [[#html5-多媒体][HTML5 多媒体]]
  - [[#html5-应用][HTML5 应用]]
- [[#css-基础][CSS 基础]]
  - [[#css-语法][CSS 语法]]
  - [[#css-选择器][CSS 选择器]]
  - [[#css-伪类和伪元素][CSS 伪类和伪元素]]
  - [[#css-盒子模型][CSS 盒子模型]]
  - [[#css-显示与可见性][CSS 显示与可见性]]
  - [[#css-定位][CSS 定位]]
  - [[#css-媒体类型][CSS 媒体类型]]
  - [[#css-供应商前缀][CSS 供应商前缀]]

* HTML 基础
** 通用声明
   *HTML5*:
   #+BEGIN_SRC html
     <!DOCTYPE html>
   #+END_SRC

   *HTML 4.01*:
   #+BEGIN_SRC html
     <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
     "http://www.w3.org/TR/html4/loose.dtd">
   #+END_SRC

   *XHTML 1.0*:
   #+BEGIN_SRC html
     <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
   #+END_SRC

** 标签和属性
   *HTML* 似乎并没有对内部的 *标签* 和 *属性* 做出限制， 除了标准的标签和属性以外， 非标准的标签和属性也可以使用。

   *HTML* 属于 *XML* 的子集， *标签* 和 *属性* 的命名遵循 *XML* 的语法规则， 但 *HTML* 预定义了一部份标签和属性。

   非标准标签和属性可以通过 *HTML DOM* 操作。

   存在一类特殊的标签， 这类标签的 *闭合标签* 和 *起始标签* 是相同的， 比如： ~<br/>~
  
   适用于大多数 *HTML* 元素的 *属性*:
   |-------+----------------------------------------|
   | 属性  | 描述                                   |
   |-------+----------------------------------------|
   | class | 定义元素的 *一个或多个* 类名 (classname) |
   | id    | 定义元素的唯一 id                      |
   | style | 规定元素的行内样式 (inline style)      |
   | title | 描述了元素的额外信息                   |
   |-------+----------------------------------------|

** 字符实体
   |------+--------+----------|
   | 字符 | 实体   | 实体编号 |
   |------+--------+----------|
   | 空格 | &nbsp; | &#160;   |
   | <    | &lt;   | 	&#60;  |
   | >    | &gt;   | 	&#62;  |
   | &    | &amp;  | 	&#38;  |
   | "    | &quot; | 	&#34;  |
   | '    | &apos; | &#39;    |
   |------+--------+----------|

** HTML5 Shiv
   #+BEGIN_SRC html
     <!--[if lt IE 9]>
       <script src="http://cdn.static.runoob.com/libs/html5shiv/3.7/html5shiv.min.js"></script>
     <![endif]-->
   #+END_SRC

   通过 *Shiv* 的方式为 *IE* 浏览器添加 *HTML* 支持。

   *注*: *html5shiv.js* 引用代码必须放在 ~<head>~ 元素中， 因为 *IE* 浏览器在解析 *HTML5* 新元素时需要先加载该文件

** HTML5 图形
   标签 ~<canvas>~ 用于图形的绘制， 通过脚本(JavaScript)来完成这一工作。

   *创建一个画布*:
   #+BEGIN_SRC html
     <canvas id="myCanvas" width="200" height="100"></canvas>
   #+END_SRC

   *使用 JavaScript 绘制图形*:
   #+BEGIN_SRC javascript
     var c = document.getElementById("myCanvas");
     var ctx = c.getContext("2d");
     ctx.fillStyle = "#FF0000";
     ctx.fillRect(0, 0, 150, 75);
   #+END_SRC

   标签 ~<svg>~ 同样可以用于图形的绘制， 通过 *XML* 来描述 *2D* 图形。

   + [[http://www.runoob.com/svg/svg-tutorial.html][SVG 教程]]
  
** HTML5 多媒体
   标签 ~<video>~ 可以用于播放视频：
   #+BEGIN_SRC html
     <video width="320" height="240" controls>
       <source src="movie.mp4" type="video/mp4">
       <source src="movie.ogg" type="video/ogg">
     </video>
   #+END_SRC

   标签 ~<audio>~ 可以用于播放音频：
   #+BEGIN_SRC html
     <audio controls>
       <source src="horse.ogg" type="audio/ogg">
       <source src="horse.mp3" type="audio/mpeg">
     </audio>
   #+END_SRC

** HTML5 应用
   + HTML5 Web 存储 ::
     + *localStorage*: 用于长久保存整个网站的数据， 保存的数据没有过期时间， 直到手动去除。
     + *sessionStorage*: 用于临时保存同一窗口(或标签页)的数据， 在关闭窗口或标签页之后将会删除这些数据。

   + HTML5 Web SQL 数据库 ::
     + *openDatabase*: 这个方法使用现有的数据库或者新建的数据库创建一个数据库对象。
     + *transaction*: 这个方法让我们能够控制一个事务， 以及基于这种情况执行提交或者回滚。
     + *executeSql*: 这个方法用于执行实际的 SQL 查询。

   + [[http://www.runoob.com/html/html5-websocket.html][HTML5 WebSocket]]

* CSS 基础
** CSS 语法
   *CSS* 规则主要由两个部分组成： *选择器* 和 *声明*.

   #+HTML: <img src="//www.runoob.com/wp-content/uploads/2013/07/632877C9-2462-41D6-BD0E-F7317E4C42AC.jpg">

   *CSS* 注释：
   #+BEGIN_SRC css
     /* comment */
   #+END_SRC

** CSS 选择器
   + *CSS 元素选择器*
     #+BEGIN_SRC css
       html {color:black;}
     #+END_SRC

     *元素选择器* 通过 *HTML 元素* 进行选择。

   + *CSS 选择器分组*
     #+BEGIN_SRC css
       body, h2, p, table, th, td, pre, strong, em {color:gray;}
     #+END_SRC

     可以将任意多个 *选择器* 可以分组在一起， 每个选择器之间使用 *逗号* 分隔。

     可以使用 *通配符选择器* 匹配所有元素：
     #+BEGIN_SRC css
       * {color:red;}
     #+END_SRC

   + *CSS 类选择器*
     #+BEGIN_SRC css
       *.important {color:red;}
       .important {color:red;}
       p.important {color:red;}
     #+END_SRC
    
     *类选择器* 根据 *HTML* 元素的 *class* 属性进行匹配， **.import* 和 *.import* 是等价的。

     *p.import* 只匹配 *class* 的值为 *import* 的 *p* 元素。

     通过把两个类选择器链接在一起， 仅可以选择 *同时包含这些类名* 的元素(类名的顺序不限).
     #+BEGIN_SRC css
       .important.urgent {background:silver;}
     #+END_SRC

     可以匹配以下元素：
     #+BEGIN_SRC html
       <p class="important urgent warning">
         This paragraph is a very important and urgent warning.
       </p>
     #+END_SRC

   + *CSS ID 选择器*
     #+BEGIN_SRC css
       *#intro {font-weight:bold;}
       #intro {font-weight:bold;}
     #+END_SRC

     *ID 选择器* 根据 *HTML* 元素的 *id* 属性进行匹配。

     *注:* *类选择器* 和 *ID 选择器* 区分大小写

   + *CSS 属性选择器*
     #+BEGIN_SRC css
       img[alt] {border: 5px solid red;}
     #+END_SRC

     ☞ [[http://www.w3school.com.cn/css/css_selector_attribute.asp][CSS 属性选择器详解]]

   + *CSS 后代选择器*
     #+BEGIN_SRC css
       h1 em {color:red;}
     #+END_SRC

     *后代选择器* 根据上下文匹配元素， 示例代码匹配 *h1* 元素后代的 *em* 元素。

     ☞ [[http://www.w3school.com.cn/css/css_selector_descendant.asp][CSS 后代选择器]]

   + *CSS 子元素选择器*
     #+BEGIN_SRC css
       h1 > strong {color:red;}
     #+END_SRC

     *子元素选择器* 选择指定元素的 *子元素*, *后代选择器* 包含 *子元素选择器*.

     ☞ [[http://www.w3school.com.cn/css/css_selector_child.asp][CSS 子元素选择器]]

   + *CSS 相邻兄弟选择器*
     #+BEGIN_SRC css
       h1 + p {margin-top:50px;}
     #+END_SRC

     *相邻兄弟选择器* 可选择紧接在指定元素后的元素， 且二者有 *相同父元素*.

     ☞ [[http://www.w3school.com.cn/css/css_selector_adjacent_sibling.asp][CSS 相邻兄弟选择器]]

** CSS 伪类和伪元素
   *伪类* 的语法为：
   #+BEGIN_SRC css
     selector:pseudo-class {property:value;}
   #+END_SRC

   常用伪类有：
   |--------------+----------------------------------------|
   | 伪类         | 描述                                   |
   |--------------+----------------------------------------|
   | :active      | 向被激活的元素添加样式                 |
   | :focus       | 向拥有键盘输入焦点的元素添加样式       |
   | :hover       | 当鼠标悬浮在元素上方时，向元素添加样式 |
   | :link        | 向未被访问的链接添加样式               |
   | :visited     | 向已被访问的链接添加样式               |
   | :first-child | 向元素的第一个子元素添加样式           |
   | :lang        | 向带有指定 lang 属性的元素添加样式     |
   |--------------+----------------------------------------|

   *伪元素* 的语法为：
   #+BEGIN_SRC css
     selector:pseudo-element {property:value;}
   #+END_SRC

   常用的伪元素有：
   |---------------+--------------------------------|
   | 伪元素        | 描述                           |
   |---------------+--------------------------------|
   | :first-letter | 向文本的第一个字母添加特殊样式 |
   | :first-line   | 向文本的首行添加特殊样式       |
   | :before       | 在元素之前添加内容             |
   | :after        | 在元素之后添加内容             |
   |---------------+--------------------------------|

** CSS 盒子模型
   *CSS 盒子模型* 本质上是一个盒子， 封装周围的 HTML 元素， 它包括： 边距、 边框、 填充、 和实际内容。

   #+HTML: <img src="http://www.runoob.com/images/box-model.gif">

   + *Margin(外边距)* - 清除边框外的区域，外边距是透明的。
   + *Border(边框)* - 围绕在内边距和内容外的边框。
   + *Padding(内边距)* - 清除内容周围的区域，内边距是透明的。
   + *Content(内容)* - 盒子的内容，显示文本和图像。

   *CSS 轮廓(outline)* 可以在 *边框* 的边缘外围绘制一条线。

** CSS 显示与可见性
   + [[http://www.runoob.com/css/css-display-visibility.html][CSS Display(显示) 与 Visibility（可见性）]]

** CSS 定位
   *CSS 定位方式* 通过 *position* 属性指定。

   *CSS 相对定位*:
   #+HTML: <img src="http://www.w3school.com.cn/i/ct_css_positioning_relative_example.gif">

   *CSS 绝对定位*:
   #+HTML: <img src="http://www.w3school.com.cn/i/ct_css_positioning_absolute_example.gif">

   *CSS 浮动*: [[http://www.w3school.com.cn/css/css_positioning_floating.asp][w3school - CSS 浮动]]

** CSS 媒体类型
   媒体类型允许你指定文件将如何在不同媒体呈现。

   #+BEGIN_SRC css
     @media screen {
         p.test {font-family:verdana,sans-serif;font-size:14px;}
     }

     @media print {
         p.test {font-family:times,serif;font-size:10px;}
     }

     @media screen, print {
         p.test {font-weight:bold;}
     }
   #+END_SRC
  
   部分媒体类型：
   |------------+--------------------------------------------------------|
   | 媒体类型   | 描述                                                   |
   |------------+--------------------------------------------------------|
   | all        | 用于所有的媒体设备。                                   |
   | aural      | 用于语音和音频合成器。                                 |
   | braille    | 用于盲人用点字法触觉回馈设备。                         |
   | embossed   | 用于分页的盲人用点字法打印机。                         |
   | handheld   | 用于小的手持的设备。                                   |
   | print      | 用于打印机。                                           |
   | projection | 用于方案展示，比如幻灯片。                             |
   | screen     | 用于电脑显示器。                                       |
   | tty        | 用于使用固定密度字母栅格的媒体，比如电传打字机和终端。 |
   | tv         | 用于电视机类型的设备。                                 |
   |------------+--------------------------------------------------------|

** CSS 供应商前缀
   + [[https://stackoverflow.com/questions/18083056/css-what-are-moz-and-webkit][CSS What are -moz- and -webkit- ?]]

   |---------+----------------|
   | 前缀    | 供应商         |
   |---------+----------------|
   | -webkit | Chrome, Safari |
   | -moz    | Firefox        |
   | -o      | Opera          |
   | -ms     | IE             |
   |---------+----------------|

