#+TITLE:     CSS

* 目录                                                    :TOC_4_gh:noexport:
- [[#相关技巧][相关技巧]]
  - [[#通过-transform-实现网页翻转镜像][通过 transform 实现网页翻转镜像]]
  - [[#子元素居中效果的实现][子元素居中效果的实现]]
  - [[#通过-filter-实现网页雾化效果][通过 filter 实现网页雾化效果]]
  - [[#所有浏览器通用的字体][所有浏览器通用的字体]]
- [[#相关问题][相关问题]]
  - [[#css-属性中类似--webkit-的前缀是怎么一回事][CSS 属性中类似 -webkit 的前缀是怎么一回事]]
  - [[#怎样让-div-的高度为-100-的屏幕高度][怎样让 div 的高度为 100% 的屏幕高度]]
  - [[#css-样式使用的优先级怎么判断][CSS 样式使用的优先级怎么判断]]
  - [[#盒子模型的宽度和高度包含-padding-吗][盒子模型的宽度和高度包含 padding 吗]]
  - [[#怎样让超出范围的文本显示为省略号][怎样让超出范围的文本显示为省略号]]
  - [[#怎样让文本居中显示][怎样让文本居中显示]]
  - [[#怎样在打印时去除-href][怎样在打印时去除 href]]
  - [[#scsssass-和-less-之间的区别][SCSS/Sass 和 Less 之间的区别]]
  - [[#文本的溢出折行和断词问题][文本的溢出、折行和断词问题]]

* 相关技巧
** 通过 transform 实现网页翻转镜像
   实现原理是通过 *transform* 属性翻转 *iframe* 元素：
   #+BEGIN_SRC html
     <html>
       <head>
         <title>...</title>
         <style>
           .mirror_ifrom {
             -webkit-transform: scaleX(-1);
             animation: mirror forwards 0s;
             -moz-animation: mirror forwards 0s;
             -webkit-animation: mirror forwards 0s;
             -o-animation: mirror forwards 0s;
           }
         </style>
       </head>
       <body>
         <iframe src="https://www.bilibili.com/" frameborder="0" width="100%" height="100%" class="mirror_ifrom"></iframe>
       </body>
     </html>
   #+END_SRC

   更多有关于 *transform* 属性的内容：[[https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform][transform | MDN]]

** 子元素居中效果的实现
   子元素的类型可以分为行内元素和块级元素，其中，行内元素可以通过如下方式实现居中：
   #+BEGIN_SRC css
     text-align: center;
   #+END_SRC

   而块级元素需要区分定宽和不定宽两种情况，定宽块级元素可以通过如下方式实现居中：
   #+BEGIN_SRC css
     width: 500px;
     margin-left: auto;
     margin-right: auto;
   #+END_SRC

   对于不定宽块级元素来说，较为简单的方式是让其变为行内元素：
   #+BEGIN_SRC css
     display: inline;
   #+END_SRC

   其他方式可以参考：[[https://segmentfault.com/a/1190000003110179][CSS 实现元素水平居中 - 总总 - SegmentFault 思否]]

** 通过 filter 实现网页雾化效果
   可以通过如下的方式实现网页的雾化效果，值越大雾化越明显：
   #+BEGIN_SRC css
     filter: blur(5px);
   #+END_SRC

** 所有浏览器通用的字体
   有几种默认的字体是所有浏览器都可用的，包括 Monospace、Serif 和 Sans-Serif。
   
* 相关问题
** CSS 属性中类似 -webkit 的前缀是怎么一回事
   这些是相关渲染引擎提供的供应商前缀属性：
   #+BEGIN_QUOTE
   These are the vendor-prefixed properties offered by the relevant rendering engines (-webkit for Chrome, Safari; -moz for Firefox, -o for Opera, -ms for Internet Explorer). 
   #+END_QUOTE

** 怎样让 div 的高度为 100% 的屏幕高度
   很简单，使用 ~vh~ 作为高度的单位就可以了：
   #+BEGIN_SRC css
     div {
       height: 100vh;
     }
   #+END_SRC

** CSS 样式使用的优先级怎么判断
   1. 后声明的样式会覆盖先声明的样式
   2. 通过 ID 指定的样式总是比通过类指定的优先级高
   3. 内联样式的优先级是最高的
   4. 通过为样式添加 ~!important~ 声明使得它必然具有某种样式，如果都有就按照之前的优先级来
  
** 盒子模型的宽度和高度包含 padding 吗
   这一点受到属性 ~box-sizing~ 的值的影响，当它的值为 ~border-box~ 时，包含。

   可以参考：
   + [[https://stackoverflow.com/questions/4698054/css-does-the-width-include-the-padding][CSS does the width include the padding? - Stack Overflow]]
   + [[https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing][box-sizing - CSS：层叠样式表 | MDN]]

** 怎样让超出范围的文本显示为省略号
   + Single line text overflow shows ellipsis.
     #+BEGIN_SRC css
       div {
         overflow: hidden;
         text-overflow: ellipsis;
         white-space: nowrap;
       }
     #+END_SRC

   + Multi-line text overflow showing ellipsis.
     #+BEGIN_SRC css
       div {
         display: -webkit-box;
         -webkit-box-orient: vertical;
         -webkit-line-clamp: 3;
         overflow: hidden;
       }
     #+END_SRC

** 怎样让文本居中显示
   #+BEGIN_SRC css
     div {
       height: 20px;
       line-height: 20px;
     }
   #+END_SRC

** 怎样在打印时去除 href
   #+begin_src html
     <style media="print">
       @media print {
       a[href]:after {
       content: none !important;
       }
       }
     </style>
   #+end_src

   参考：
   + [[https://stackoverflow.com/questions/7301989/need-to-remove-href-values-when-printing-in-chrome][css - Need to remove href values when printing in Chrome - Stack Overflow]]

** SCSS/Sass 和 Less 之间的区别
   Sass 是一种动态样式语言，语法属于缩排语法，比 CSS 多出好些功能，更容易阅读。

   Sass 的缩排语法，对于写惯 CSS 前端的 WEB 开发者来说很不直观，也不能将 CSS 代码加入到 Sass 里面，因此 Sass 语法进行了改良，
   Sass 3 就变成了 SCSS。与原来的语法兼容，只是用 {} 取代了原来的缩进。

   Less 也是一种动态样式语言。对 CSS 赋予了动态语言的特性，Less 既可以在客户端上运行 (支持IE 6+, Webkit, Firefox)，也可在服务端运行 (借助 Node.js)。

   Sass/SCSS 和 Less 的编译环境是不一样的，Sass/SCSS 需要借助 Ruby 环境，而 Less 只需要 Less.js。因此，在实际的使用中，Less 相对来说更为容易操作。

   参考：
   + [[https://www.cnblogs.com/wangpenghui522/p/5467560.html][sass/scss 和 less的区别 - 孤舟蓑翁 - 博客园]]

** 文本的溢出、折行和断词问题
  CSS 将 DOM 树转换为由矩形 Box 构成的树，并通过设置这些 Box 的属性来改变其位置和大小，描述每个元素或文本的布局。

  其中较为特殊的级别是 ~Line Box~ 这个级别，这种 Box 是自动生成的，溢出、折行、断词是 Line Box 中常见的问题，这些问题可以通过一些 CSS 属性进行控制。

  参考：
  + [[https://harttle.land/2015/06/12/css-line-wrap.html#header-2][CSS Line Box：溢出与折行 | Harttle Land]]

