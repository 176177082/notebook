#+TITLE:      相关问题

* 目录                                                    :TOC_4_gh:noexport:
- [[#动态加载-css-和-javascript][动态加载 CSS 和 JavaScript]]
- [[#shim-和-polyfill-是什么意思][Shim 和 Polyfill 是什么意思]]
- [[#前端路由的实现原理][前端路由的实现原理]]
- [[#url-编码的问题][URL 编码的问题]]
- [[#怎样获取一个元素的所有事件监听器][怎样获取一个元素的所有事件监听器]]
- [[#前端工具链][前端工具链]]

* 动态加载 CSS 和 JavaScript
  我们可以利用浏览器的特性来动态加载 CSS 和 JavaScript，当我们动态添加 ~script~ 或 ~style~ 标签到 DOM 中时，浏览器如果发现该标签需要加载远程资源，
  那么就会自动去下载。

  通过这种方式，可以动态加载 CSS 和 JavaScript 脚本。

  使用场景：前端框架固定的情况下，各个部分只是需要单独编写框架组件的情况。这时，便可以将框架单独部署，然后组件编译好后发布到分布式文件系统。

  当框架需要组件时，便可以根据模块到分布式文件系统获取组件文件路径动态加载。

  参考：
  + [[https://juejin.im/entry/59c128255188257e6e2628e4][动态加载 js css 插件 - 前端 - 掘金]]

* Shim 和 Polyfill 是什么意思
  + Shim - 一个 Shim 是一个库，它将一个新的 API 引入到一个旧的环境中，而且仅靠旧环境中已有的手段实现
  + Polyfill - 一个 Polyfill 相当于是一个用在浏览器 API 上的 Shim，提供在旧环境中的浏览器原生 API 实现

* 前端路由的实现原理
  直接修改 ~window.location~ 属性时会导致网页的重新加载，为了避免这样情况的方式，前端路由使用了两种方式来实现：
  + 通过 URL Hash 来实现，即通过修改 ~#fragment~ 来达到路由跳转的效果，由于存在 ~hashchange~ 事件，还可以通过监听 Hash 的改变来进行操作
  + 通过 HTML5 History 接口来实现，虽然 URL Hash 兼容性好，但是拿来做路由的话，原来的锚点功能就不能用了。其次，hash 的传参是基于 url 的，如果要传递复杂的数据，会有体积的限制。
    因此，通过 HTML5 History 接口可以得到更好看的 URL。

  参考：
  + [[https://stackoverflow.com/questions/824349/how-do-i-modify-the-url-without-reloading-the-page][javascript - How do I modify the URL without reloading the page? - Stack Overflow]]
  + [[https://www.cnblogs.com/JRliu/p/9025290.html][前端路由的两种模式：hash 模式和 history 模式 - mr_lao - 博客园]]

* URL 编码的问题
  前端可以通过 ~escape~, ~encodeURI~ 和 ~encodeURIComponent~ 对 URL 字符进行编码，其中：
  + ~escape~ 在处理 ~0xff~ 之外字符的时候，是直接使用字符的 ~unicode~ 在前面加上一个 ~%u~
  + ~encodeURI~ 和 ~encodeURIComponent~ 是在 ~UTF-8~ 的每个字节码前加上一个 ~%~
  + ~encodeURI~ 是 ~W3C~ 的标准，而 ~escape~ 是非标准

  各自不会转译的字符：
  #+begin_src js
    // escape
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    "*@-_+./"

    // encodeURI
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    "-_.!~*'();/?:@&=+$,#"

    // encodeURIComponent
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    ",/?:@&=+$#"
  #+end_src
  
  参考：
  + [[https://aotu.io/notes/2017/06/15/The-mystery-of-URL-encoding/index.html][URL编码的奥秘 | Aotu.io「凹凸实验室」]]
  + [[https://tools.ietf.org/html/rfc3986][RFC 3986 - Uniform Resource Identifier (URI): Generic Syntax]]

* 怎样获取一个元素的所有事件监听器
  在 Chrome DevTools 中可以通过函数 ~getEventListeners(node)~ 获取所有的监听器，参考：
  + [[https://stackoverflow.com/questions/9046741/get-event-listeners-attached-to-node-using-addeventlistener][javascript - Get event listeners attached to node using addEventListener - Stack Overflow]]

* 前端工具链
  似乎是由于前端应用场景的复杂性，前端的工具链也很复杂，和刚开始学习前端的时候 =HTML/CSS/JavaScript= 一把梭不一样，
  现在前端的工具链在某种程度上已经将 *开发环境* 和 *应用环境* 给区分开了。

  在开发环境中，对于 =JavaScript= 来说：
  + 它的宿主环境可能是不一样的，有可能是浏览器，也有可能是 =node.js=
  + 使用的语言标准可能是不一样的，比如 =ES5= 和 =ES6= 之类的
  + 使用的模块标准可能是不一样的，比如 =CommonJS= 和 =AMD= 之类的
  + 使用的依赖版本可能是不一样的
  + ……

  甚至，对于 =HTML/CSS= 来说，都有可能存在不同的 *预处理器* 来简化编写时的复杂度。

  这使得开发环境和应用环境之间存在巨大的区别，未来去掉这个区别，需要很多工具来将编写的代码转换为应用环境可以识别的代码。

  这些工具的使用通常是建立在 =node.js= 环境上的（虽然也可以直接在目标环境中使用），其中：
  + =npm= 是一个包管理器，运行在 =node.js= 的基础上，通过一系列的包增强功能
  + =webpack= 是一个打包工具，可以通过各种扩展将代码转换打包，并可以自动适配不同的模块标准
  + =babel= 是一个工具，可以将 =ES6= 的代码转换到 =ES5= 等等
  + ……

  在这些工具的基础上，前端的开发部署流程变成了：
  #+begin_example
    开发 -> 打包 -> 部署
  #+end_example
    
  在打包过程中，需要完成代码的转换工作，然后才能部署到生成环境使用。

  原本的前端的话，HTML/CSS/JavaScript 都不需要编译，写好直接打开就行了，现在的话，变得需要 *编译* 了一样。
  
  #+begin_comment
  感觉 deno 可以在一定程度上解决这个复杂性……
  #+end_comment

