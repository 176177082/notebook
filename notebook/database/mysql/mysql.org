#+TITLE:      MySQL

* 目录                                                    :TOC_4_gh:noexport:
- [[#install][Install]]
- [[#innodb-锁][InnoDB 锁]]
- [[#事务相关][事务相关]]
  - [[#事务的隔离级别][事务的隔离级别]]
  - [[#多版本并发控制][多版本并发控制]]
- [[#执行计划][执行计划]]
- [[#sql-优化][SQL 优化]]
  - [[#索引类型][索引类型]]
  - [[#最左前缀匹配规则][最左前缀匹配规则]]
  - [[#distinct--group-by][distinct & group by]]
  - [[#null][NULL]]
- [[#sql-语法][SQL 语法]]
  - [[#sql-子查询][SQL 子查询]]
  - [[#注意事项][注意事项]]
- [[#主从复制][主从复制]]
- [[#分区相关][分区相关]]
- [[#函数使用][函数使用]]
- [[#相关技巧][相关技巧]]
  - [[#通过-sql-语句获取-mysql-的版本][通过 SQL 语句获取 MySQL 的版本]]
  - [[#mysql-中实用的时间函数][MySQL 中实用的时间函数]]
  - [[#按列打印查询结果][按列打印查询结果]]
  - [[#根据相对时间进行查询][根据相对时间进行查询]]

* Install
  目前来说，有一些 Linux 发行版已经将 MySQL 换成了 MariaDB，安装方式也就变成了：
  #+BEGIN_SRC bash
    apt-get install mariadb-server
  #+END_SRC
  
  安装完成后，可以通过 ~mysql_secure_installation~ 配置 root 用户的密码，参考：
  + [[https://mariadb.com/kb/en/library/mysql_secure_installation/][mysql_secure_installation - MariaDB Knowledge Base]]
  
* InnoDB 锁
  MySQL 中的锁大致可以分为两类：
  + 共享锁：当一个事务 T1 持有共享锁时，另一个事务 T2 请求共享锁可以成功，请求排它锁会阻塞
  + 排它锁：当一个事务 T1 持有排它锁时，另一个事务 T2 请求任意的锁类型都会阻塞

  通常，执行数据库操作时，可以通过 ~SELECT ... LOCK IN SHARE MODE~ 添加共享锁，通过 ~SELECT ... FOR UPDATE~ 添加排它锁，需要注意的是：
  + 当查询语句命中索引时添加的是行锁，没有命中索引时添加的是表锁
  + 当查询语句查询索引范围时会添加间隙锁，即锁住该索引范围下的行
  + 对于 UPDATE、DELETE 和 INSERT 语句，InnoDB 会自动给涉及数据集加排他锁

  然而，官方文档中似乎没有行锁和表锁这种说法，但大致上的意思还是差不多的……

  参考文档：
  + [[https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html][MySQL 5.7 Reference Manual - 14.7.1 InnoDB Locking]]
  + [[https://juejin.im/post/5b82e0196fb9a019f47d1823#comment][全面了解 MySQL 锁机制（InnoDB）与问题排查 - 掘金]]
  + [[https://www.cnblogs.com/chenpingzhao/p/9642732.html][不可不知的 Metadata Lock - 踏雪无痕SS - 博客园]]

* 事务相关
  事务的基本要素为：
  + 原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用
  + 一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的
  + 隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的
  + 持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响

  并发事务可能带来的问题：
  + 脏读：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。
    因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。
  + 丢失修改：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。
    这样第一个事务内的修改结果就被丢失，因此称为丢失修改。
  + 不可重复读：指在 *一个事务* 内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，
    由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。
  + 幻读：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，
    就好像发生了幻觉一样，所以称为幻读。

  不可重复度和幻读区别：不可重复读的重点是修改，幻读的重点在于新增或者删除。

** 事务的隔离级别
   SQL 标准定义了四个隔离级别：
   + READ-UNCOMMITTED(读取未提交)：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读
   + READ-COMMITTED(读取已提交)：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生
   + REPEATABLE-READ(可重复读)：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生
   + SERIALIZABLE(可串行化)：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读

   四个隔离级别对应的封锁协议：
   + 一级封锁协议，事务 T 在修改数据 R 之前必须先对其加 X 锁，直到事务结束才释放
   + 二级封锁协议是：一级封锁协议加上事务 T 在读取数据 R 之前必须先对其加 S 锁，读完后即可释放 S 锁
   + 三级封锁协议是：一级封锁协议加上事务 T 在读取数据 R 之前必须先对其加 S 锁，直到事务结束才释放
   + 四级封锁协议是对三级封锁协议的增强，其实现机制也最为简单，直接对事务中所 *读取* 或者 *更改* 的数据所在的表加表锁，也就是说，
     其他事务不能读写该表中的任何数据

   各自可以避免的并发问题：
   |------------------+------+------+------------+------|
   | 隔离级别         | 缩写 | 脏读 | 不可重复读 | 幻读 |
   |------------------+------+------+------------+------|
   | READ-UNCOMMITTED | RU   | Y    | Y          | Y    |
   | READ-COMMITTED   | RC   | N    | Y          | Y    |
   | REPEATABLE-READ  | RR   | N    | N          | Y    |
   | SERIALIZABLE     |      | Y    | Y          | Y    |
   |------------------+------+------+------------+------|

   MySQL InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重复读），利用了 MVCC 进行实现。

   参考链接：
   + [[https://github.com/Snailclimb/JavaGuide/blob/master/docs/database/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB(%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3).md][事务隔离级别(图文详解)]]
   + [[https://www.cnblogs.com/huanongying/p/7021555.html][MySQL 的四种事务隔离级别 - 花弄影 - 博客园]]
   + [[https://blog.csdn.net/zhangzeyuaaa/article/details/46400419][数据库并发的五个问题以及四级封锁协议与事务隔离的四个级别_数据库_似水流年-CSDN博客]]

** 多版本并发控制
   在 InnoDB 中，MVCC 在 RC 和 RR 隔离级别下是借助 consistent read view（一致读视图）实现的。

   所谓 consistent read view 就是在某一时刻给事务系统 trx_sys 打 snapshot，把当时 trx_sys 状态记下来，之后的所有读操作根据其事务 ID（即 trx_id）与 snapshot 中的 trx_sys 的状态作比较，
   以此判断 read view 对于事务的可见性。
   
   其中，read view 记录的数据有：
   + ~low_limit_id~ - 创建 ~read view~ 那一刻 *活跃* 的事务列表的 *最大* 的事务 ID
   + ~up_limit_id~ - 创建 ~read view~ 那一刻活跃的事务列表的 *最小* 的事务 ID
   + ~trx_ids~ - 创建 ~read view~ 那一刻所有的活跃事务列表

   根据 ~read view~ 可以将所有事务分为三组：
   + ~trx_id < up_limit_id~ - 创建 ~read view~ 时已经提交了的事务
   + ~up_limit_id <= trx_id <= low_limit_id~ - 创建 ~read view~ 时正常执行的事务
   + ~trx_id > low_limit_id~ - 创建 ~read view~ 时还未创建的事务

   此时，我们可以根据 ~read view~ 来判断行记录的可见性：
   1. 当记录的 ~DATA_TRX_ID~ 小于 ~read vew~ 的 ~up_limit_id~ 时说明该记录在创建 ~read view~ 之前就已经提交，记录可见
   2. 如果记录的 ~DATA_TRX_ID~ 和事务创建者的 ~TRX_ID~ 一样时，记录可见
   3. 当记录的 ~DATA_TRX_ID~ 大于 ~read vew~ 的 ~up_limit_id~ 时，说明该记录在创建 ~read view~ 之后进行的新建事务修改提交的，记录不可见
   4. 如果记录对应的 ~DATA_TRX_ID~ 在 ~read view~ 的 ~trx_ids~ 里面，那么该记录也是不可见的

   其中：
   + ~RC~ 级别，每次执行 ~SELECT~ 时都会创建 read view，这就使得事务能够读取到其他事务对某一行的修改，导致不可重复读
   + ~RR~ 级别，只在事务开始之前创建 read view，实现了可重复读

   行记录的三个隐藏列：
   + DATA_ROW_ID: 如果表没有显示定义主键，则采用 MySQL 自己生成的 ROW_ID，为 48-bit，否则表示的是用户自定义的主键值
   + DATA_TRX_ID: 表示这条记录的事务 ID
   + DATA_ROLL_PTR: 指向对应的回滚段的指针

   当通过 ~read view~ 判断该行记录对于当前事务不可见时，就可以通过 ~DATA_ROLL_PTR~ 从 ~undo log~ 找到之前的数据记录，从新进行判断，
   直到数据为空或可见。
   
   参考：
   + [[https://segmentfault.com/a/1190000012650596][MySQL-InnoDB-MVCC 多版本并发控制 - 编程空间 - SegmentFault 思否]]
   + [[https://tech.youzan.com/-ci-da-liang-shan-chu-dao-zhi-mysqlman-cha-de-fen-xi/][一次大量删除导致 MySQL 慢查的分析]]
   + [[https://rgb-24bit.github.io/blog/2020/mysql-mvcc.html][MySQL MVCC - 多版本并发控制]]

* 执行计划
  MySQL 数据库索引使用的是 B+ 树结构，我们查询数据时，查询条件命中索引时，查询效率会特别高，如果没有命中索引，此时，则会全表扫描，耗时且消耗性能。

  通过执行计划，我们可以得知一条 SQL 语句执行下来，这个 SQL 分别查询了哪些表，先查询的哪张表后查询的哪张表，以及是否使用了索引，使用了哪些索引，
  当前 SQL 语句查询效率是否高效，这些数据从哪获取到。

  通过在 SQL 语句前，添加 explain 关键字，MySQL 会在查询上设置一个标记，执行查询时，会返回执行计划的信息，而不是执行这一条 SQL 语句。

  返回的执行计划的信息格式如下：
  #+begin_example
    +----+-------------+-------+------------+-------+---------------+---------+---------+--------+------+----------+-------------+
    | id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref    | rows | filtered | Extra       |
    +----+-------------+-------+------------+-------+---------------+---------+---------+--------+------+----------+-------------+
    | 1  | SIMPLE      | order | <null>     | index | <null>        | PRIMARY | 8       | <null> | 51   | 100.0    | Using index |
    +----+-------------+-------+------------+-------+---------------+---------+---------+--------+------+----------+-------------+
  #+end_example

  其中，各字段的含义如下：
  + id：查询 SQL 语句 id，当有多个查询时，将拆分为多个执行计划，每个执行计划都有一个 id，id是 SQL 执行成功的标识，SQL 从大到小的执行，id 越大越先执行。
    当 id 相同的情况时，执行顺序由上至下。
  + select_type：查询类型，MYSQL 中一共有 8 中查询类型，主要作用是用来标记查询类型，比如：普通查询、关联查询、子查询、左查询等
  + table：当前执行计划查询的表，如果给表起别名了，则显示别名信息
  + partitions:：访问的分区表信息
  + type：查询方式，即 MYSQL 如何去查找的表中的行，查询方式是 SQL 优化中一个很重要的指标，结果值从好到坏依次是：system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL。
    |--------+--------------------------------------------------------------------------------------------------------------|
    | 类型   | 含义                                                                                                         |
    |--------+--------------------------------------------------------------------------------------------------------------|
    | system | 表中只有一行数据，此时根据索引查询一次就能找到                                                               |
    | const  | SQL 查询时根据索引一次就找到了，此时会显示为 const                                                           |
    | eq_ref | 唯一索引扫描，常见于主键和唯一索引扫描，索引在表中只对应一条记录                                             |
    | ref    | 与 eq_ref 相比，ref 常见于非唯一索引扫描，通常能扫描到多条记录，还可见于唯一索引最左原则匹配扫描也会出现 ref |
    | range  | 通常见于范围扫描，比如：in、大于小于等。索引根据给定范围进行检索                                             |
    | index  | 索引全表扫描，此时扫描只扫描索引树，非数据库表                                                               |
    | All    | 全表扫描                                                                                                     |
    |--------+--------------------------------------------------------------------------------------------------------------|
  + possible_keys：可能使用到的索引
  + key：实际使用到的索引
  + key_len：当前使用的索引的长度
  + ref：关联 id 等信息
  + rows：查找到记录所扫描的行数
  + filtered：查找到所需记录所占总扫描记录数比例
  + Extra：额外的信息

* SQL 优化
** 索引类型
   MySQL 中建表时就创建索引的语法为：
   #+begin_example
     CREATE TABLE table_name[col_name data type]
     [unique|fulltext][index|key][index_name](col_name[length])[asc|desc]
   #+end_example

   各部分的含义为：
   1. ~[unique|fulltext]~ - 可选，分别表示唯一索引、全文索引
   2. ~[index|key]~ - 两者作用相同，用来指定创建索引
   3. ~[index_name]~ - 索引名称
   4. ~(col_name[length])~ - 索引包含的字段及字段长度，其中长度是可选值
   5. ~[asc|desc]~ - 指定按升序或降序存储索引值

   具体的类型包括：
   + 普通索引，数据结构为 ~B+~ 树
     #+begin_src sql
       CREATE INDEX index_name ON table(column(length));
     #+end_src
   + 唯一索引，索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一
     #+begin_src sql
       CREATE UNIQUE INDEX indexName ON table(column(length));
     #+end_src
   + 主键索引，是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值
   + 组合索引，指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用
   + 全文索引，主要用来查找文本中的关键字，而不是直接与索引中的值相比较

   索引的优点为：
   1. 减少服务器需要扫描的数据量
   2. 帮助服务器避免排序和临时表
   3. 将随机 I/O 变为顺序 I/O

   三星索引划分：
   1. ✦ 索引将相关的记录放在一起
   2. ✦✦ 索引中的数据顺序和查找中的顺序一致
   3. ✦✦✦ 索引包含了查询中需要的全部列

   参考：
   + [[https://www.cnblogs.com/luyucheng/p/6289714.html][MySQL 索引类型 - 成九 - 博客园]]

** 最左前缀匹配规则
   对于联合索引 ~(c1, c2, c3)~ 来说，查询条件 ~(c1, c3)~ 也是可以使用 ~c1~ 上的索引进行查询的。

** distinct & group by
   distinct 和 group by 都是可以通过 index 进行优化的，对于 distinct 来说，查询过程中也会进行一次 group by，
   因此，使用索引时，会在执行计划的 Extra 中显示「Using index for group-by」。

   但是，在没有索引的时候，就需要进行全表扫描，因此，需要注意使用 distinct 和 group by。
   
** NULL
   IS NULL 可以走索引，但是 IS NOT NULL 是走不了索引的，因此，对于 NULL 列的查询需要注意下。
   
* SQL 语法
** SQL 子查询
   子查询可以分为嵌套子查询和相关子查询，对于嵌套子查询来说，整个查询过程中只执行一次，而相关子查询，由于需要使用外部查询中的字段，
   因此对于每一行数据都需要执行一次相关子查询。

   参考：
   + [[https://www.geeksforgeeks.org/sql-correlated-subqueries/][SQL Correlated Subqueries - GeeksforGeeks]]

   另外，在 MySQL 中子查询存在的一个限制，不能再更新语句的子查询中使用和外部表相同的子查询：
   #+begin_src sql
     DELETE FROM t WHERE ... (SELECT ... FROM t ...);
     UPDATE t ... WHERE col = (SELECT ... FROM t ...);
     {INSERT|REPLACE} INTO t (SELECT ... FROM t ...);
   #+end_src

   但是可以通过将子查询的结果转换为临时表的方式绕开这一限制：
   #+begin_src sql
     UPDATE t ... WHERE col = (SELECT * FROM (SELECT ... FROM t...) AS dt ...);
   #+end_src

   子查询相关的关键字有 =any/some/all/in= 这几个，可以用来扩展查询语句。

   参考：
   + [[https://dev.mysql.com/doc/refman/8.0/en/subquery-restrictions.html][MySQL 8.0 Reference Manual - 13.2.11.13 Restrictions on Subqueries]]

** 注意事项  
   + 在 MySQL 中 LIMIT 不是子句，因此需要放在 ORDER BY 子句后面

* 主从复制
  主写从读，主库的数据库引擎应该为 InnoDB，从库为 MyISAM。

* 分区相关
  MySQL 分区可以通过将表中的数据按照某些特征分到多个区块中。分区后，单个分区中的数据量会减少，索引的层级也会缩减，单个分区的查询的速度也可以得到相应的提高。

  参考文章 [[https://www.vertabelo.com/blog/everything-you-need-to-know-about-mysql-partitions/][Vertabelo Database Modeler]] 前面几节，可以了解到分区的好处：
  + 可以在一个表中存储比在单个磁盘或文件系统分区上保存的数据更多的数据
  + 删除无用的分区几乎是即时的，但在非常大的表中运行的经典 DELETE 查询可能需要几分钟
  + 查询时排除不匹配的分区可以提高查询的速度
  + ……

  而 MySQL 也提供了多种方式来进行分区，可以参考：
  + [[https://learnku.com/articles/22947][MySQL 分区表探索 | MySQL 技术社区]]

* 函数使用
  + 函数 ~CONCAT~ 的参数中存在 ~NULL~ 时得出的值也是 ~NULL~
  + 函数 ~GROUP_CONCAT~ 的复杂使用：
    #+begin_example
      GROUP_CONCAT([DISTINCT] expr [,expr ...]
                   [ORDER BY {unsigned_integer | col_name | expr}
                       [ASC | DESC] [,col_name ...]]
                   [SEPARATOR str_val])
    #+end_example
    
    比如说：
    #+begin_src sql
      SELECT
        GROUP_CONCAT(
          DISTINCT name
          ORDER BY id
          SEPARATOR '-'
        )
        FROM tbl_user
       GROUP BY address;
    #+end_src
  + 函数 ~CAST~ 和 ~CONVERT~ 可以用来将转换任意类型的数据到另一类型

* 相关技巧
** 通过 SQL 语句获取 MySQL 的版本
   这只需要执行 ~SELECT VERSION()~ 就可以获得 MySQL 的版本信息，很简单。

** MySQL 中实用的时间函数   
   MySQL 中的时间函数其实还是很强大的，能够满足相当一部分需求了，参考：
   + [[https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html][MySQL 8.0 Reference Manual - 12.7 Date and Time Functions]]
   + [[https://www.cnblogs.com/redfox241/archive/2009/07/23/1529092.html][mysql 中 时间和日期函数 - redfox - 博客园]] 

** 按列打印查询结果
   通过 =\G= 选项可以按列打印查询结果：
   #+begin_src sql
     select * from tbl_name \G;
   #+end_src

** 根据相对时间进行查询 
   距离现在相差超过 90 天的数据：
   #+begin_src sql
     SELECT * FROM tbl_name WHERE tbl_field <= (NOW() - INTERVAL 90 DAY)
   #+end_src
   
   参考：
   + [[https://stackoverflow.com/questions/3906361/mysql-query-date-90-days][php - Mysql Query date >= 90 days - Stack Overflow]]

