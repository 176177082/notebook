#+TITLE:      Standard SQL

* 目录                                                    :TOC_4_gh:noexport:
- [[#sql-注意事项][SQL 注意事项]]
- [[#sql-样式指南][SQL 样式指南]]
- [[#sql-使用技巧][SQL 使用技巧]]
  - [[#通过-select-语句进行简单的测试][通过 SELECT 语句进行简单的测试]]
  - [[#通过-truncate-语句来删除表中的所有行][通过 TRUNCATE 语句来删除表中的所有行]]
  - [[#通过-insert-select-语句快速插入数据][通过 INSERT SELECT 语句快速插入数据]]
- [[#sql-问题集][SQL 问题集]]
  - [[#sql-查询语句的子句顺序][SQL 查询语句的子句顺序]]
  - [[#等值连接和内连接之间的关系][等值连接和内连接之间的关系]]

* SQL 注意事项
  + 在使用 ~ORDER BY~ 子句进行排序时需要注意：
    1) ~ORDER BY~ 一定是 ~SELECT~ 语句的最后一个子句
    2) 降序排列时 ~DESC~ 关键字值作用于单个列

  + 在使用 *子查询* 时需要注意：作为子查询的 SELECT 语句只能查询 *单个列*

  + 在使用 ~GROUP BY~ 进行分组时需要注意：
    1) 除聚集计算语句外，SELECT 语句中的每一列都必须在 GROUP BY 子句中给出
    2) 如果分组列中包含具有 NULL 值的行，则 NULL 将作为一个分组返回
    3) WHERE 在数据分组前进行过滤，HAVING 在数据分组后进行过滤
    4) HAVING 支持所有 WHERE 操作符
    5) GROUP BY 子句必须出现在 WHERE 子句之后，ORDER BY 子句之前

  + 在使用 SQL *函数* 的时候需要注意：
    1) 使用函数可能会不利于数据库的迁移
    2) 数值函数在各个数据库中的实现相对统一：ABS、COS、EXP、PI、SIN、SQRT、TAN
    3) 聚集函数在各个数据库中的实现相对统一：AVG、COUNT、MAX、MIN、SUM
    4) AVG、MIN、MAX、SUM 忽略 NULL 值
    5) COUNT(*) 不忽略 NULL 值，COUNT(column) 忽略
    6) 在指定别名以包含某个聚集函数的结果时，不应该使用表中实际的列名
    7) 指定 DISTINCT 的方式：COUNT(DISTINCT column)

  + 在使用 *视图* 时需要注意：
    1) 通常 DMBS 都禁止早视图中添加 ORDER BY 语句
    2) 不要把视图当做表使用，因为它的效率很低

  + 在使用 *索引* 时需要注意：
    1) 主键数据总是排序的，因此，按主键检索特定行总是一种快速有效的操作
    2) 可以在一个或多个列上定义索引，使 DBMS 保存其内容的一个排过序的列表
    3) 索引改善检索操作的性能，但降低了数据插入、修改和删除的性能
    4) 索引数据可能要占用大量的存储空间

* SQL 样式指南
  + SQL 关键字使用大写，而对列名和表名使用小写，这样做使代码更易于阅读和调试

  #+BEGIN_SRC sql
    (SELECT f.species_name,
            AVG(f.height) AS average_height, AVG(f.diameter) AS average_diameter
       FROM flora AS f
      WHERE f.species_name = 'Banksia'
         OR f.species_name = 'Sheoak'
         OR f.species_name = 'Wattle'
      GROUP BY f.species_name, f.observation_date)

      UNION ALL

    (SELECT b.species_name,
            AVG(b.height) AS average_height, AVG(b.diameter) AS average_diameter
       FROM botanic_garden_flora AS b
      WHERE b.species_name = 'Banksia'
         OR b.species_name = 'Sheoak'
         OR b.species_name = 'Wattle'
      GROUP BY b.species_name, b.observation_date)
  #+END_SRC

  完整文档: [[http://www.sqlstyle.guide/zh/][SQL 样式指南 · SQL Style Guide]]

* SQL 使用技巧
** 通过 SELECT 语句进行简单的测试
   SELECT 子句如果省略 FROM 子句可以用来直接执行一些表达式和函数：
   #+BEGIN_SRC sql
     sqlite> select date();
     2019-03-26
   #+END_SRC

** 通过 TRUNCATE 语句来删除表中的所有行
   通过 TRUNCATE 语句来删除表中的所有行比使用 DELETE 语句更快：
   #+BEGIN_SRC sql
     TRUNCATE tbl;
   #+END_SRC

** 通过 INSERT SELECT 语句快速插入数据
   INSERT SELECT 语句可以从另一个表中获取数据插入另一个表：
   #+BEGIN_SRC sql
     INSERT INTO tbl SELECT * FROM tbl WHERE ...;
   #+END_SRC

   同时，可以利用如下语句在运行中创建表：
   #+BEGIN_SRC sql
     SELECT * INTO newtbl FROM oldtbl;
   #+END_SRC

   只不过不同的数据库支持不一样。

* SQL 问题集
** SQL 查询语句的子句顺序
   #+BEGIN_SRC sql
     SELECT ...
       FROM ...
      WHERE ...
      GROUP BY ...
      ORDER BY ...;
   #+END_SRC

   语句执行顺序：
   1. 根据 FROM 子句指定的表获取数据
   2. 根据 WHERE 子句筛选数据
   3. 根据 GROUP BY 子句对数据分组
   4. 根据 ORDER BY 子句对数据排序
   5. 根据 SELECT 子句返回查询结果

** 等值连接和内连接之间的关系
   两者实际上是同一种连接，只是写法不同：
   #+BEGIN_SRC sql
     SELECT * FROM tbl1, tbl2 WHERE tbl1.xxx = tbl2.xxx;
     SELECT * FROM tbl1 INNER JOIN tbl2 ON tbl1.xxx = tbl2.xxx;
   #+END_SRC

   其中，ANSI SQL 规范首选 INNER JOIN 的写法，但是有时另一种更方便：
   #+BEGIN_SRC sql
     SELECT cust_name, cust_contact
       FROM Customers AS C, Orders AS O, OrderItems AS OI
      WHERE C.cust_id = O.cust_id
        AND OI.order_num = O.order_num
        AND prod_id = 'RGAN01';

     SELECT cust_name, cust_contact
       FROM Customers AS C
              INNER JOIN Orders AS O
                  ON C.cust_id = O.cust_id
              INNER JOIN OrderItems AS OI
                  ON OI.order_num = O.order_num;
   #+END_SRC

