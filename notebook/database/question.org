#+TITLE:      通用问题集

* 目录                                                    :TOC_4_gh:noexport:
- [[#为什么要使用自增的-id-主键][为什么要使用自增的 ID 主键]]
- [[#用户表的设计问题][用户表的设计问题]]
- [[#redismongodb-和-memcache-的区别][Redis、MongoDB 和 Memcache 的区别]]
- [[#常用数据库][常用数据库]]

* 为什么要使用自增的 ID 主键
  1. 可以节省存储
  2. 习惯
  3. 整数字段做主键更加易于分表
  4. 自增主键比起字符串做索引，效率更高
  5. 易于扩展
     
  参考链接：
  + [[https://stackoverflow.com/questions/15777142/why-we-should-have-an-id-column-in-the-table-of-users][mysql - Why we should have an ID column in the table of users? - Stack Overflow]]
  + [[https://softwareengineering.stackexchange.com/questions/328458/is-it-good-practice-to-always-have-an-autoincrement-integer-primary-key][design - Is it good practice to always have an autoincrement integer primary key? - Software Engineering Stack Exchange]]

* 用户表的设计问题
  主要的问题便是是否需要将用户和用户的个人信息保存在不同的表中，查阅相关资料可以发现，这个问题没有固定的答案。

  当用户表比较小的时候，可以考虑就用一张表保存所有信息反之，当表很大的时候可以考虑分割用户表。

  参考链接：
  + [[https://softwareengineering.stackexchange.com/questions/241089/keep-user-and-user-profile-in-different-tables][database - Keep user and user profile in different tables? - Software Engineering Stack Exchange]]

* Redis、MongoDB 和 Memcache 的区别
  参考链接：
  + [[https://www.cnblogs.com/tuyile006/p/6382062.html][Redis、Memcache 和 MongoDB 的区别 - 小y - 博客园]]

* 常用数据库
  常常用 Mysql、Redis 和 Mongodb 做存储层，Hadoop 和 Spark 做大数据分析，其中：
  + Mysql 适合结构化数据，类似 Excel 表格一样定义严格的数据，用于数据量中，速度一般支持事务处理场合
  + Redis 适合缓存内存对象，如缓存队列，用于数据量小，速度快不支持事务处理高并发场合
  + Mongodb 适合半结构化数据，如文本信息，用于数据量大，速度较快不支持事务处理场合
  + Hadoop 是个生态系统，上面有大数据分析很多组件，适合事后大数据分析任务
  + Spark 类似 Hadoop，偏向于内存计算，流计算，适合实时半实时大数据分析任务

  参考：[[https://www.zhihu.com/question/19882468/answer/213187521][怎样学 MongoDB？ - find goo的回答 - 知乎]]

