#+TITLE:      并发编程

* 目录                                                    :TOC_4_gh:noexport:
- [[#进程和线程][进程和线程]]
  - [[#进程间通信-ipc][进程间通信 IPC]]
  - [[#进程的状态][进程的状态]]
- [[#锁相关][锁相关]]
  - [[#乐观锁与悲观锁][乐观锁与悲观锁]]
  - [[#死锁][死锁]]
- [[#同步相关][同步相关]]

* 进程和线程
  进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。

  线程可以看做是进程的一个实体，是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位，线程自己基本上不拥有系统资源，
  只拥有一点在运行中必不可少的资源（如程序计数器,一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。

  区别：
  1. 进程是运行中的程序，线程是进程的内部的一个执行序列
  2. 进程是资源分配的单元，线程是执行行单元
  3. 进程间切换代价大，线程间切换代价小
  4. 进程拥有资源多，线程拥有资源少
  5. 多个线程共享进程的资源

  进程上下文：
  + CPU 寄存器中的值，进程的状态以及堆栈上的内容

  线程上下文：
  + CPU 寄存器中的值

  参考：
  + [[https://www.nowcoder.com/questionTerminal/234895a70e0b40e19db7f3fbaabc5fa3][进程和线程的区别是什么？__牛客网]]

** 进程间通信 IPC
   每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，
   进程 1 把数据从用户空间拷到内核缓冲区，进程 2 再从内核缓冲区把数据读走，内核提供的这种机制称为进程间通信 IPC。

   主要通信方式有：
   + 匿名管道，只支持具有亲缘关系的进程之间的通信
   + 命名管道，以文件形式存在于文件系统中
   + 信号
   + 消息队列
   + 共享内存
   + 信号量
   + 套接字

   参考：
   + [[https://www.jianshu.com/p/c1015f5ffa74][进程间通信 IPC (InterProcess Communication) - 简书]]

** 进程的状态
   + 三态模型：就绪、运行、阻塞
   + 五态模型：新建、终止、运行、就绪、阻塞

* 锁相关
** 乐观锁与悲观锁
   乐观锁与悲观锁的概念：
   + 总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁
   + 总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和 CAS 算法实现

   对于这两种锁来说，乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，
   一般会经常产生冲突，这就会导致上层应用会不断的进行 retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。

   乐观锁常见的两种实现方式：
   + 版本号机制：每次拿数据时获得一个版本号，操作完成后更新时判断版本号是否相同在进行更新
   + CAS 算法：通过原子操作 *比较旧值-赋新值* 完成数据的更新操作，当 *比较* 操作失败时，就不断的通过自旋操作重试
     
   乐观锁的问题：
   + ABA 问题：如果一个变量 V 初次读取的时候是 A 值，并且在准备赋值的时候检查到它仍然是 A 值，那我们就能说明它的值没有被其他线程修改过了吗？
   + 循环时间长开销大：自旋 CAS 如果长时间不成功，会给 CPU 带来非常大的执行开销
   + 只能保证一个共享变量的原子操作：CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效

   参考：
   + [[https://www.cnblogs.com/Mainz/p/3546347.html][非阻塞同步算法与 CAS(Compare and Swap)无锁算法 - Mainz - 博客园]]
   + [[https://juejin.im/post/5b4977ae5188251b146b2fc8#heading-2][面试必备之乐观锁与悲观锁 - 掘金]]

** 死锁
   死锁指在多个线程循环等待某一资源的情景，可以通过 ~wait-for graph~ 算法检测是否出现了死锁：
   + 每个线程都是图中的一个节点
   + 当一个线程 A 等待另一个线程 B 占用的资源时，就创建一条 A -> B 的边
   + 当图中出现环路时就表示出现了死锁

   产生死锁的条件：
   + 互斥条件：即某个资源在一段时间内只能由一个进程占有，不能同时被两个或两个以上的进程占有
   + 不可抢占条件：进程所获得的资源在未使用完毕之前，资源申请者不能强行的从资源占有者手中夺取资源，而只能由该资源的占有者进程自行释放
   + 占有且等待条件：进程至少已经占有了一个资源，但又申请了一个新的被其他进程所占有的资源，此时处于等待状态
   + 循环等待条件：若干个进程形成环形链，每个都占用对方申请的下一个资源

   死锁的解决：
   1. 预防死锁的发生，在编码时就尽量避免死锁的发生
      + 以确定的顺序获得锁
      + 超时放弃
   2. 避免死锁的发生
   3. 死锁的检测与恢复

   参考：
   + [[https://www.cnblogs.com/balingybj/p/4782032.html][死锁及处理 - balingybj - 博客园]]

* 同步相关
  + 互斥：是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的

  + 同步：是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问

  + *进程同步的基本概念*
    1. 两种形式的制约关系
       + 间接相互制约关系：多个程序并发执行时，由于共享系统资源，致使在这些并发执行的程序之间形成相互制约的关系
       + 直接相互制约关系：多个程序为完成同一向任务而相互合作，进程间的直接相互制约关系就源于这种合作
    2. 临界资源：必须互斥访问的资源，同一时间只能有一个进程访问
    3. 临界区：把在每个进程中访问临界资源的那段代码称为临界区
    4. 同步机制应遵循的规则
       + 空闲让进：当无进程处于临界区时，表明临界资源处于空闲状态，应允许一个请求进入临界区的进程立即进入自己的临界区，以有效的利用临界资源
       + 忙则等待：已有进程进入临界区时，表明临界资源正在被访问，因而其他试图进入临界区的进程必须等待，以保证对临界资源的互斥访问
       + 有限等待：对要求访问的临界资源的进程，应保证在有限时间内能进入自己的临界区，以免陷如死等状态
       + 让权等待：当进程不能进入自己的临界区时，应立即释放处理机，以免进程陷入忙等状态

  + *硬件同步机制*
    1. 关中断：进程进入锁测试之前关闭中断，知道完成锁测试并上锁后才能打开中断，实现简单，效率太低。

       *NOTE*: 只有在能够执行中断的情况下才能进行进程调度。

    2. 利用 Test-and-Set 指令实现互斥
       #+BEGIN_SRC C
         bool TS(bool* lock) {
           bool old = *lock;
           ,*lock = true;
           return old;
         }

         do {
           while(TS(&lock));  // 当 lock 为 true 时，等待 lock 为false

           critical section;
           lock = false;      // 释放所，将 lock 设为 false
           remainder section;
         } while(true);
       #+END_SRC

    3. 利用 Swap 指令实现进程互斥
       #+BEGIN_SRC C
         void swap(bool* a, bool* b) {
           bool temp = *a;
           ,*a = *b;
           ,*b = temp;
         }

         do {
           key = true;
           do {
             swap(&lock, &key);
           } while(key != false);

           // 临界区操作

           lock = false;  // 释放锁
         } while(true);
       #+END_SRC

       *NOTE:* lock 的初始值通常为 false.

  + *信号量机制*
    1. 整型信号量，通过整型数 S 表示资源的数量，通过 P, V 操作来访问资源：
       #+BEGIN_SRC C
         void wait(int S) {  // P
           while (S <= 0);   // 等待 S > 0
           S--;
         }

         void signal(int S) {  // V
           S++;                // 资源增加
         }
       #+END_SRC

    2. 记录型信号量，避免整型信号量中的忙等：
       #+BEGIN_SRC C
         typedef struct {
           int value;
           struct pcb* queue;  // 等待访问资源的进程
         } semaphore;

         void wait(semaphore* S) {
           S->value--;
           if (S->value < 0) {  // value < 0 说明资源以分配完毕，进程调用 block 自我阻塞
             block(S->queue);
           }
         }

         void signal(semaphore* S) {
           S->value++;
           if (S->value <= 0) {  // value <= 0 说明存在进程等待资源，唤醒第一个进程
             wakeup(S->queue);
           }
         }
       #+END_SRC

  + *信号量的应用*
    #+BEGIN_SRC C
      // -----------------------------------------------------------------------------
      //                                进程互斥
      // -----------------------------------------------------------------------------

      semaphore mutex = 1;

      void PA() {
        while (true) {
          wait(mutex);

          // 临界区

          signal(mutex);

          // 剩余区
        }
      }

      void PB() {
        while (true) {
          wait(mutex);

          // 临界区

          signal(mutex);

          // 剩余区
        }
      }

      // -----------------------------------------------------------------------------
      //                                前驱关系
      // -----------------------------------------------------------------------------

      // S1 -> S2, S1 -> S3
      // S2 -> S4, S2 -> S5
      // S3 -> S6
      // S4 -> S6
      // S5 -> S6

      void P1() {
        S1;
        signal(a);  // S1 -> S2
        signal(b);  // S1 -> S3
      }

      void P2() {
        wait(a);
        S2;
        signal(c);  // S2 -> S4
        signal(d);  // S2 -> S5
      }

      void P3() {
        wait(b);
        S3;
        signal(e);  // S3 -> S6;
      }

      void P4() {
        wait(c);
        S4;
        signal(f);  // S4 -> S6;
      }

      void P5() {
        wait(d);
        S5;
        signal(g);  // S5 -> S6;
      }

      void P6() {
        wait(e);
        wait(f);
        wait(g);
        S6;
      }
    #+END_SRC

  + *生产者-消费者问题*
    #+BEGIN_SRC C
      int in = 0, out = 0;
      item buffer[n];
      semaphore mutex = 1, empty = n, full = 0;

      void Producer() {
        do {
          new_item = ...;  // 生产

          wait(empty);  // 避免缓冲区溢出
          wait(mutex);  // 保证缓冲区操作互斥

          buffer[in] = new_item;
          in = (in + 1) % n;

          signal(mutex);
          signal(full);  // 生产后 full 增加
        } while(true);
      }

      void Consumer() {
        do {
          wait(full);  // 等待存在资源
          wait(mutex);

          new_item = buffer[out];  // 取出资源
          out = (out + 1) % n;

          signal(mutex);
          signal(empty);  // 取出资源， empty 增加
        } while(true);
      }
    #+END_SRC

  + *哲学家进餐问题*
    #+BEGIN_SRC C
      semaphore chopstick[5] = {1, 1, 1, 1, 1};

      do {
        wait(chopstick[i]);  // 第 i 个哲学家左边的筷子
        wait(chopstick[(i + 1) % 5]);  // 第 i 个哲学家右边的筷子

        // eat

        signal(chopstick[(i + 1) % 5]);
        signal(chopstick[i]);

        // think
      } while(true);  // 存在死锁问题
    #+END_SRC

  + *读者写者问题*
    #+BEGIN_SRC C
      semaphore rmutex = 1, wmutex = 1;
      int reader_count = 0;

      void reader() {
        do {
          wait(rmutex);             // 保证 reader_count 同一时刻只有一个读者访问
          if (reader_count == 0) {  // 只有读者数量为 0 时才可能存在写者
            wait(wmutex);
          }
          reader_count++;
          signal(rmutex);

          // read...

          wait(rmutex);
          reader_count--;
          if (reader_count == 0) {  // 读者数量为 0, 可以进行写入
            signal(wmutex);
          }
          signal(rmutex);
        } while(true);
      }

      void writer() {
        do {
          wait(wmutex);
          // write...
          signal(wmutex);
        } while(true);
      }
    #+END_SRC

  
