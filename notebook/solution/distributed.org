#+TITLE:      分布式系统

* 目录                                                    :TOC_4_gh:noexport:
- [[#唯一性-id-生成策略][唯一性 ID 生成策略]]
- [[#数据库和缓存双写一致性方案][数据库和缓存双写一致性方案]]

* 唯一性 ID 生成策略
  在某些场景下，可能需要在分布式系统中生成唯一性的 ID，网上可以找到的生成策略大多可以保证唯一性这一基本需求，
  因此，在选择具体的策略时，更多的需要考虑的问题是：
  1. ID 是在本地生成还是在中心生成
  2. 生成的 ID 是否有序
  3. 生成的 ID 的长度

  常见的两种生成方式：UUID 和 Twitter 的雪花算法：
  |----------+----------+----------+------|
  | 算法     | 生成方式 | 是否有序 | 长度 |
  |----------+----------+----------+------|
  | UUID     | 本地生成 | 无       | 过长 |
  | 雪花算法 | 中心生成 | 有       | 一般 |
  |----------+----------+----------+------|
  
  除了 UUID 和雪花算法以外，还有很多的生成策略，比如：数据库 Sequence、MongoDB ObjectId、百度 UID-Generator 等。
  这些策略生成 ID 的结构都不是很复杂，相对来说，困难在于如何实施使用这些策略，需要结合实际业务考虑。

* 数据库和缓存双写一致性方案
  这里假设缓存的读取逻辑是这样的：
  #+HTML: <img src="https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_getkeyflow.png">

  此时，存在三种更新策略：
  1. 先更新数据库，再更新缓存，这样很容易出现问题，被普遍反对
  2. 先删除缓存，再更新数据库
  3. 先更新数据库，再删除缓存

  参考：
  + [[https://www.cnblogs.com/rjzheng/p/9041659.html][分布式之数据库和缓存双写一致性方案解析 - 孤独烟 - 博客园]]

