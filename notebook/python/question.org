#+TITLE:      Python 问题集

* 目录                                                    :TOC_4_gh:noexport:
- [[#python-运行速度为什么那么慢][Python 运行速度为什么那么慢]]
- [[#python-的常见实现有哪些][Python 的常见实现有哪些]]
- [[#怎样安装-pip][怎样安装 PIP]]
- [[#怎样使用-pip-导出依赖][怎样使用 PIP 导出依赖]]
- [[#怎样在程序中执行一个-python-文件][怎样在程序中执行一个 Python 文件]]
- [[#怎样更新-pip][怎样更新 PIP]]
- [[#怎样将字节对象转换为字符串][怎样将字节对象转换为字符串]]
- [[#怎样更新-matplotlib-的字体缓存][怎样更新 matplotlib 的字体缓存]]
- [[#python-中重复定义的对象如何处理][Python 中重复定义的对象如何处理]]
- [[#jupyter-和-ipython-的关系][Jupyter 和 Ipython 的关系]]
- [[#python-not-working-in-the-command-line-of-git-bash][Python not working in the command line of git bash]]
- [[#load-json-数据得到类似-js-object-的结果][Load Json 数据得到类似 JS Object 的结果]]

* Python 运行速度为什么那么慢
  对于 ~C~ 和 ~C++~ 来说，它们会被编译为 *本机代码*, 因此执行速度很快。

  而 ~Java~ 和 ~C#~ 虽然被编译为 *字节码*, 但是它们有 [[https://en.wikipedia.org/wiki/Just-in-time_compilation][JIT]], 可以将字节码编译为本机代码，运行速度也不差。

  但是由于 ~Python~ 的动态特性，使得它的 ~JIT~ 难以实现，所以运行速度不快。

* Python 的常见实现有哪些
  + CPython - Python 的标准实现
  + Jython - Python 的 Java 实现
  + PyPy - Python 的 Python 实现
  + IronPython - Python 的 C# 实现
  + Cython - 包含 C 数据类型的 Python
  + Anaconda - 适用于科学计算和数据分析的发行版

* 怎样安装 PIP
  ~Python3~ 可以通过 ~Python -m ensurepip~ 来安装 ~pip~, 如果不信的话，可以通过以下指令：
  #+BEGIN_SRC bash
    $ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    $ python get-pip.py
  #+END_SRC

* 怎样使用 PIP 导出依赖
  #+BEGIN_EXAMPLE
    $ pip freeze > requirements.txt
  #+END_EXAMPLE
* 怎样在程序中执行一个 Python 文件
  1. *Treat it like a module:* ~import file~
  2. *The infamous (and unsafe) exec command:* ~execfile('file.py')~
  3. *Spawn a shell process:* ~os.system('python file.py')~
* 怎样更新 PIP
  pip 更新在 linux 和 windows 上存在区别：
  #+BEGIN_SRC bash
    # linux
    pip install -U pip

    # windows
    python -m pip install -U pip
  #+END_SRC

* 怎样将字节对象转换为字符串
  不考虑编码的话，可以这样：
  #+BEGIN_SRC python
    bytes.hex()
  #+END_SRC

* 怎样更新 matplotlib 的字体缓存
  #+BEGIN_SRC python
    >>> from matplotlib.font_manager import _rebuild
    >>> _rebuild()
  #+END_SRC

* Python 中重复定义的对象如何处理
  重复定义的对象以最后一次定义为准，下例中的第二个 Example 有效：
  #+BEGIN_SRC python
    class Example:
        ...

    class Example:
        ...
  #+END_SRC

* Jupyter 和 Ipython 的关系
  Jupyter notebook 是从 Ipython 分离出来的项目，在 Github 上可以直接渲染 .ipynb 后缀名的文件。 

  + [[https://zh.wikipedia.org/wiki/Jupyter%E9%A1%B9%E7%9B%AE][Jupyter 项目 - 维基百科，自由的百科全书]]

* Python not working in the command line of git bash
  #+begin_src sh
    alias python='winpty python.exe'
  #+end_src

  参考：
  + [[https://stackoverflow.com/questions/32597209/python-not-working-in-the-command-line-of-git-bash][windows - Python not working in the command line of git bash - Stack Overflow]]

* Load Json 数据得到类似 JS Object 的结果
  使用 Python3 时，可以通过 object_hook 和 SimpleNamespace 实现：
  #+begin_src python
    import json
    from types import SimpleNamespace

    data = '{"name": "John Smith", "hometown": {"name": "New York", "id": 123}}'

    # Parse JSON into an object with attributes corresponding to dict keys.
    x = json.loads(data, object_hook=lambda d: SimpleNamespace(**d))
    print(x.name, x.hometown.name, x.hometown.id)
  #+end_src

  SimpleNamespace 实现：
  #+begin_src python
    class SimpleNamespace:
        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)

        def __repr__(self):
            keys = sorted(self.__dict__)
            items = ("{}={!r}".format(k, self.__dict__[k]) for k in keys)
            return "{}({})".format(type(self).__name__, ", ".join(items))

        def __eq__(self, other):
            return self.__dict__ == other.__dict__
  #+end_src

  
