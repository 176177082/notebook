#+TITLE:      Python 爬虫笔记

* 目录                                                    :TOC_4_gh:noexport:
- [[#基本结构][基本结构]]

* 基本结构
  |-------------------------+---------------------------------------------------|
  | 主题                    | 描述                                              |
  |-------------------------+---------------------------------------------------|
  | 网站背景调研            | 了解网站相关情况以方便网站的爬取                  |
  | \_ 检查 robots.txt      | \_ 了解网站对爬虫的限制情况                       |
  | \_ 检查 sitemap.xml     | \_ 根据网站地图可以更好的爬取网站                 |
  | \_ 估算网站大小         | \_ 了解爬取网站需要的工作量                       |
  |-------------------------+---------------------------------------------------|
  | 网站爬取方式            | 常用的爬取网站内容的方式                          |
  | \_ 下载网页             | \_ 最基本的方式，其他方式的基础                   |
  | \_ 网站地图爬虫         | \_ 利用网站地图可以更方便的爬取网站内容           |
  | \_ ID 遍历爬虫          | \_ 网站链接根据 ID 变化时可以使用这种方式         |
  | \_ 链接爬虫             | \_ 爬取所有链接，需要注意避免重复爬取             |
  |-------------------------+---------------------------------------------------|
  | 数据抓取方式            | 常用的数据抓取方式                                |
  | \_ 正则表达式           | \_ 基本的方式，速度也不慢                         |
  | \_ Beautiful Soup       | \_ 利用 lxml 作为引擎速度更快                     |
  |-------------------------+---------------------------------------------------|
  | 下载缓存                | 通过缓存避免不必要的重复爬取                      |
  | \_ 磁盘缓存             | \_ 实现简单、使用方便                             |
  | \_ 数据库缓存           | \_ 使用 NoSQL 数据库，功能更加强大                |
  |-------------------------+---------------------------------------------------|
  | 并发下载                | 加快网页下载速度，但要注意时延                    |
  | \_ 多线程并发下载       | \_ 交互方便                                       |
  | \_ 多进程并发下载       | \_ 速度更快                                       |
  |-------------------------+---------------------------------------------------|
  | 动态网页爬取            | 动态内容的获取                                    |
  | \_ 逆向工程             | \_ 解析 JavaScript 代码                           |
  | \_ 执行 JavaScript 代码 | \_ 借助各种工具执行 JavaScript 代码，内存占用更多 |
  |-------------------------+---------------------------------------------------|
  | 表单交互                | 核心就是 AJAX 交互                                |
  |-------------------------+---------------------------------------------------|
  | 验证码处理              | 最困难的部分之一                                  |
  | \_ 光学字符识别         | \_ 可以应付简单的验证码                           |
  | \_ 借助打码平台         | \_ 存在额外成本                                   |
  |-------------------------+---------------------------------------------------|

  请求模拟、数据抓取、资源的最大化利用、合理使用
