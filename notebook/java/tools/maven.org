#+TITLE:      Maven

* 目录                                                    :TOC_4_gh:noexport:
- [[#maven-基础][Maven 基础]]
  - [[#标准目录结构][标准目录结构]]
  - [[#插件的概念][插件的概念]]
  - [[#插件的添加][插件的添加]]
  - [[#maven-scopes][Maven scopes]]
  - [[#依赖版本][依赖版本]]
- [[#多模块项目][多模块项目]]
- [[#使用技巧][使用技巧]]
  - [[#查看项目依赖树][查看项目依赖树]]
- [[#注意事项][注意事项]]
- [[#相关问题][相关问题]]
  - [[#怎样通过-maven-创建运行-webapp][怎样通过 Maven 创建运行 WebApp]]
  - [[#maven-的版本号命名规则是怎样的][Maven 的版本号命名规则是怎样的]]
  - [[#maven-的镜像和存储库配置][Maven 的镜像和存储库配置]]
  - [[#maven-中编译时字符编码的设置][Maven 中编译时字符编码的设置]]
  - [[#maven-怎样解决依赖冲突的问题的][Maven 怎样解决依赖冲突的问题的]]
  - [[#ga-版本是什么意思][GA 版本是什么意思]]

* Maven 基础
** 标准目录结构
   |------------------------------------+----------------------------------------------------------------------------|
   | 目录                               | 目的                                                                       |
   |------------------------------------+----------------------------------------------------------------------------|
   | ${basedir}                         | 存放 pom.xml 和所有的子目录                                                |
   | ${basedir}/src/main/java           | 项目的 java 源代码                                                         |
   | ${basedir}/src/main/resources      | 项目的资源，比如说 property 文件，springmvc.xml                            |
   | ${basedir}/src/test/java           | 项目的测试类，比如说 Junit 代码                                            |
   | ${basedir}/src/test/resources      | 测试用的资源                                                               |
   | ${basedir}/src/main/webapp/WEB-INF | web 应用文件目录，web 项目的信息，比如存放 web.xml、本地图片、jsp 视图页面 |
   | ${basedir}/target                  | 打包输出目录                                                               |
   | ${basedir}/target/classes          | 编译输出目录                                                               |
   | ${basedir}/target/test-classes     | 测试编译输出目录                                                           |
   | Test.java                          | Maven 只会自动运行符合该命名规则的测试类                                   |
   | ~/.m2/repository                   | Maven 默认的本地仓库目录位置                                               |
   |------------------------------------+----------------------------------------------------------------------------|

** 插件的概念
   Maven 本质上是一个插件框架，它的核心并不执行任何具体的构建任务，所有这些任务都交给插件来完成，例如编译源代码是由 ~maven-compiler-plugin~ 完成的。

   进一步说，每个任务对应了一个插件目标（goal），每个插件会有一个或者多个目标，例如 ~maven-compiler-plugin~ 的 ~compile~ 目标用来编译位于 ~src/main/java/~ 目录下的主源码，
   ~testCompile~ 目标用来编译位于 ~src/test/java/~ 目录下的测试源码。

   用户可以通过两种方式调用 Maven 插件目标：
   1) 第一种方式是将插件目标与生命周期阶段（lifecycle phase）绑定，这样用户在命令行只需要输入生命周期阶段就可以了。

      例如 Maven 默认将 maven-compiler-plugin 的 compile 目标与 compile 生命周期阶段绑定，因此命令 mvn compile 实际上是先定位到 compile 这一生命周期阶段，
      然后再根据绑定关系调用 maven-compiler-plugin 的 compile 目标。

   2) 第二种方式是直接在命令行指定要执行的插件目标，例如 mvn archetype:generate 就表示调用 maven-archetype-plugin 的 generate 目标，这种带冒号的调用方式与生命周期无关。

   参考文章：
   + [[http://www.cnblogs.com/crazy-fox/archive/2012/02/09/2343722.html][常用 Maven 插件介绍 - 种菜得瓜 - 博客园]]

** 插件的添加
   添加插件只需要在 POM 中在 ~<build>~ 中添加 ~<plugins>~ 就可以了：
   #+BEGIN_SRC xml
     <build>
       <plugins>
         <plugin>
           <artifactId>maven-myquery-plugin</artifactId>
           <version>1.0</version>
         </plugin>
       </plugins>
     </build>
   #+END_SRC

   不过需要注意 ~pluginManagement~ 和 ~plugins~ 的区别：
   + pluginManagement 是表示插件声明，即你在项目中的 pluginManagement 下声明了插件，Maven 不会加载该插件
   + plugins 就是直接引入一个 plugin，而且可以绑定到 Maven 相关的生命周期上

   参考文章：
   + [[https://maven.apache.org/guides/mini/guide-configuring-plugins.html][Maven – Guide to Configuring Plug-ins]]

** Maven scopes
   + compile 是默认的 scope，表示 dependency 可以在生命周期中使用。而且这些 dependencies 会传递到依赖的项目中
   + provided 跟 compile 相似，但是表明了 dependency 由 JDK 或者容器提供
   + runtime 表示 dependency 不作用在编译时，但会作用在运行和测试时
   + test 表示 dependency 作用在测试时，不作用在运行时
   + system 跟 provided 相似，但是在系统中要以外部 JAR 包的形式提供，maven 不会在 repository 查找它
   + import 只使用在 <dependencyManagement> 中，表示从其它的 pom 中导入 dependency 的配置

   相对来说，开发时常用的大概就是 compile、provided 和 test 了吧。

** 依赖版本
   不指定依赖版本时 Maven 会在被依赖的包中需要是否有指定的版本，找不到的话就会报错，找不到指定的依赖。

* 多模块项目
  Maven 多模块项目通常分为一个父模块和多个子模块，父模块的 POM 通常具有如下格式：
  #+begin_src xml
    <!-- 父模块的打包类型需要为 POM -->
    <packaging>pom</packaging>

    <!-- 声明子模块 -->
    <modules>
      <module>module-a</module>
      <module>module-b</module>
      <module>module-c</module>
    </modules>

    <!-- 声明通用的属性值 -->
    <properties>
      ...
    </properties>

    <!-- 管理通用的依赖项 -->
    <dependencyManagement>
      <dependencies>
        ...
      </dependencies>
    </dependencyManagement>

    <!-- 管理通用的插件 -->
    <build>
      <pluginManagement>
        <plugins>
          ...
        </plugins>
      </pluginManagement>
    </build>
  #+end_src

  而子模块需要集成父模块：
  #+begin_src xml
    <parent>
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
    </parent>
  #+end_src

  Maven 默认认为父模块是在当前项目 pom.xml 所在的目录的上一级目录中，如果项目结构并不是这样，就必须通过 <relativepath> 节点来指定父模块 pom.xml 所在的路径：
  #+begin_src xml
    <relativePath>../</relativePath>
  #+end_src

  子模块需要使用其他子模块的功能时，需要在 ~dependencies~ 中声明依赖才行。

* 使用技巧
** 查看项目依赖树
   可以通过如下命令查看依赖树，并将依赖树输出到指定文件：
   #+BEGIN_EXAMPLE
     mvn dependency:tree -DoutputFile=filename
   #+END_EXAMPLE

   这个在不清楚 spring-boot-starter 到底依赖了哪些东西的时候很有用。

* 注意事项
  + Maven 总是会用最近的依赖，也就是说，你在项目的构建说明文件里增加的这个依赖，会覆盖传递依赖引入的另一个依赖。

* 相关问题
** 怎样通过 Maven 创建运行 WebApp
   1) 运行如下指定创建基本的 WebApp 项目：
      #+BEGIN_EXAMPLE
        $ mvn archetype:generate -DarchetypeArtifactId=maven-archetype-webapp
      #+END_EXAMPLE
   2) 添加 Servlet API 依赖项：
      #+BEGIN_SRC xml
        <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
        <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>3.1.0</version>
          <scope>provided</scope>
        </dependency>
      #+END_SRC
   3) 添加 Tomcat 插件支持直接运行 WebApp：
      #+BEGIN_SRC xml
        <build>
          <plugins>
            <plugin>
              <groupId>org.apache.tomcat.maven</groupId>
              <artifactId>tomcat7-maven-plugin</artifactId>
              <version>2.2</version>
              <configuration>
                <url>http://localhost:8080/servletp</url>
                <server>tomcat</server>
              </configuration>
            </plugin>
          </plugins>
        </build>
      #+END_SRC
   4) 编译打包可以通过如下命令完成：
      #+BEGIN_EXAMPLE
        $ mvn package
      #+END_EXAMPLE
   5) 运行 WebApp 可以通过如下命令完成：
      #+BEGIN_EXAMPLE
        $ mvn tomcat7:run
      #+END_EXAMPLE

** Maven 的版本号命名规则是怎样的
   Maven 版本号命名规则中主要需要注意两点：
   1) 语义化版本命名规则
   2) 快照版本 SNAPSHOT

   其中，语义化版本命名规则核心规则如下：
   |------+----------+---------------------------------------------------------------|
   | 序号 | 格式要求 | 说明                                                          |
   |------+----------+---------------------------------------------------------------|
   | x    | 非负整数 | 主版本号(major)，进行不向下兼容的修改时，递增主版本号         |
   | y    | 非负整数 | 次版本号(minor)，保持向下兼容,新增特性时，递增次版本号        |
   | z    | 非负整数 | 修订号(patch),保持向下兼容,修复问题但不影响特性时，递增修订号 |
   |------+----------+---------------------------------------------------------------|

   而镜像版本 SNAPSHOT 是 maven 的特殊版本号，maven 在处理的时候，把 SNAPSHOT 字符创自动替换成时间。
   说明这是一个不稳定的版本。

   参考：
   + [[https://segmentfault.com/a/1190000011368506][版本命名及限定规则详解 - 个人文章 - SegmentFault 思否]]
   + [[https://liyixing1.iteye.com/blog/2171254][版本号规范，镜像版本SNAPSHOT，LATEST 和 RELEASE 版本 - 李义星 - ITeye博客]]

** Maven 的镜像和存储库配置
   当 Maven 的依赖不在本地仓库时, 就需要到远程仓库下载，这个时候如果配置了镜像，而且镜像配置的规则中匹配到目标仓库时，
   Maven 认为目标仓库被镜像了，不会再去被镜像仓库下载依赖，而是直接去镜像仓库下载。

   其中，镜像通常在 setting.xml 中进行配置，而存储库在 POM 中进行配置，阿里云镜像配置如下：
   #+BEGIN_SRC xml
     <mirrors>
       <mirror>
         <id>aliyunmaven</id>
         <mirrorOf>*</mirrorOf>
         <name>aliyunmaven</name>
         <url>https://maven.aliyun.com/repository/public</url>
       </mirror>
     </mirrors>
   #+END_SRC

** Maven 中编译时字符编码的设置
   通常情况下用 ~archetype~ 创建项目时已经帮我们设置好了：
   #+BEGIN_SRC xml
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
   #+END_SRC

** Maven 怎样解决依赖冲突的问题的
   当依赖存在冲突时，Maven 自动选择依赖树中离根节点最近的依赖。

   比如：A -> B -> C -> D[1.0], A -> C -> D[2.0]，此时，Maven 会选择 D[2.0]。

   最直接的解决方法就是在 pom 中直接指定版本。

   参考：[[http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Management][Maven – Introduction to the Dependency Mechanism]]
** GA 版本是什么意思 
   GA 是单词 General Availability 的缩写，即一般可用性，可以参考：
   + [[https://stackoverflow.com/questions/2140010/what-does-ga-means-in-hibernate-versions][software lifecycle - What does GA means in hibernate versions? - Stack Overflow]]
   + [[https://en.wikipedia.org/wiki/Software_release_life_cycle][Software release life cycle - Wikipedia]]
