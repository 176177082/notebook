#+TITLE:      Java 并发操作

* 目录                                                    :TOC_4_gh:noexport:
- [[#对象和类][对象和类]]
- [[#volatile][volatile]]
- [[#中断操作][中断操作]]
- [[#相关问题][相关问题]]
  - [[#java-线程和操作系统线程之间的关系][Java 线程和操作系统线程之间的关系]]

* 对象和类
  通过 ~synchronized~ 关键字加锁时，静态方法使用的是类对象本身的锁，而实例方法使用的是实例对象本身的锁。

* volatile
  关键字 volatile 的作用：
  1. 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的
  2. 禁止进行指令重排序

  其中，第一个作用对应并发编程中的可见性这一概念：
  + 可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值

  因为存在高速缓存的原因，CPU 进行操作时可能是先将变量的值读取到高速缓存中，然后更新高速缓存中的值，在将高速缓存中的值写到主存。这在并发环境下可能导致：
  + CPU-A 将新值写到高速缓存还没有写到主存之前，CPU-B 就读取了主存中的旧值

  通过 volatile 关键字可以使得新值直接希写入主存，避免这一情况的发生。

  而第二个作用则对应并发编程中有序性这一概念：
  + 有序性是指程序执行的顺序按照代码的先后顺序执行

  处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。

  这种指令重排序，在单线程中是没有问题的，但是在多线程环境下可能导致一些其他的问题。

  参考：
  + [[https://www.cnblogs.com/dolphin0520/p/3920373.html][Java并发编程：volatile 关键字解析 - Matrix海子 - 博客园]]

* 中断操作
  Java 中可以通过 ~interrupt()~ 设置一个线程的中断标志，方法 sleep、join、wait 会检查这个标志位，并在需要时抛出 ~InterruptedException~ 异常。

  但是，如果目标线程没有检测中断标志，那么，调用 ~interrupt()~ 是没有效果的。

  这里的一个问题是，通过 ~Ctrl-C~ 发送过的中断信号又是怎么处理的呢？Java 中的处理似乎要好很多，Python 中就很有可能出现 C-c 关不掉线程的情况。
  是 JVM 和 Python 解析器的处理方式不一样？

  参考：
  + [[https://www.cnblogs.com/mickole/p/3189156.html][linux系统编程之信号（一）：中断与信号 - mickole - 博客园]]

* 相关问题
** Java 线程和操作系统线程之间的关系
   在操作系统中，线程可以由用户自己实现，但是对于现代操作系统来说，操作系统内核一般都实现了线程。

   而 JVM 早期也是自己实现线程，但是在高版本的 JVM 中，使用的线程其实就是操作系统线程了。

   其中，Java 线程和操作系统线程之间最容易搞混淆的就是线程的状态了，操作系统线程被当做轻量级进程，因此操作系统线程的状态和进程一样只有五种：
   #+HTML: <img src="https://pic3.zhimg.com/v2-b855429173f1d696b6025d73cd2ee9eb_r.jpg">

   而 Java 线程对这些状态进行了扩展，变成了六个状态：
   #+HTML: <img src="https://pic2.zhimg.com/v2-326a2be9b86b1446d75b6f52f54c98fb_r.jpg">

   其中：
   + RUNNABLE 对应操作系统线程的 ready 和 running 这两种状态
   + BLOCK、WAITING 和 TIMED_WAITING 对应操作系统线程的 wating 状态 

   官方的文档也说明了：
   #+begin_quote
   A thread can be in only one state at a given point in time.These states are virtual machine states which do not reflectany operating system thread states.
   #+end_quote

   参考：
   + [[https://blog.csdn.net/CringKong/article/details/79994511][Java 线程和操作系统线程的关系 - CringKong的博客 - CSDN博客]]
   + [[https://www.zhihu.com/question/56494969][Java 线程运行怎么有第六种状态？ - 知乎]]

