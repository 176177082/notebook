#+TITLE:      相关问题

* 目录                                                    :TOC_4_gh:noexport:
- [[#父子线程和守护线程][父子线程和守护线程]]
- [[#中断信号和线程中断][中断信号和线程中断]]
- [[#关键字-volatile-和指令重排序][关键字 volatile 和指令重排序]]

* 父子线程和守护线程
  经常可以听到父子进程、父子线程的说法，其中，父子线程之间其实是不存在实际意义上的复杂关系的，当父线程创建了新的子线程后，
  两者其实就没有太多直接的联系了，预期说是父线程，不如说是创建线程。

  而守护线程，则是一种特殊的线程，当一个进程中运行的线程只有守护线程后，这个进程就会被自动关闭。相反，当进程中存在任意一个非守护线程时，
  这个进程都不会自动关闭。

  这里需要注意的是，创建线程和新线程的地位是相同的，即使 “主线程” 被关闭，其他非守护线程存在的话程序依然不会退出。

* 中断信号和线程中断
  向 JVM 进程发出的中断信号和 JVM  进程中线程的中断标志是不一样的，JVM 进程对于中断信号有单独的处理机制，而线程的中断标志则是 JVM 中取消线程的另一种方式。

  不得不说，当操作系统和 JVM 的概念混在一起的时候，总是容易混乱。


* 关键字 volatile 和指令重排序
  关键字 ~volatile~ 的作用：
  + 保证被修饰变量的可见性，当被修饰变量被修改时，修改后的值立即写入主存，而读取被修饰变量时，也直接从主存中读取值
  + 禁止重排序

  经典的例子，在实现单例模式时使用双重检查锁，但因为重排序的原因可能导致错误的发生：
  #+begin_src java
        public class Singleton {
          private static Singleton uniqueSingleton;

          private Singleton() {}

          public Singleton getInstance() {
            if (null == uniqueSingleton) {         // 1
              synchronized (Singleton.class) {
                if (null == uniqueSingleton) {     // 2
                  uniqueSingleton = new Singleton();
                }
              }
            }
            return uniqueSingleton;
          }
        }
  #+end_src

  实例化 ~Singleton~ 对象时可以分为三步：
  #+begin_src java
    memory = allocate();  // 1. 分配对象内存空间
    instance(memory);     // 2. 初始化对象
    instance = memory;    // 3. 设置 instance 指向刚分配的内存地址，此时 instance != null
  #+end_src

  但是这三步可能被重排序：
  #+begin_src java
    memory = allocate();  // 1. 分配对象内存空间
    instance = memory;    // 2. 设置 instance 指向刚分配的内存地址，此时 instance != null
    instance(memory);     // 3. 初始化对象
  #+end_src

  这回导致什么情况呢？假如有个线程在重排序的情况下完成了实例化对象的第二步 - 将 instance 指向分配的内存地址后切换到另一个线程，这个线程一看，
  instance 这个引用的值已经不为 null 了，就拿去用，但是由于这个对象还没有完成第三步 - 初始化，因此，会导致错误的产生。

  通过使用 ~volatile~ 关键字，可以避免这种情况的发生。
  
  参考：
  + [[https://blog.csdn.net/javazejian/article/details/72772461][全面理解 Java 内存模型(JMM)及 volatile 关键字_zejian 的博客-CSDN博客]]

