#+TITLE:      Java 并发操作

* 目录                                                    :TOC_4_gh:noexport:
- [[#对象和类][对象和类]]
- [[#volatile][volatile]]

* 对象和类
  通过 ~synchronized~ 关键字加锁时，静态方法使用的是类对象本身的锁，而实例方法使用的是实例对象本身的锁。

* volatile
  关键字 volatile 的作用：
  1. 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的
  2. 禁止进行指令重排序

  其中，第一个作用对应并发编程中的可见性这一概念：
  + 可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值

  因为存在高速缓存的原因，CPU 进行操作时可能是先将变量的值读取到高速缓存中，然后更新高速缓存中的值，在将高速缓存中的值写到主存。这在并发环境下可能导致：
  + CPU-A 将新值写到高速缓存还没有写到主存之前，CPU-B 就读取了主存中的旧值

  通过 volatile 关键字可以使得新值直接希写入主存，避免这一情况的发生。

  而第二个作用则对应并发编程中有序性这一概念：
  + 有序性是指程序执行的顺序按照代码的先后顺序执行

  处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。

  这种指令重排序，在单线程中是没有问题的，但是在多线程环境下可能导致一些其他的问题。

  参考：
  + [[https://www.cnblogs.com/dolphin0520/p/3920373.html][Java并发编程：volatile 关键字解析 - Matrix海子 - 博客园]]

