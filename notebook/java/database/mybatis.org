#+TITLE:      mybatis

* 目录                                                    :TOC_4_gh:noexport:
- [[#配合-spring-的简单使用][配合 Spring 的简单使用]]
- [[#配合-spring-boot-的简单使用][配合 Spring Boot 的简单使用]]
- [[#相关问题][相关问题]]
  - [[#mybatis-是不是不支持重载][mybatis 是不是不支持重载]]
- [[#相关链接][相关链接]]

* 配合 Spring 的简单使用
  配合 Spring 使用需要添加如下两个依赖（只有 mybatis-spring 是不行的）：
  #+BEGIN_SRC xml
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>x.x.x</version>
    </dependency>
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis-spring</artifactId>
      <version>x.x.x</version>
    </dependency>
  #+END_SRC

  然后需要配置 SqlSessionFactory，简单的方式是通过 Java 进行配置：
  #+BEGIN_SRC java
    @Bean
    public SqlSessionFactory sqlSessionFactory() throws Exception {
      SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
      factoryBean.setDataSource(dataSource());
      return factoryBean.getObject();
    }
  #+END_SRC

  然后就需要配置具体的 Mapper 类了，需要注意将 Mapper 添加到工厂的配置中：
  #+BEGIN_SRC java
    @Bean
    public UserMapper userMapper(SqlSessionFactory factory) throws Exception {
      SqlSessionTemplate sqlSessionTemplate = new SqlSessionTemplate(factory);
      factory.getConfiguration().addMapper(UserMapper.class);
      return sqlSessionTemplate.getMapper(UserMapper.class);
    }
  #+END_SRC

  Mapper 的简单例子如下：
  #+BEGIN_SRC java
    public interface UserMapper {
      @Select("SELECT * FROM users WHERE id = #{userId}")
      User getUser(@Param("userId") String userId);
    }
  #+END_SRC

  使用的时候就像这样：
  #+BEGIN_SRC java
    public class FooServiceImpl implements FooService {

      private final UserMapper userMapper;

      public FooServiceImpl(UserMapper userMapper) {
        this.userMapper = userMapper;
      }

      public User doSomeBusinessStuff(String userId) {
        return this.userMapper.getUser(userId);
      }
    }
  #+END_SRC

* 配合 Spring Boot 的简单使用
  配合 Spring Boot 使用的话，只需要添加 Spring Boot Starter 就可以了：
  #+BEGIN_SRC xml
    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
    </dependency>
  #+END_SRC
  
  mybatis-spring-boot-starter 包含了 JDBC 的依赖，因此需要在配置文件中配置数据源：
  #+BEGIN_SRC conf
    spring.datasource.url=
    spring.datasource.username=
    spring.datasource.password=
    spring.datasource.driver-class-name=
  #+END_SRC

  其中，驱动的配置是可以省略的，因为高版本的环境下驱动可以通过 SPI 机制自动加载。

  通过注解配置的时候需要注意标注 ~@Mapper~ 注解和 ~@MapperScan~ 注解，方便让 MyBatis 自动完成映射工作。

  而使用 XML 配置的话就需要在配置文件中指明映射文件的路径：
  #+BEGIN_SRC conf
    mybatis.mapper-locations=classpath:mapper/*.xml
  #+END_SRC

  另外，使用 Mapper 注解可能会让 IDEA 无法识别出 Bean，这时可以使用 Repository 注解并修改 MapperScan 的参数：
  #+BEGIN_SRC java
    @MapperScan(annotationClass = Repository.class)
  #+END_SRC

  参考：
  + [[https://segmentfault.com/a/1190000017211657#articleHeader0][基于 SpringBoot2.0+ 优雅整合 SpringBoot+Mybatis - JavaGuide - SegmentFault 思否]]

* 相关问题
** mybatis 是不是不支持重载
   是的，mybatis 不支持重载，相关 issue 链接：
   + [[https://github.com/mybatis/mybatis-3/issues/511][not support overload? · Issue #511 · mybatis/mybatis-3]]

* 相关链接
  + [[http://www.mybatis.org/mybatis-3/zh/getting-started.html][mybatis – MyBatis 3 | 入门]]
  + [[http://www.mybatis.org/spring/zh/getting-started.html][mybatis-spring – MyBatis-Spring | 入门]]

