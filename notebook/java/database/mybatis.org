#+TITLE:      mybatis

* 目录                                                    :TOC_4_gh:noexport:
- [[#spring][Spring]]
- [[#spring-boot][Spring Boot]]
- [[#缓存机制][缓存机制]]
- [[#相关技巧][相关技巧]]
- [[#相关问题][相关问题]]
  - [[#mybatis-是不是不支持重载][mybatis 是不是不支持重载]]
  - [[#mybatis-返回自增主键的问题][mybatis 返回自增主键的问题]]
  - [[#返回嵌套对象的问题][返回嵌套对象的问题]]
  - [[#mybatis-中--和--的区别][mybatis 中 #{} 和 ${} 的区别]]
- [[#相关链接][相关链接]]

* Spring
  配合 Spring 使用需要添加如下两个依赖（只有 mybatis-spring 是不行的）：
  #+BEGIN_SRC xml
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>x.x.x</version>
    </dependency>
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis-spring</artifactId>
      <version>x.x.x</version>
    </dependency>
  #+END_SRC

  然后需要配置 SqlSessionFactory，简单的方式是通过 Java 进行配置：
  #+BEGIN_SRC java
    @Bean
    public SqlSessionFactory sqlSessionFactory() throws Exception {
      SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
      factoryBean.setDataSource(dataSource());
      return factoryBean.getObject();
    }
  #+END_SRC

  然后就需要配置具体的 Mapper 类了，需要注意将 Mapper 添加到工厂的配置中：
  #+BEGIN_SRC java
    @Bean
    public UserMapper userMapper(SqlSessionFactory factory) throws Exception {
      SqlSessionTemplate sqlSessionTemplate = new SqlSessionTemplate(factory);
      factory.getConfiguration().addMapper(UserMapper.class);
      return sqlSessionTemplate.getMapper(UserMapper.class);
    }
  #+END_SRC

  Mapper 的简单例子如下：
  #+BEGIN_SRC java
    public interface UserMapper {
      @Select("SELECT * FROM users WHERE id = #{userId}")
      User getUser(@Param("userId") String userId);
    }
  #+END_SRC

  使用的时候就像这样：
  #+BEGIN_SRC java
    public class FooServiceImpl implements FooService {

      private final UserMapper userMapper;

      public FooServiceImpl(UserMapper userMapper) {
        this.userMapper = userMapper;
      }

      public User doSomeBusinessStuff(String userId) {
        return this.userMapper.getUser(userId);
      }
    }
  #+END_SRC

* Spring Boot
  配合 Spring Boot 使用的话，只需要添加 Spring Boot Starter 就可以了：
  #+BEGIN_SRC xml
    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
    </dependency>
  #+END_SRC
  
  mybatis-spring-boot-starter 包含了 JDBC 的依赖，因此需要在配置文件中配置数据源：
  #+BEGIN_SRC conf
    spring.datasource.url=
    spring.datasource.username=
    spring.datasource.password=
    spring.datasource.driver-class-name=
  #+END_SRC

  其中，驱动的配置是可以省略的，因为高版本的环境下驱动可以通过 SPI 机制自动加载。

  通过注解配置的时候需要注意标注 ~@Mapper~ 注解和 ~@MapperScan~ 注解，方便让 MyBatis 自动完成映射工作。

  而使用 XML 配置的话就需要在配置文件中指明映射文件的路径：
  #+BEGIN_SRC conf
    mybatis.mapper-locations=classpath:mapper/*.xml
  #+END_SRC

  另外，使用 Mapper 注解可能会让 IDEA 无法识别出 Bean，这时可以使用 Repository 注解并修改 MapperScan 的参数：
  #+BEGIN_SRC java
    @MapperScan(annotationClass = Repository.class)
  #+END_SRC

  参考：
  + [[https://segmentfault.com/a/1190000017211657#articleHeader0][基于 SpringBoot2.0+ 优雅整合 SpringBoot+Mybatis - JavaGuide - SegmentFault 思否]]

* 缓存机制
  + 一级缓存，在同一个 Session 中如果执行相同的 SQL 查询语句就会命中一级缓存，从而在缓存中查询数据，默认开启。Session 关闭时缓存同样失效。

    值得注意的是，在 Spring 中使用时，一个事务对应一个 Session，执行更新操作时清空缓存。

  + 二级缓存，在同一个 namespace 下的所有操作语句，都影响着同一个 Cache，即二级缓存被多个 SqlSession 共享，是一个全局的变量。此时，查询会依次在二级缓存 -> 一级缓存 -> 数据库中查找。
    
  参考：[[https://tech.meituan.com/2018/01/19/mybatis-cache.html][聊聊 MyBatis 缓存机制 - 美团技术团队]]

* 相关技巧
  + 可以通过 mybatis-generator 这个插件快速生成实体类和 mapper 文件

* 相关问题
** mybatis 是不是不支持重载
   是的，mybatis 不支持重载，相关 issue 链接：
   + [[https://github.com/mybatis/mybatis-3/issues/511][not support overload? · Issue #511 · mybatis/mybatis-3]]

** mybatis 返回自增主键的问题
   mybatis 返回自增主键的功能是依赖于底层接口实现的，参考：
   #+begin_src java
     public interface Statement extends Wrapper, AutoCloseable {
     /**
      ,* Retrieves any auto-generated keys created as a result of executing this
      ,* <code>Statement</code> object. If this <code>Statement</code> object did
      ,* not generate any keys, an empty <code>ResultSet</code>
      ,* object is returned.
      ,*
      ,*<p><B>Note:</B>If the columns which represent the auto-generated keys were not specified,
      ,* the JDBC driver implementation will determine the columns which best represent the auto-generated keys.
      ,*
      ,* @return a <code>ResultSet</code> object containing the auto-generated key(s)
      ,*         generated by the execution of this <code>Statement</code> object
      ,* @exception SQLException if a database access error occurs or
      ,* this method is called on a closed <code>Statement</code>
      ,* @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
      ,* @since 1.4
      ,*/
       ResultSet getGeneratedKeys() throws SQLException;
     }
   #+end_src
   
   因此，能否返回自增主键一方面依赖于 mybatis 的配置，一方面也依赖于数据库是否支持。

   其中，mysql 中的 insert ... on duplicate ... 语句是不会返回自增主键的，因为，这个时候并没有生成自增主键。

   另外，批量插入的自增 ID 返回好像是在 3.1 以后支持的。
   
   参考：
   + [[https://www.cnblogs.com/nuccch/p/9069644.html][深入浅出 mybatis 之 useGeneratedKeys 参数用法 - 2Simple - 博客园]]

** 返回嵌套对象的问题
   可以通过如下方式完成：
   #+begin_src xml
     <resultMap id="MAP_ID" type="type">
       <association property="type.field" resultMap="OTHER_MAP" />
     </resultMap>
   #+end_src

** mybatis 中 #{} 和 ${} 的区别
   mybatis 中的 #{} 会解析为一个 JDBC 预编译语句的参数标记符，把参数部分用占位符 ? 代替。传入的参数将会经过 PreparedStatement 方法的强制类型检查和安全检查等处理，
   最后作为一个合法的字符串传入。

   而 ${} 只会做简单的字符串替换，在动态 SQL 解析阶段将会进行变量替换。
   
   因此，相对来说，${} 比较适合于需要使用常量的地方。

* 相关链接
  + [[http://www.mybatis.org/mybatis-3/zh/getting-started.html][mybatis – MyBatis 3 | 入门]]
  + [[http://www.mybatis.org/spring/zh/getting-started.html][mybatis-spring – MyBatis-Spring | 入门]]

