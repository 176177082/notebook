#+TITLE:      Java 问题集

* 目录                                                    :TOC_4_gh:noexport:
- [[#怎样执行包中的类][怎样执行包中的类]]
- [[#jdk--jre--jvm-各自的含义是什么][JDK & JRE & JVM 各自的含义是什么]]
- [[#java-的版本号是怎么回事][Java 的版本号是怎么回事]]
- [[#java-常用的构建工具有哪些][Java 常用的构建工具有哪些]]
- [[#java-程序的文件名有什么限制][Java 程序的文件名有什么限制]]
- [[#java-环境变量的配置问题][Java 环境变量的配置问题]]
- [[#java-资源问题][Java 资源问题]]
- [[#内部类引用外部类的实例][内部类引用外部类的实例]]
- [[#java-编程中-bean-类的含义][Java 编程中 Bean 类的含义]]
- [[#null-重载的问题][null 重载的问题]]
- [[#void-和-void-的使用][Void 和 void 的使用]]
- [[#怎样实现静态方法的链式调用][怎样实现静态方法的链式调用]]
- [[#parsexxx-和-valueof-的区别][parseXXX 和 valueOf 的区别]]
- [[#带标签的-break-与-continue-的使用][带标签的 break 与 continue 的使用]]
- [[#同名标识符的优先级][同名标识符的优先级]]
- [[#数组长度允许为-0-的好处][数组长度允许为 0 的好处]]
- [[#类初始化块的执行顺序][类初始化块的执行顺序]]
- [[#java-的命令行参数形式][Java 的命令行参数形式]]
- [[#java-集合中移除原始数据类型的包装对象时是按值还是按对象][Java 集合中移除原始数据类型的包装对象时是按值还是按对象]]
- [[#java-中方法匹配的优先级][Java 中方法匹配的优先级]]
- [[#integerclass-和-intclass][Integer.class 和 int.class]]
- [[#interface-是类吗][Interface 是类吗]]
- [[#子类和父类存在同名的字段][子类和父类存在同名的字段]]
- [[#java-中常用的内置异常有哪些][Java 中常用的内置异常有哪些]]
- [[#javax-开头的包是怎么一回事][javax 开头的包是怎么一回事]]
- [[#java-中为什么不存在-hashable-接口][Java 中为什么不存在 Hashable 接口]]

* 怎样执行包中的类
  #+BEGIN_EXAMPLE
    $ java package.class
  #+END_EXAMPLE

* JDK & JRE & JVM 各自的含义是什么
  Java SE - Java Platform, Standard Edition. Including JRE and JDK.

  + JVM(Java Virtual Machine), Java 虚拟机的缩写.
  + JRE(Java Runtime Environment), Java 运行环境的缩写. 运行 JAVA 程序所必须的环境的集合，
    包括 Java 虚拟机和 Java 程序所需的核心类库等， 如果想要运行一个开发好的 Java 程序，计算机中只需要安装 JRE 即可。
  + JDK(Java Development Kit), Java 开发工具包的缩写. JDK是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，
    也包括了 JRE。所以安装了 JDK，就不用在单独安装 JRE 了。其中的开发工具： 编译工具(javac.exe)  打包工具(jar.exe)等。
  
  参考： [[https://blog.csdn.net/z15732621736/article/details/50603819][JDK、JRE、JVM 简介]]

* Java 的版本号是怎么回事
  |-------------+---------------|
  | Java 版本号 | JDK 版本号    |
  |-------------+---------------|
  | Java        | 1.02 - 1.4    |
  | Java2       | 1.2, 1.3, 1.4 |
  | Java5       | 1.5+          |
  |-------------+---------------|

* Java 常用的构建工具有哪些
  1. Gradle, Android 默认
  2. Maven, 使用者仍然很多
  3. Ant, 要凉

* Java 程序的文件名有什么限制
  + Java 保存的文件名必须与类名一致
  + 如果文件中只有一个类，文件名必须与类名一致
  + 一个 Java 文件中只能有一个 public 类
  + 如果文件中不止一个类，文件名必须与 public 类名一致
  + 如果文件中不止一个类，而且没有 public 类，文件名可与任一类名一致

  参考： [[https://blog.csdn.net/shaoxiaoning/article/details/40424087][Java 的类名与文件名必须一致]]

* Java 环境变量的配置问题
  常用的环境变量： ~JAVA_HOME~, ~CLASSPATH~.

  另外将 ~%JAVA_HOME%/bin~ 加入 ~PATH~ 方便命令行的使用。

  ~CLASSPATH~ 默认为 *当前目录*, 指定规则为：
  1. 对于包含类文件的 JAR 或 zip 文件，以 zip 或 JAR 文件的名称结尾
  2. 对于未命名包中的类文件，以包含类文件的目录结束
  3. 对于包中的类文件，以包含包目录的目录结束

  + [[https://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html][Setting the Class Path]]

* Java 资源问题
  + [[https://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html][Location-Independent Access to Resources]]
  + [[https://www.cnblogs.com/yejg1212/p/3270152.html][关于 Class.getResource 和 ClassLoader.getResource 的路径问题]]
    
  #+BEGIN_SRC java
    Class.getResource("name");   // current_class_file_path/name
    Class.getResource("/name");  // current_classpath/name
  #+END_SRC

  #+BEGIN_EXAMPLE
    + path
      + resource
      + -- Test.class  -- current classpath -- path

    + path
      + resource
      + -- com
           + -- rgbit
                + -- Test.class  -- current classpath -- path

    + path
      + -- com.rgbit.jar  -- current classpath -- path/com.rgbit.jar

    + com.rgbit.jar
      + -- resource
      + -- ...
  #+END_EXAMPLE

  将 ~Resources~ 目录放在顶级包或类的同级目录的原因：该位置就在 ~CLASSPATH~ 下，方便资源的寻找

* 内部类引用外部类的实例
  #+BEGIN_SRC java
    OuterClassName.this;
  #+END_SRC

* Java 编程中 Bean 类的含义
  + [[https://dzone.com/articles/the-bean-class-for-java-programming][The Bean Class for Java Programming]]
    
  Bean 类： 用于聚合或收集原始数据类型的类以及用于在程序中建模数据的类

  多数程序需要定义多个元素或值来描述它们与之交互的数据。这些元素不是单独列出每个元素，
  而是组合在一起成为一个类。

  一些强制性的规则：
  + 所有字段只能是私有的
  + 必须有默认构造函数
  + 读取或写入实例变量的方法必须以前缀 set 或 get 开头
  + bean 类应该实现可序列化的 interfaceOptional

 一些可选的规则：
 + bean 类应该有一个 toString 方法
 + bean 类应该有一个 hashCode 和一个 equals 方法
 + bean 类应该实现 Comparable 接口并具有 compareTo 方法

* null 重载的问题
  #+BEGIN_SRC java
    public class Example {
      public void method(String string) {
        // ....
      }

      public void method(Object object) {
        // ...
      }
    }
  #+END_SRC

  对于上面的代码，如果像这样调用会出现错误：
  #+BEGIN_SRC java
    Example.method(null);
  #+END_SRC

  null 对于两个重载都合适，产生了冲突，解决方案是将 null 赋值给一个引用：
  #+BEGIN_SRC java
    String string = null;
    Example.method(string);
  #+END_SRC

* Void 和 void 的使用
  void 关键字表示无返回值，而 Void 表示需要返回 null, 也只能返回 null.

  在 Lambda 表达式中，不需要返回值时可以用 ~Consumer<T>~, 对于 ~Function<T, Void>~ 来说，
  还是必须要返回 ~null~ 才行。

* 怎样实现静态方法的链式调用
  让静态方法返回指定类型的 null 值就可以了，因为静态方法的调用不依赖于实例：
  #+BEGIN_SRC java
    public class Test {
      public static Test methodA(){
        return null;
      }

      public static Test methodB(){
        return null;
      }
    }

    Test.methodA().methodB();
  #+END_SRC

* parseXXX 和 valueOf 的区别
  Java Primitive Types 的包装类都存在 parseXXX 和 valueOf 这两个方法，它们的作用很相似，
  但也存在区别：
  + parseXXX 返回的是 Primitive Types 类型的值，比如 parseInt 返回 int
  + valueOf 返回的是包装类型的值，比如 Integer.valueOf 返回 Integer

* 带标签的 break 与 continue 的使用
  Java 允许在 break 和 continue 关键字后跟一个 label 进行跳转，然而实际使用这一特性的地方很少，
  如果存在需要使用的地方，可以参考如下链接考虑修改：

  + [[https://stackoverflow.com/questions/14960419/is-using-a-labeled-break-a-good-practice-in-java][Is using a labeled break a good practice in Java? - Stack Overflow]]

* 同名标识符的优先级
  当字段名、类名、方法名、函数参数名、局部变量名存在相同名称时的优先级是怎样的？

  对于这一点，简单的规则是越靠近内部作用域的标识符优先级越高，可以参考：
  + [[https://stackoverflow.com/questions/9960560/java-instance-variable-and-method-having-same-name][java instance variable and method having same name - Stack Overflow]]

  思考：同名标识符的区分是在语义分析阶段完成的吗？

* 数组长度允许为 0 的好处
  数组长度允许为 0 的一个直接好处就是可以避免 null 值：
  #+BEGIN_SRC java
    for(int k = 0; k < strings.length; k++){
      // something
    }
  #+END_SRC

  参考：[[https://stackoverflow.com/questions/4612471/why-does-java-allow-arrays-of-size-0][Why does Java allow arrays of size 0? - Stack Overflow]]

* 类初始化块的执行顺序
  类的静态初始化块在类 *加载* 时安装它们在类中的顺序执行。

  类的初始化块在创建类实例是按照它们在类中的顺序执行。

* Java 的命令行参数形式
  常常可以看见这样相信的命令行参数：
  #+BEGIN_EXAMPLE
    $ java -Dxxx=xxx ...
  #+END_EXAMPLE

  这样类型的参数其实是 JVM 参数，可以通过 ~System.getProperty~ 获取：
  #+BEGIN_SRC java
    System.getProperty("xxx");
  #+END_SRC

  可以参考：[[https://stackoverflow.com/questions/44745261/why-do-jvm-arguments-start-with-d][java - Why do JVM arguments start with "-D"? - Stack Overflow]]

* Java 集合中移除原始数据类型的包装对象时是按值还是按对象
  #+BEGIN_SRC java :results output :classname Test
    import java.util.*;

    public class Test {
      public static void main(String[] args) {
        List<Integer> list = new ArrayList<>();

        list.add(1000);
        list.remove(new Integer(1000));

        System.out.println(list);  // []
      }
    }
  #+END_SRC

* Java 中方法匹配的优先级
  当类型都符合时，选择那个类型宽度的方法呢：
  #+BEGIN_SRC java
    public class Meno {
      public static void m(int... a) {
        System.out.println("int");
      }

      public static void m(short... a) {
        System.out.println("short");
      }

      public static void main(String[] args) {
        m();   // short
      }
    }
  #+END_SRC

  参考：[[https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.12.2.5][Chapter 15. Expressions]]

* Integer.class 和 int.class
  通过 ~java.lang.Class.isPrimitive~ 方法可以判断一个 ~Class~ 是不是 ~Primitive~, 其中：
  + int.class 和 Integer.TYPE 是相同的，都是 Primitive
  + Integer.class 不是 Primitive
    
  参考：[[https://stackoverflow.com/questions/22470985/integer-class-vs-int-class][java - Integer.class vs int.class - Stack Overflow]]

* Interface 是类吗
  #+BEGIN_QUOTE
  An interface isn't a class, but you could say that both interfaces and classes are types.
  #+END_QUOTE

  容易让人迷惑的一点是 Class<T> 可以引用接口或类，容易让人认为 Interface 也是类，但只是名字上的问题。

  #+BEGIN_QUOTE
  In the Java programming language, every variable and every expression has a type that can be determined at compile-time. The type may be a primitive type or a reference type. Reference types include class types and interface types.
  #+END_QUOTE

  参考：[[https://stackoverflow.com/questions/11720288/is-an-interface-a-class][java - Is an interface a class? - Stack Overflow]]

* 子类和父类存在同名的字段
  首先，字段是不会被覆盖的，所以这时子类就存在两个名称相同的字段。

  通过子类引用访问字段时会获取子类的字段，通过父类引用访问字段时会获取父类的字段。

  参考：[[https://stackoverflow.com/questions/3501060/can-parent-and-child-class-in-java-have-same-instance-variable][Can parent and child class in Java have same instance variable? - Stack Overflow]]

* Java 中常用的内置异常有哪些
  |-------------------------------+---------------------------------------|
  | 异常                          | 使用场合                              |
  |-------------------------------+---------------------------------------|
  | IllegalArgumentException      | 参数值不正确                          |
  | IllegalStateException         | 对于方法调用而言，对象的状态不合适    |
  | NullPointerException          | 在禁止使用 null 的情况下参数值为 null |
  | IndexOutOfBoundsException     | 下标参数值越界                        |
  | UnsupportedOperationException | 对象不支持用户请求的方法              |
  |-------------------------------+---------------------------------------|

* javax 开头的包是怎么一回事
  javax 开头的函数库曾经是扩展，后来虽然并入标准库，但是为了兼容程序没有修改名称。

* Java 中为什么不存在 Hashable 接口
  可能的原因在于 Java 存在很好的默认的 hashcode 方法来计算任何对象的 hashcode，参考：
  + [[https://stackoverflow.com/questions/12132880/why-there-is-no-hashable-interface-in-java][Why there is no Hashable interface in Java - Stack Overflow]]


