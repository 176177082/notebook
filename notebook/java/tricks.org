#+TITLE:      Java Tricks

* 目录                                                    :TOC_4_gh:noexport:
- [[#将-priorityqueue-作为最小堆][将 PriorityQueue 作为最小堆]]
- [[#双括号初始化操作][双括号初始化操作]]
- [[#runtime-shutdown-hook][Runtime Shutdown Hook]]
- [[#使用-proxy-对象][使用 Proxy 对象]]
- [[#泛型通配符捕获][泛型通配符捕获]]
- [[#通过-javac-编译一个目录下的所有-java-文件][通过 javac 编译一个目录下的所有 Java 文件]]

* 将 PriorityQueue 作为最小堆
  可以将 PriorityQueue 作为最小堆来使用：
  #+BEGIN_SRC java
    PriorityQueue minHeap = new PriorityQueue();
  #+END_SRC

  同时，只需要简单的变化就可以当做最大对来使用：
  #+BEGIN_SRC java
    Queue maxHeap = new PriorityQueue(Collections.reverseOrder());
  #+END_SRC

* 双括号初始化操作
  可以通过类似如下的方式初始化集合：
  #+BEGIN_SRC java
    new ArrayList<>() {{
      add(1);
      add(2);
    }}
  #+END_SRC

  这种方式的原理：
  1. 外层大括号创建 ArrayList 的匿名子类
  2. 内存大括号是该匿名子类的初始化块

* Runtime Shutdown Hook
  可以通过 ~Runtime.addShutdownHook~ 添加可以在虚拟机关闭时要执行的动作。

* 使用 Proxy 对象
  动态创建实现了指定接口的类，调用这个类的方法的时候实际上是调用内部包装的对象的方法。

  创建：
  #+BEGIN_SRC java
    Proxy.newProxyInstance(null, new Class<?>[] { Comparable.class }, InvocationHandler);
  #+END_SRC

  需要实现的方法：
  #+BEGIN_SRC java
    public Object invoke(Object proxy, Method m, Object[] args) throws Throwable {}
  #+END_SRC

  Timer:
  #+BEGIN_SRC java
    class TimerHandler implements InvocationHandler {
      private Object target;

      public TimerHandler(Object target) {
        this.target = target;
      }

      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        long start = System.currentTimeMillis();
        method.invoke(target, args);
        long end = System.currentTimeMillis();
        System.out.printf("Runtime: %ldms\n", end - start);
      }
    }
  #+END_SRC

* 泛型通配符捕获
  #+BEGIN_SRC java
    public static <T> void helper(Pair<T> p) {
      ...;
    }

    public static void swap(Pair<?> p) {
      helper(p);
    }
  #+END_SRC
  
* 通过 javac 编译一个目录下的所有 Java 文件
  #+BEGIN_SRC sh
    $ find -name "*.java" > sources.txt
    $ javac @sources.txt
  #+END_SRC

  参考：[[https://stackoverflow.com/questions/6623161/javac-option-to-compile-all-java-files-under-a-given-directory-recursively][javac option to compile all java files under a given directory recursively - Stack Overflow]]


