#+TITLE:      Java Misc

* 目录                                                    :TOC_4_gh:noexport:
- [[#序列化][序列化]]
- [[#日期和时间][日期和时间]]
- [[#vector--stack][Vector & Stack]]
- [[#collectiontoarray][Collection.toArray]]
- [[#datatypeconverter][DatatypeConverter]]

* 序列化
  实现了 ~Serializable~ 接口的类的对象可以被 *序列化*, 序列化时， 该对象引用的所有对象也会被自动序列化。

  如果引用的对象中存在不能序列化的对象， 那么序列化会失败。 一种解决方法是用关键字 ~transient~ 修饰不被
  序列化的对象， 序列化时会跳过这些被 ~transient~ 修饰的实例变量。

  如果对象内部存在两个引用同一对象的实例变量， 那么别引用的独享只会保存一次。

  序列化：
  #+BEGIN_SRC java
    import java.io.*;

    FileOutputStream fileStream = new FileOutputStream("object.ser");
    ObjectOutputStream os = new ObjectOutputStream(fileStream);

    os.writeObject(object);
    os.close();
  #+END_SRC

  解序列化时， 对象重流中读取出来， 通过存储的信息判断出对象的类， 如果 java 虚拟机找不到
  或无法加载该类， 则虚拟机会抛出异常。

  新的对象会二笔直接配置在堆上， 构造函数不会被执行。

  如果对象的继承树上有个不可序列化的祖先类， 那么重该类开始及其以上的类的构造函数都会被执行。

  对象的实例变量会被还原为序列化时的状态， transient 变量被还原为对应类型的 *默认值*.

  *静态变量* 不会被序列化。 解序列化时也不会影响静态变量的值。

  解序列化：
  #+BEGIN_SRC java
    import java.io.*;

    FileInputStream fileStream = new FileInputStream("object.ser");
    ObjectInputStream os = new ObjectInputStream(fileStream);

    Object obj = os.readObject();  // 通过强制类型转换转换为其他类型
    os.close()
  #+END_SRC

* 日期和时间
  日期格式化：
  #+BEGIN_SRC java
    // 完整日期和时间
    String.format("%tc", new Date());

    // 只有时间
    String.format("%tr", new Date());

    // 周， 月， 日 - %tA, %tB, %td
    String.format("%tA %<tB %<td", new Date());
  #+END_SRC

  取得当前日期和时间使用 ~Date~.

  其余功能可以使用 ~Calendar~.

* Vector & Stack
  ~Vector~ 和 ~ArrayList~ 两者都实现 ~List~ 接口，但 ~Vector~ 支持线程同步，即某一时刻只有一个线程能够写 ~Vector~.

  因此 ~Vector~ 较 ~ArrayList~ 慢一些。

  而 ~Vector~ 的子类 ~Stack~ 实现了一个标准的后进先出的栈，一般使用还是使用 ~Deque~ 比较好。
  
  |--------------+-------------------------|
  | Stack Method | Equivalent Deque Method |
  |--------------+-------------------------|
  | push(e)      | addFirst(e)             |
  | pop()        | removeFirst()           |
  | peek()       | peekFirst()             |
  |--------------+-------------------------|

* Collection.toArray
  #+BEGIN_SRC java
    // ArraysList.toArray()
    public <T> T[] toArray(T[] a) {
      if (a.length < size)
        // Make a new array of a's runtime type, but my contents:
        return (T[]) Arrays.copyOf(elementData, size, a.getClass());
      System.arraycopy(elementData, 0, a, 0, size);
      if (a.length > size)
        a[size] = null;
      return a;
    }
  #+END_SRC
  
  因此，简单的使用不需要考虑传入参数的长度：
  #+BEGIN_SRC java
    list.toArray(new Integer[0]);
  #+END_SRC

* DatatypeConverter
  ~javax.xml.bind.DatatypeConverter~ 是一个挺有用的工具类，包括将字节数组转化为 16 进制字符串这样的方法。

  官方文档：[[https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/DatatypeConverter.html#printHexBinary-byte:A-][DatatypeConverter (Java Platform SE 8 )]]

