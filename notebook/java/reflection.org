#+TITLE:      Java - 反射

* 目录                                                    :TOC_4_gh:noexport:
- [[#classes][Classes]]
  - [[#获取类对象][获取类对象]]
  - [[#获取类修饰符和类型][获取类修饰符和类型]]
  - [[#获取类成员][获取类成员]]
- [[#members][Members]]
- [[#arrays][Arrays]]
- [[#enumerated][Enumerated]]
- [[#泛型][泛型]]
  - [[#获取类型参数][获取类型参数]]
- [[#hierarchy][Hierarchy]]
- [[#相关问题][相关问题]]
  - [[#如果通过反射获取一个包下的所有类][如果通过反射获取一个包下的所有类]]

* Classes
  对于每种类型对象，Java 虚拟机都实例化 ~java.lang.Class~ 的不可变实例，该实例提供了检查对象的运行时属性的方法，包括其成员和类型信息。

** 获取类对象
   所有反射操作的入口点是 ~java.lang.Class~. 除了 ~java.lang.reflect.ReflectPermission~ 之外， ~java.lang.reflect~ 中的所有类都没有公共构造函数。

   因此，要获得这些类，都需要在 ~Class~ 上调用适当的方法。

   + *Object.getClass()*

     对于任意一个对象实例，都可以通过 ~Object.getClass()~ 方法获取其类对象。

     *NOTE:* 每个枚举值都是该枚举类的唯一实例。

     #+BEGIN_SRC java
       // string
       Class c = "foo".getClass();

       // enum
       enum E { A, B }
       Class c = A.getClass();

       // array
       byte[] bytes = new byte[1024];
       Class c = bytes.getClass();

       // collection
       Set<String> s = new HashSet<String>();
       Class c = s.getClass();
     #+END_SRC

   + *The .class Syntax*

     这是一个语法特性，并不是在说每个类对象都存在 ~class~ 这个字段。

     #+BEGIN_SRC java
       boolean b;
       Class c = b.getClass();   // compile-time error

       Class c = boolean.class;  // correct

       Class c = java.io.PrintStream.class;
       Class c = int[][][].class;
     #+END_SRC

     没有引用到实例的引用是无法使用 ~Object.getClass()~ 的吗？

   + *Class.forName()*
     
     这种方式给我一种 ~eval()~ 的感觉......

     #+BEGIN_SRC java
       Class c = Class.forName("com.duke.MyLocaleServiceProvider");
     #+END_SRC

     而且，用在数组上才是最骚的：
     #+BEGIN_SRC java
       Class cDoubleArray = Class.forName("[D");

       Class cStringArray = Class.forName("[[Ljava.lang.String;");
     #+END_SRC

   + *TYPE Field for Primitive Type Wrappers*
     
     原始数据类型的包装类型可以通过 ~TYPE~ 这个 *字段* 来获取对应的类对象。

     #+BEGIN_SRC java
       Class c = Double.TYPE;
       Class c = Void.TYPE;
     #+END_SRC

     emmm, void 是类型吗？

   + *Methods that Return Classes*

     有一堆方法可以返回一个类对象，而且是看名字就知道用法的那种：
     #+BEGIN_SRC java
       Class.getSuperclass();
       Class.getClasses();
       Class.getDeclaredClasses();
       Class.getDeclaringClass();
       java.lang.reflect.Field.getDeclaringClass();
       java.lang.reflect.Method.getDeclaringClass();
       java.lang.reflect.Constructor.getDeclaringClass();
       Class.getEnclosingClass();
     #+END_SRC

     无限反射，最为致命。

** 获取类修饰符和类型
   #+BEGIN_QUOTE
   Access modifiers: ~public~, ~protected~, and ~private~
   Modifier requiring override: ~abstract~
   Modifier restricting to one instance: ~static~
   Modifier prohibiting value modification: ~final~
   Modifier forcing strict floating point behavior: ~strictfp~
   *Annotations*
   #+END_QUOTE

   实现这一操作的关键类是： [[https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html][java.lang.reflect.Modifier]].

   官网教程的一个例子：
   #+BEGIN_SRC java
     import java.lang.annotation.Annotation;
     import java.lang.reflect.Modifier;
     import java.lang.reflect.Type;
     import java.lang.reflect.TypeVariable;
     import java.util.Arrays;
     import java.util.ArrayList;
     import java.util.List;

     public class ClassDeclarationSpy {
       public static void main(String... args) {
         try {
           Class<?> c = Class.forName(args[0]);
           System.out.format("Class:%n  %s%n%n", c.getCanonicalName());  // 获取完整类名，包括包名
           System.out.format("Modifiers:%n  %s%n%n",
                             Modifier.toString(c.getModifiers()));  // 获取修饰符

           System.out.format("Type Parameters:%n");
           TypeVariable[] tv = c.getTypeParameters();  // 获取类型参数
           if (tv.length != 0) {
             System.out.format("  ");
             for (TypeVariable t : tv)
               System.out.format("%s ", t.getName());  // 获取类型参数的名称
             System.out.format("%n%n");
           } else {
             System.out.format("  -- No Type Parameters --%n%n");
           }

           System.out.format("Implemented Interfaces:%n");
           Type[] intfs = c.getGenericInterfaces();  // 获取实现的接口
           if (intfs.length != 0) {
             for (Type intf : intfs)
               System.out.format("  %s%n", intf.toString());  // 接口名称
             System.out.format("%n");
           } else {
             System.out.format("  -- No Implemented Interfaces --%n%n");
           }

           System.out.format("Inheritance Path:%n");
           List<Class> l = new ArrayList<Class>();
           printAncestor(c, l);  // 获取所有父类
           if (l.size() != 0) {
             for (Class<?> cl : l)
               System.out.format("  %s%n", cl.getCanonicalName());  // 父类名称
             System.out.format("%n");
           } else {
             System.out.format("  -- No Super Classes --%n%n");
           }

           System.out.format("Annotations:%n");
           Annotation[] ann = c.getAnnotations();  // 获取注解类
           if (ann.length != 0) {
             for (Annotation a : ann)
               System.out.format("  %s%n", a.toString());
             System.out.format("%n");
           } else {
             System.out.format("  -- No Annotations --%n%n");
           }

           // production code should handle this exception more gracefully
         } catch (ClassNotFoundException x) {
           x.printStackTrace();
         }
       }

       private static void printAncestor(Class<?> c, List<Class> l) {
         Class<?> ancestor = c.getSuperclass();
         if (ancestor != null) {
           l.add(ancestor);
           printAncestor(ancestor, l);
         }
       }
     }
   #+END_SRC

** 获取类成员
   官方教程贴心的列出了表格：

   #+CAPTION: 获取字段
   |---------------------+------------+--------------+------------|
   | Class API           | 成员列表？ | 继承的成员？ | 私有成员？ |
   |---------------------+------------+--------------+------------|
   | getDeclaredField()  | no         | no           | yes        |
   | getField()          | no         | yes          | no         |
   | getDeclaredFields() | yes        | no           | yes        |
   | getFields()         | yes        | yes          | no         |
   |---------------------+------------+--------------+------------|

   #+CAPTION: 获取方法
   |----------------------+------------+--------------+------------|
   | Class API            | 成员列表？ | 继承的成员？ | 私有成员？ |
   |----------------------+------------+--------------+------------|
   | getDeclaredMethod()  | no         | no           | yes        |
   | getMethod()          | no         | yes          | no         |
   | getDeclaredMethods() | yes        | no           | yes        |
   | getMethods()         | yes        | yes          | no         |
   |----------------------+------------+--------------+------------|

   #+CAPTION: 构造函数
   |---------------------------+------------+--------------+------------|
   | Class API                 | 成员列表？ | 继承的成员？ | 私有成员？ |
   |---------------------------+------------+--------------+------------|
   | getDeclaredConstructor()  | no         | N/A1         | yes        |
   | getConstructor()          | no         | N/A1         | no         |
   | getDeclaredConstructors() | yes        | N/A1         | yes        |
   | getConstructors()         | yes        | N/A1         | no         |
   |---------------------------+------------+--------------+------------|

   *NOTE:* 构造函数不是继承的

   官网的例子：
   #+BEGIN_SRC java
     import java.lang.reflect.Constructor;
     import java.lang.reflect.Field;
     import java.lang.reflect.Method;
     import java.lang.reflect.Member;
     import static java.lang.System.out;

     enum ClassMember { CONSTRUCTOR, FIELD, METHOD, CLASS, ALL }

     public class ClassSpy {
       public static void main(String... args) {
         try {
           Class<?> c = Class.forName(args[0]);
           out.format("Class:%n  %s%n%n", c.getCanonicalName());

           Package p = c.getPackage();  // 获取所在的包
           out.format("Package:%n  %s%n%n",
                      (p != null ? p.getName() : "-- No Package --"));

           for (int i = 1; i < args.length; i++) {
             switch (ClassMember.valueOf(args[i])) {
               case CONSTRUCTOR:
                 printMembers(c.getConstructors(), "Constructor");
                 break;
               case FIELD:
                 printMembers(c.getFields(), "Fields");
                 break;
               case METHOD:
                 printMembers(c.getMethods(), "Methods");
                 break;
               case CLASS:
                 printClasses(c);
                 break;
               case ALL:
                 printMembers(c.getConstructors(), "Constuctors");
                 printMembers(c.getFields(), "Fields");
                 printMembers(c.getMethods(), "Methods");
                 printClasses(c);
                 break;
               default:
                 assert false;
             }
           }

           // production code should handle these exceptions more gracefully
         } catch (ClassNotFoundException x) {
           x.printStackTrace();
         }
       }

       private static void printMembers(Member[] mbrs, String s) {
         out.format("%s:%n", s);
         for (Member mbr : mbrs) {
           if (mbr instanceof Field)
             out.format("  %s%n", ((Field)mbr).toGenericString());
           else if (mbr instanceof Constructor)
             out.format("  %s%n", ((Constructor)mbr).toGenericString());
           else if (mbr instanceof Method)
             out.format("  %s%n", ((Method)mbr).toGenericString());
         }
         if (mbrs.length == 0)
           out.format("  -- No %s --%n", s);
         out.format("%n");
       }

       private static void printClasses(Class<?> c) {
         out.format("Classes:%n");
         Class<?>[] clss = c.getClasses();
         for (Class<?> cls : clss)
           out.format("  %s%n", cls.getCanonicalName());
         if (clss.length == 0)
           out.format("  -- No member interfaces, classes, or enums --%n");
         out.format("%n");
       }
     }
   #+END_SRC

* Members
  + Fields :: 字段包含类型和值，类 ~java.lang.reflect.Field~ 提供了获取类型信息、设置和获取值的方法。

  + Methods :: 方法具有返回值和参数，并可能抛出异常，类 ~java.lang.reflect.Method~ 提供了获取参数和返回值的类型信息的方法，
               也可以用于调用给定对象的方法。

  + Constructors :: 构造函数的反射接口由类 ~java.lang.reflect.Constructor~ 提供，和方法类似，但是，构造函数没有返回值，
                    调用构造函数会为给定的类创建一个新实例。

  详细教程链接：
  + [[https://docs.oracle.com/javase/tutorial/reflect/member/field.html][Fileds]]
  + [[https://docs.oracle.com/javase/tutorial/reflect/member/method.html][Methods]]
  + [[https://docs.oracle.com/javase/tutorial/reflect/member/ctor.html][Constructors]]
    
* Arrays
  和数组有关的反射接口由类 ~java.lang.reflect.Array~ 提供。

  可以通过方法 ~Class.isArray()~ 来判断该类是否为 *数组类*, 需要注意的是，这个不是静态方法。

  可以通过方法 ~java.lang.reflect.Array.newInstance()~ 创建一个新的数组，这是一个静态方法。

  详细教程链接： [[https://docs.oracle.com/javase/tutorial/reflect/special/array.html][Arrays]]

* Enumerated
  和枚举有关的反射接口：
  #+BEGIN_SRC java
    Class.isEnum();  // 判断一个类是否为枚举类
    Class.getEnumConstants();  // 按照它们声明的顺序检索枚举定义的枚举常量列表
    java.lang.reflect.Field.isEnumConstant();  // 判断该字段是否为枚举类型的变量
  #+END_SRC
  
  详细教程链接： [[https://docs.oracle.com/javase/tutorial/reflect/special/enum.html][Enumerated Types]]

  和枚举有关的操作可以通过类 [[https://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html][java.lang.Enum]] 完成。
  
* 泛型
  Java 泛型是一个很重要也很常用的一个功能，但是在编写相关的具有解析泛型类的功能的工具时问题就出现了：
  + 由于类型擦除的原因，我们无法直接获取一个泛型对象的类型参数，比如：List<String> 类型的对象我们只能拿到 List 这个类型，而无法获取重要的类型参数 String
  + List<String, String>.class 是行不通的，语法都不正确
  + 直接的 Class 对象只能拿到当前类型参数的名称，比如：T、K、E 什么的，是拿不到实际的类型的

  为了解决这个问题，只能绕一些远路：
  + 如果目标对象是一个类的字段或者方法的参数或返回值，那么，我们可以通过 Field 和 Method 对象的接口拿到 ParameterizedType 从而拿到泛型类型
  + 或者创建目标类型的子类，通过 Class.getGenericSuperclass 拿到 ParameterizedType 从而拿到泛型类型

  比如说，Gson 中的 TypeToken 采用的方式（简化的代码）：
  #+begin_src java
    public abstract class TypeToken<T> {
      private final Type type;

      /**
       ,* Automatically get generic parameters when a subclass instance is created.
       ,*/
      protected TypeToken() {
        this.type = getSuperclassTypeParameter(getClass());
      }

      /**
       ,* Get the type parameter of the generic parent class.
       ,*/
      private static Type getSuperclassTypeParameter(Class<?> subclass) {
        Type superclass = subclass.getGenericSuperclass();
        if (superclass instanceof Class) {
          throw new RuntimeException("Missing type parameter.");
        }
        ParameterizedType parameterized = (ParameterizedType) superclass;
        return parameterized.getActualTypeArguments()[0];
      }

      public Type getType() {
        return type;
      }
    }
  #+end_src
  
  使用的时候：
  #+begin_src java
    new TypeToken<List<String>>() {}.getType();
  #+end_src

** 获取类型参数
   Java 反射中的 Type 接口只有一个实现类为 Class，但是它有四个子接口，描述了 Java 泛型的四种形式：
   + GenericArrayType - 类似于 T[] 的情况
   + ParameterizedTyp - 类似于 List<T> 的情况
   + TypeVariable<T> - 表示泛型声明的参数类型
   + WildcardType - 通配符类型表达式
     
   可以在以下情况中得到泛型实际类型参数：
   1. 类成员变量类型的泛型参数：
      #+begin_src java
        public class Test {
          private Map<String, Integer> map = new HashMap<String,Integer>();
        }
      #+end_src
   2. 类成员方法返回值和类成员方法参数的泛型参数：
      #+begin_src java
        public class Test {
          public List<Integer> test(List<String> list) {
            return new ArrayList<Integer>();
          }
        }
      #+end_src
   3. 类构造函数的参数类型的泛型参数
   4. 通过 extends 在子类指定父类中泛型变量具体类型的，可获取父类泛型的具体类型  

   需要注意的是，下面的情况是拿不到实际类型参数的：
   #+begin_src java
     interface Super<T> {
       T method();
     }

     // 拿不到
     interface Child extends Super<Integer> {}

     // 拿不到
     interface Test {
       <T> T method();
     }
   #+end_src
   
   参考：
   + [[https://blog.csdn.net/qq_30698633/article/details/76671547][Java 通过反射获取泛型实际类型总结 - _qq_30698633 的博客 - CSDN 博客]]

* Hierarchy
  部分类的继承结构：
  #+begin_example
    + java.lang.Object
      + java.lang.reflect.AccessibleObject
        + java.lang.reflect.Executable        # 可执行
          + java.lang.reflect.Constructor<T>  # 构造方法
          + java.lang.reflect.Method          # 方法
        + java.lang.reflect.Field             # 字段
      + java.lang.reflect.Array               # 数组
      + java.lang.reflect.Modifier            # 访问修饰符
      + java.lang.reflect.Parameter           # 参数c
  #+end_example

  部分接口的继承结构：
  #+begin_example
    + java.lang.reflect.AnnotatedElement
      + java.lang.reflect.AnnotatedType                  # 带注解的类型，当包装的类型没有注解时返回的注解为空
        + java.lang.reflect.AnnotatedArrayType
        + java.lang.reflect.AnnotatedParameterizedType
        + java.lang.reflect.AnnotatedTypeVariable
        + java.lang.reflect.AnnotatedWildcardType
      + java.lang.reflect.GenericDeclaration
      + java.lang.reflect.TypeVariable<D>                # 类型变量，Class<K, V> 中的 K, V 
    + java.lang.reflect.Member
    + java.lang.reflect.Type
      + java.lang.reflect.GenericArrayType
      + java.lang.reflect.ParameterizedType
      + java.lang.reflect.TypeVariable<D>
      + java.lang.reflect.WildcardType
  #+end_example

  简单来看的话，包 ~java.lang.reflect~ 下提供的功能主要就是各种类信息的访问操作和 Proxy 动态代理了。

* 相关问题
** 如果通过反射获取一个包下的所有类
   虽然确实存在 ~Package~ 这个类型，但是，这个类型时无法拿来获取包下的类的，要获取一个包下的类只有一种办法：遍历读取……

   简单除暴直接的处理方式，比如 Spring，直接用 ASM 读取字节码里面的元数据……

   简直幻灭了……一直以为有反射接口的啊……

