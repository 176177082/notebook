#+TITLE:      Java - I/O 操作

* 目录                                                    :TOC_4_gh:noexport:
- [[#refrence][Refrence]]
- [[#io-streams][I/O Streams]]
  - [[#byte-streams][Byte Streams]]
  - [[#character-streams][Character Streams]]
  - [[#buffered-streams][Buffered Streams]]
  - [[#scanning][Scanning]]
  - [[#formatting][Formatting]]
  - [[#io-from-the-command-line][I/O from the Command Line]]
  - [[#data-streams][Data Streams]]
  - [[#object-streams][Object Streams]]
- [[#file-io][File I/O]]
  - [[#path-object][Path Object]]
  - [[#file-operations][File Operations]]
  - [[#checking-a-file-or-directory][Checking a File or Directory]]
  - [[#managing-metadata][Managing Metadata]]
  - [[#reading-writing-and-creating-files][Reading, Writing, and Creating Files]]
  - [[#walking-the-file-tree][Walking the File Tree]]

* Refrence
  + [[https://docs.oracle.com/javase/tutorial/essential/io/index.html][Lesson: Basic I/O]]

* I/O Streams
  输入输出流代表对应的 *输入源* 或 *输出目标*.

** Byte Streams
   程序使用字节流来执行 8 位字节的输入和输出，所有字节流类都来自 ~InputStream~ 和 ~OutputStream~.

   提供文件字节流的类为： ~FileInputStream~ 和 ~FileOutputStream~.

** Character Streams
   Java 内部使用 Unicode 来存储字符值，在输入输出时会自动和本地字符集进行转换。

   所有字符流都来自 ~Reader~ 和 ~Writer~.

   同样，提供文件字符流的类为： ~FileReader~ 和 ~FileWriter~.

   字符流通常是对字节流的 *封装*. 使用字节流来执行物理 I/O，而字符流处理字符和字节之间的转换。

   对于 *字符流*, 可以使用缓冲区进行封装，即使用 ~BufferedReader~ 和 ~PrintWriter~.

   *NOTE:* ~PrintWriter~ 比 ~BufferedWriter~ 好用些。

   通过缓冲区，可以判断 *行* 这一单位。

** Buffered Streams
   通过缓冲区来更加高效的进行输入输出，毕竟，频繁的 I/O 操作是很费时的。

   使用 ~BufferedInputStream~ 和 ~BufferedOutputStream~ 来为 *字节流* 添加缓冲区。

   使用 ~BufferedReader~ 和 ~BufferedWriter~ 来为 *字符流* 添加缓冲区。

   必要时，应该 ~flush~ 缓冲区，部分缓冲区输出流支持自动 ~flush~.

** Scanning
   #+BEGIN_SRC java
     import java.io.FileReader;
     import java.io.BufferedReader;
     import java.io.IOException;
     import java.util.Scanner;

     public class ScanSum {
       public static void main(String[] args) throws IOException {

         Scanner s = null;
         double sum = 0;

         try {
           s = new Scanner(new BufferedReader(new FileReader("usnumbers.txt")));

           while (s.hasNext()) {
             if (s.hasNextDouble()) {
               sum += s.nextDouble();
             } else {
               s.next();
             }
           }
         } finally {
           s.close();
         }

         System.out.println(sum);
       }
     }
   #+END_SRC

   + [[https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html][Class Scanner]]

** Formatting
   #+BEGIN_SRC java
     public class Root {
       public static void main(String[] args) {
         int i = 2;
         double r = Math.sqrt(i);

         System.out.format("The square root of %d is %f.%n", i, r);
       }
     }
   #+END_SRC
   
   支持格式化的输出流有： ~PrintWriter~ 和 ~PrintStream~.

   通常情况下， ~PrintStream~ 是 ~System.out~ 和 ~System.err~, 其他地方一般用 ~PrintWriter~.

** I/O from the Command Line
   最直接的方式是用标准输入流 ~System.in~, 但更好的选择为 ~Console~ 对象。

   + [[https://docs.oracle.com/javase/8/docs/api/java/io/Console.html][Class Console]]

   如果读取的数据不只是 *字符串* 的话，用 ~Scanner~ 是一个更好的选择。

** Data Streams
   数据流支持原始数据类型和字符串的 *字节流* I/O 操作，所有数据流都实现 ~DataInput~ 和 ~DataOutput~.

   使用的最广泛的实现为： ~DataInputStream~ 和 ~DataOutputStream~.

   #+BEGIN_SRC java
     // data
     static final String dataFile = "invoicedata";

     static final double[] prices = { 19.99, 9.99, 15.99, 3.99, 4.99 };
     static final int[] units = { 12, 8, 13, 29, 50 };
     static final String[] descs = {
       "Java T-shirt",
       "Java Mug",
       "Duke Juggling Dolls",
       "Java Pin",
       "Java Key Chain"
     };

     // output
     out = new DataOutputStream(new BufferedOutputStream(
         new FileOutputStream(dataFile)));
     for (int i = 0; i < prices.length; i ++) {
       out.writeDouble(prices[i]);
       out.writeInt(units[i]);
       out.writeUTF(descs[i]);
     }

     // input
     in = new DataInputStream(new
                              BufferedInputStream(new FileInputStream(dataFile)));
     try {
       while (true) {
         price = in.readDouble();
         unit = in.readInt();
         desc = in.readUTF();
         System.out.format("You ordered %d" + " units of %s at $%.2f%n",
                           unit, desc, price);
         total += unit * price;
       }
     } catch (EOFException e) {
     }
   #+END_SRC

** Object Streams
   对象输入输出流 - *序列化*

* File I/O
  高版本的 Java 提供了一些更加高效的接口来操作文件。

** Path Object
   Path 是一个接口，可以通过类 ~Paths~ 来获取 ~Path~ 实例：
   #+BEGIN_SRC java
     Paths.get(String first, String... more)
     Paths.get(URI uri)
   #+END_SRC

   Path 提供的方法： [[https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html][Interface Path]]

** File Operations
   ~Files~ 是包 ~java.nio.file~ 提供的另一个高级的文件操作对象。

   这一节提供的 API 都实现了 ~CloseAble~ 接口，意味着都应该显示调用 ~close~ 方法以释放系统资源。

   同时，操作出现异常会抛出 ~java.io.IOException~.

   ~Files~ 提供了文件复制，移动，删除等高级操作方法，更多的方法： [[https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html][Class Files]]

   *NOTE:* 方法 ~deleteIfExists(Path)~ 删除文件更安全。

   方法如 ~newDirectoryStream~ 存在支持 ~Glob~ 语法的重载，返回的对象可以用于遍历目录下的对象。

** Checking a File or Directory
   验证文件或目录是否存在：
   #+BEGIN_SRC java
     Files.exists(Path path);
     Files.notExists(Path path);
   #+END_SRC

   检查文件的可访问性：
   #+BEGIN_SRC java
     Path file = ...;
     boolean isRegularExecutableFile = Files.isRegularFile(file) &
         Files.isReadable(file) & Files.isExecutable(file);
   #+END_SRC

   检查两个路径是否代表同一对象：
   #+BEGIN_SRC java
     Files.isSameFile(Path p1, Path p2);
   #+END_SRC

** Managing Metadata
   ~Files~ 提供了一些基本的方法来获取操作文件元数据，也提供了两个方法来批量操作属性。

   |-----------------------------------------------+----------------------------------|
   | 方法                                          | 作用                             |
   |-----------------------------------------------+----------------------------------|
   | ~readAttributes(Path, String, LinkOption...)~   | 读取 ~String~ 指定的属性           |
   | ~readAttributes(Path, Class<A>, LinkOption...)~ | 属性保存到 ~Class<A>~ 对象中并返回 |
   |-----------------------------------------------+----------------------------------|

   *NOTE:* Class<A> 是一个 [[https://docs.oracle.com/javase/8/docs/api/java/nio/file/attribute/BasicFileAttributes.html][BasicFileAttributes]].

   #+BEGIN_SRC java
     BasicFileAttributes attr = Files.readAttributes(file, BasicFileAttributes.class);
   #+END_SRC

** Reading, Writing, and Creating Files
   枚举 ~StandardOpenOptions~ 定义了 ~OpenOptions~.

   小文件常用的方法：
   #+BEGIN_SRC java
     // 从一个文件读取所有字节或者行
     readAllBytes(Path);
     readAllLines(Path, Charset);

     // 将所有字节或者行写入文件
     write(Path, byte[], OpenOption...);
     write(Path, Iterable< extends CharSequence>, Charset, OpenOption...);
   #+END_SRC

   文本文件的缓冲 I/O方法：
   #+BEGIN_SRC java
     // 获取对应文件的 BufferedReader
     Files.newBufferedReader(Path, Charset);

     // 获取对应文件的 BufferedWriter
     Files.newBufferedWriter(Path, Charset, OpenOption...);
   #+END_SRC

   无缓冲流的方法：
   #+BEGIN_SRC java
     // 输入流
     Files.newInputStream(Path, OpenOption...);

     // 输出流
     Files.newOutputStream(Path, OpenOption...);
   #+END_SRC

   [[https://docs.oracle.com/javase/tutorial/essential/io/file.html][Reading, Writing, and Creating Files]]

** Walking the File Tree
   遍历文件树的高级方式，使用 ~walkFileTree(Path, FileVisitor)~.

   首先实现 ~FileVisitor~ 接口，接口方法：
   + ~preVisitDirectory~ - 访问目录前调用
   + ~postVisitDirectory~ - 访问目录后调用
   + ~visitFile~ - 访问文件时调用
   + ~visitFileFailed~ - 访问文件出错后调用

   Example:
   #+BEGIN_SRC java
     import static java.nio.file.FileVisitResult.*;

     public static class PrintFiles
         extends SimpleFileVisitor<Path> {

         // Print information about
         // each type of file.
         @Override
         public FileVisitResult visitFile(Path file,
                                        BasicFileAttributes attr) {
             if (attr.isSymbolicLink()) {
                 System.out.format("Symbolic link: %s ", file);
             } else if (attr.isRegularFile()) {
                 System.out.format("Regular file: %s ", file);
             } else {
                 System.out.format("Other: %s ", file);
             }
             System.out.println("(" + attr.size() + "bytes)");
             return CONTINUE;
         }

         // Print each directory visited.
         @Override
         public FileVisitResult postVisitDirectory(Path dir,
                                               IOException exc) {
             System.out.format("Directory: %s%n", dir);
             return CONTINUE;
         }

         // If there is some error accessing
         // the file, let the user know.
         // If you don't override this method
         // and an error occurs, an IOException 
         // is thrown.
         @Override
         public FileVisitResult visitFileFailed(Path file,
                                            IOException exc) {
             System.err.println(exc);
             return CONTINUE;
         }
     }
   #+END_SRC

   使用：
   #+BEGIN_SRC java
     Path startingDir = ...;
     PrintFiles pf = new PrintFiles();
     Files.walkFileTree(startingDir, pf);
   #+END_SRC

   + [[https://docs.oracle.com/javase/tutorial/essential/io/walk.html][Walking the File Tree]]

