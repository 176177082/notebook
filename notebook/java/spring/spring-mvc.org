#+TITLE:      Spring MVC

* 目录                                                    :TOC_4_gh:noexport:
- [[#配置][配置]]
- [[#控制器和视图解析器][控制器和视图解析器]]
- [[#请求处理方法][请求处理方法]]
  - [[#requestparam--requestbody][@RequestParam & @RequestBody]]
- [[#控制流程][控制流程]]
- [[#过滤器和拦截器][过滤器和拦截器]]
- [[#相关问题][相关问题]]
  - [[#响应头中的编码配置][响应头中的编码配置]]
  - [[#怎样处理静态资源][怎样处理静态资源]]
  - [[#运行时值注入使用的-classpath-代表的是什么][运行时值注入使用的 classpath 代表的是什么]]
  - [[#怎样生成-rest-api-的文档][怎样生成 REST API 的文档]]
  - [[#注解-component-repository-controller-和-service-的区别][注解 @Component, @Repository, @Controller 和 @Service 的区别]]
  - [[#怎样自定义响应码][怎样自定义响应码]]

* 配置
  通过 Java 配置时，鉴于初始化会获取所有实现 WebApplicationInitializer 的类，那么我们可以实现这一接口，在这个接口的 onStartup 方法中借助 Servlet 3.0 进行动态配置。

  #+begin_src java
    @HandlesTypes(WebApplicationInitializer.class)
    public class SpringServletContainerInitializer implements ServletContainerInitializer {}
  #+end_src

  特别的：
  + AbstractAnnotationConfigDispatcherServletInitializer 的子类可以覆盖 customRegistrantion 进行额外的配置
  + 过滤器的配置可以通过覆盖 getServletFilters 方法完成

  通过 XML 进行配置时，需要分别指定 DispatcherServlet 和 ContextLoaderListener 上下文的配置文件。

  但也可以通过指定上下文类的方式指定使用 Java 配置，即：在 DispatcherServlet 和 ContextLoaderListener 的初始化参数中指定上下文为 AnnotationConfigWebApplicationContext，
  并指定配置类。

  估计默认情况下使用的是 XmlWebApplicationContext。

  相关链接：[[https://github.com/rgb-24bit/blog/blob/master/2019/javaee-servlet30-springmvc.org][Java EE - Servlet 3.0 和 Spring MVC]]

* 控制器和视图解析器
  控制器：
  1. 使用注解 Controller 声明为控制器
  2. 使用 RequestMapping 声明路径映射
  3. 客户端数据获取：查询参数、表单参数和路径变量
  4. 表单效验可以通过注解实现

  视图解析器：
  1. SpringMVC 定义的视图解析器接口为：
     #+BEGIN_SRC java
       public interface ViewResolver {
         View resolverViewName(String viewName, Locale locale);
       }
     #+END_SRC

     方法 resolverViewName 会返回 View 实例。

  2. View 接口的定义：
     #+BEGIN_SRC java
       public interface View {
         void render(Map<String, ?> model, req, resp);
       }
     #+END_SRC

     方法 render 接受模型数据，请求和响应对象，渲染数据输入的响应。

  3. 使用 JSP 时，如果需要使用 JSTL，那么应该使用 JstlView。也就是说默认的视图不会渲染 JSTL 标签？

* 请求处理方法
  Handler 方法：支持灵活的方法签名（参数和返回值），同时支持 java 8 Optional 作为具有 require 属性的注解参数，require 默认为 false。

  官方文档：
  + [[https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-arguments][Web on Servlet Stack - Handler Methods - Method Arguments]]
  + [[https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-return-types][Web on Servlet Stack - Handler Methods - Return Values]]

  Trick:
  + 对于部分字符串形式的参数，Spring 支持自动将它们转换为其他类型，比如 int、long、Date
  + 可以通过 @RequestBody 将请求主体转换为对象，还可以和 @Valid 配合使用
  + 可以通过 @ResponseBody 将返回对象转为为响应主体

** @RequestParam & @RequestBody
   @RequestParam 常用来处理 Content-Type 为 application/x-www-form-urlencoded 编码的内容，而 @ResponseBody 更多的用来处理 application/json 类型的数据。

   参考：
   + [[https://www.cnblogs.com/zeroingToOne/p/8992746.html][@RequestParam、@RequestBody 和 @ModelAttribute 区别 - zeroingToOne - 博客园]]

* 控制流程
  应用上下文的创建与配置：
  1. Servlet 容器寻找实现了 ServletContainerInitializer 的对象，Spring 中的是 SpringServletContainerInitializer，
     它会要求容器找到所有 WebApplicationInitializer 并传递给它
  2. SpringServletContainerInitializer 会创建 DispatcherServlet 和 ContextLoaderListener，两者会分别拥有一个应用上下文
  3. 我们的 WebApplicationInitializer 实现中，方法 getServletMapping 配置 DispatcherServlet 的路径映射，getRootConfigClasses 提供 ContextLoaderListener 应用上下文的配置，
     getServletConfigClasses 提供 DispatcherServlet 应用上下文的配置
  4. 通常，我们会在 DispatcherServlet 上下文中配置视图解析器，静态资源处理，而 ContextLoaderListener 上下文中配置其他 Bean。

  请求的处理：
  1. 请求首先会到达 DispatcherServlet，然后会查询处理器映射找到与请求对应的控制器
  2. 控制器处理请求，产生需要返回给用户的信息 Model 并返回 *视图名*
  3. 视图解析器根据视图名找到视图
  4. 视图处渲染数据并返回给用户

* 过滤器和拦截器
  Spring MVC 中常用的上下文实现是 ServletWebServerApplicationContext，该上下文发现存在 Filter Bean 的定义的时候，会自动将其注册到 Tomcat 服务器。

  但是，在 Spring MVC 中 Filter 存在两种常用的定义方式，一种是直接定义为 Filter，这时定义的 Filter 优先级是最低的，即会在最后调用。

  而另一种方式就是通过 ~FilterRegistrationBean~ 进行注册，这时可以对 Filter 进行更多的配置，值得注意的一点是：
  + 当同时存在 Filter Bean 和 FilterRegistrationBean Bean 时，以 FilterRegistrationBean 的定义为准
    
  参考：
  + [[https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/web/servlet/context/ServletWebServerApplicationContext.html][ServletWebServerApplicationContext (Spring Boot Docs 2.2.0.RELEASE API)]]
  + [[http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-19-Spring-boot%E4%B8%8EServlet%E7%BB%84%E4%BB%B6.html][Spring boot 与 Servlet 组件]]

  拦截器的话，相对来说就直接多了，毕竟这就可以直接由 Spring 来控制，而不是注册到 Tomcat 服务，简单的使用：
  #+begin_src java
    public class AuthInterceptor implements HandlerInterceptor {
      @Override
      public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception {
        // ...
      }

      @Override
      public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception {
        // ...
      }

      @Override
      public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {
        // ...
      }
    }

    @Configuration
    public class WebConfig extends WebMvcConfigurerAdapter {
      @Override
      public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new AuthInterceptor()).addPathPatterns("/**").excludePathPatterns("/admin/**");
      }
    }
  #+end_src

  参考：
  + [[https://examples.javacodegeeks.com/enterprise-java/spring/mvc/spring-mvc-interceptor-tutorial/][Spring MVC Interceptor Tutorial | Examples Java Code Geeks - 2019]]

* 相关问题
** 响应头中的编码配置
   可以通过两种方式来解决这一问题，其以是通过 ~CharacterEncodingFilter~ 实现：
   #+BEGIN_SRC xml
     <filter>  
         <filter-name>encodingFilter</filter-name>  
         <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>  
         <init-param>  
            <param-name>encoding</param-name>  
            <param-value>UTF-8</param-value>  
         </init-param>  
         <init-param>  
            <param-name>forceEncoding</param-name>  
            <param-value>true</param-value>  
         </init-param>  
     </filter>  
     <filter-mapping>  
         <filter-name>encodingFilter</filter-name>  
         <url-pattern>/*</url-pattern>  
     </filter-mapping> 
   #+END_SRC

   另一种方式便是使用 DD 文件的 jsp-config 配置：
   #+BEGIN_SRC html
     <jsp-config>
       <jsp-property-group>
         <url-pattern>*.jsp</url-pattern>
         <page-encoding>UTF-8</page-encoding>
       </jsp-property-group>
     </jsp-config>
   #+END_SRC

** 怎样处理静态资源
   静态资源处理可以通过 Spring MVC 提供的配置完成，也可以借助 DefaultServlet 实现：
   + [[https://www.baeldung.com/spring-mvc-static-resources][Serve Static Resources with Spring | Baeldung]]
   + [[https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-static-resources][Web on Servlet Stack - Static Resources]]
   + [[https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-default-servlet-handler][Web on Servlet Stack - Default Servlet]]

   使用 DefaultServlet 时会将其路径映射为 ~/**~ 使得它的优先级比其他的低，这一点引出的问题：
   + 路径映射的优先级：完全匹配 -> 目录匹配 -> 扩展名匹配
   + ~**~ 似乎没有什么特殊的含义：[[https://stackoverflow.com/questions/13843294/what-does-the-double-wildcard-on-a-servlet-mapping-url-pattern-mean][java - What does the double wildcard (*) on a servlet mapping url-pattern mean? - Stack Overflow]]

   实际的操作：
   #+BEGIN_SRC java
     public class MvcConfig implements WebMvcConfigurer {
       public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
         configurer.enable();
       }

       @Override
       public void addResourceHandlers(ResourceHandlerRegistry registry) {
         registry
             .addResourceHandler("/resources/**")
             .addResourceLocations("/resources/");
       }
     }
   #+END_SRC

   假如希望请求 HTML 网页是没有 ~.html~ 的后缀，那么可以这样：
   #+BEGIN_SRC java
     public class MvcConfig extends WebMvcConfigurerAdapter {
       @Bean
       public ViewResolver viewResolver() {
         InternalResourceViewResolver resolver = new InternalResourceViewResolver();
         resolver.setPrefix("/WEB-INF/pages/");
         resolver.setSuffix(".html");
         resolver.setExposeContextBeansAsAttributes(true);
         return resolver;
       }

       @Override
       public void addViewControllers(ViewControllerRegistry registry) {
         registry.addViewController("/login").setViewName("login");
         registry.addViewController("/welcome").setViewName("welcome");
         registry.addViewController("/about").setViewName("about");
         registry.addViewController("/contact").setViewName("contact");
       }
     }
   #+END_SRC

** 运行时值注入使用的 classpath 代表的是什么
   Web 项目打包后的项目中，根目录是 ~META-INF~ 和 ~WEB-INF~, 这个时候，我们可以看到 classes 这个文件夹，它就是我们要找的 classpath。

   而 ~classpath*~ 表示匹配多个文件。

   参考：[[https://segmentfault.com/a/1190000015802324][java 项目中的 classpath 到底是什么 - mmmming - SegmentFault 思否]]

** 怎样生成 REST API 的文档
   可以借助 Spring REST Docs 或 Swagger 完成这一工作，其中：
   + Spring REST Docs 是测试驱动的，会对测试成功的接口进行文档的生成
   + Swagger 的文档生成不涉及测试部分

   参考：
   + [[https://swagger.io/docs/][Swagger Documentation | Swagger]]
   + [[https://docs.spring.io/spring-restdocs/docs/2.0.3.RELEASE/reference/html5/][Spring REST Docs]]

** 注解 @Component, @Repository, @Controller 和 @Service 的区别
   这四个注解之间并没有太多的区别，从源码就可以看出来这一点：
   #+BEGIN_SRC java
     @Component
     public @interface Service {
       // ...
     }


     @Component
     public @interface Repository {
       // ...
     }


     @Component
     public @interface Controller {
       // ...
     }
   #+END_SRC

   但是很明显，它们之前只是存在类型、语义和属性上的区别，将来 Spring 也可能会根据它们的分层约定为它们添加功能。

   因此，尊重约定并将其与层一致使用始终是一个好主意。

   参考：
   + [[https://stackoverflow.com/a/38549461/8177747][What's the difference between @Component, @Repository & @Service annotations in Spring?]]

** 怎样自定义响应码
   返回 ResponseEntity 类型的响应就可以了：
   #+begin_src java
     public ResponseEntity sendViaResponseEntity() {
       return new ResponseEntity(HttpStatus.NOT_ACCEPTABLE);
     }
   #+end_src

   参考：
   + [[https://www.baeldung.com/spring-mvc-controller-custom-http-status-code][Custom Status Codes from Spring Controllers | Baeldung]]
   + [[https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html][ResponseEntity (Spring Framework 5.2.0.RELEASE API)]]

