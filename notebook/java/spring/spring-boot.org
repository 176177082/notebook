#+TITLE:      Spring Boot

* 目录                                                    :TOC_4_gh:noexport:
- [[#自动配置原理][自动配置原理]]
- [[#springbootapplication][@SpringBootApplication]]
- [[#spring-boot-starter][spring-boot-starter]]
- [[#webapplicationtype][WebApplicationType]]
- [[#配置文件与属性来源][配置文件与属性来源]]
- [[#数据库版本控制][数据库版本控制]]
- [[#日志操作][日志操作]]
- [[#相关问题][相关问题]]
  - [[#在配置文件中使用环境变量][在配置文件中使用环境变量]]

* 自动配置原理
  通过 ~SpringApplication~ 的 ~run~ 方法开始运行程序时，会创建 ~SpringApplication~ 的实例时调用 ~SpringFactoriesLoader~ 加载工厂：
  + [[https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L434][spring-boot/SpringApplication.java at master · spring-projects/spring-boot]]

  ~SpringFactoriesLoader~ 加载工厂是会寻找类路径下的 ~META-INF/spring.factories~ 文件：
  + [[https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java][spring-framework/SpringFactoriesLoader.java at master · spring-projects/spring-framework]]

  寻找 ~META-INF/spring.factories~ 文件是通过 Java 内置的接口完成的：
  #+BEGIN_SRC java
    import java.net.URL;
    import java.util.Enumeration;

    public class Test {
      public static void main(String[] args) throws Exception {
        Enumeration<URL> urls = Test.class.getClassLoader().getResources("META-INF/spring.factories");
        while (urls.hasMoreElements()) {
          System.out.println(urls.nextElement());
        }
      }
    }
  #+END_SRC  

  而 ~spring-boot-autoconfigure~ 的 [[https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories][spring.factories]] 文件包含了相关的配置类，这些配置类帮助我们完成了配置。

  这些配置类的配置广泛应用了的条件配置：
  + [[https://www.baeldung.com/spring-boot-custom-auto-configuration][A Custom Auto-Configuration with Spring Boot | Baeldung]]

  参考：[[http://tengj.top/2017/03/09/springboot3/#%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2SpringApplication%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B][Spring Boot干货系列：（三）启动原理解析 | 嘟嘟独立博客]]

  也就是说，自动配置其实就是使用其他人预定义好的配置，这意味着自动配置就如同一个黑箱，其中的具体内容有什么我们并不清楚。因此，
  使用自动配置时可以翻阅相关文档查阅具体的配置项。

  这也意味着，一旦使用自动配置，那么应用程序启动时就会执行数百次判断，判断类和 Bean 是否存在。

  当然了，我们自己的配置是可以覆盖默认的配置的，这通过了 ~@ConditionOnMissBean~ 实现。

* @SpringBootApplication
  通过注解 ~@SpringBootApplication~ 可以启用组件扫描，允许自动配置，允许注册额外的 Bean 和加载更多的配置。

  它包含了 ~@ComponentScan~ 注解，无参的 ~@ComponentScan~ 注解会自动扫描所有子包中的 Bean，并自动加载遇到的 ~@Configuration~ 配置。

  这也就是为什么一般将 ~SpringApplication.java~ 放在所有子包外面的原因，这样一来就可以很方便的扫描组件加载配置了。

  参考：
  + [[https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-using-springbootapplication-annotation.html][18. Using the @SpringBootApplication Annotation]]
  + [[https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-configuration-classes.html][15. Configuration Classes]]

* spring-boot-starter
  |-------------------------------+-------------------------------------+------------------------------------------------------------------------|
  | starter                       | 作用                                | 相关                                                                   |
  |-------------------------------+-------------------------------------+------------------------------------------------------------------------|
  | spring-boot-starter-thymeleaf | 使得 Spring-Boot 可以返回 HTML 视图 | 如果只有 Spring Web 的话，返回的视图名会直接当做 URL 路径              |
  | spring-boot-starter-tomcat    | 使得 Spring-Boot 启动内嵌的 Tomcat  | Spring-Boot 会判断是否存在 ~javax.servlet.Servlet~ 来决定是否启动 Tomcat |
  |-------------------------------+-------------------------------------+------------------------------------------------------------------------|

  + [[https://www.baeldung.com/spring-boot-custom-starter][Creating a Custom Starter with Spring Boot | Baeldung]]

* WebApplicationType
  SpringApplication 启动时会根据 ~WebApplicationType.deduceFromClasspath~ 方法判断当前应用所处的应用环境：
  + [[https://github.com/spring-projects/spring-boot/blob/1de6f6823850845f0fa6da0cf44c14d1aca31ea2/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/WebApplicationType.java#L63][spring-boot/WebApplicationType.java at 1de6f6823850845f0fa6da0cf44c14d1aca31ea2 · spring-projects/spring-boot]]

  当应用程序需要部署到 Tomcat 容器时，可以将主类写成如下模式：
  #+BEGIN_SRC java
    @SpringBootApplication
    public class Application extends SpringBootServletInitializer {
      public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
      }

      @Override
      protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        return application.sources(Application.class);
      }
    }
  #+END_SRC

  添加 ~spring-boot-starter-tomcat~ 会引入 ~Tomcat~ 依赖，使得类路径下存在 ~javax.servlet.Servlet~, 判断当前环境为 Servlet 环境。

  参考：
  + [[https://stackoverflow.com/questions/32758996/intellij-process-finished-with-exit-code-0-when-spring-boot-run][java - IntelliJ Process finished with exit code 0 when spring-boot run - Stack Overflow]]
  + [[https://www.baeldung.com/spring-boot-configure-tomcat][How to Configure Spring Boot Tomcat | Baeldung]]

* 配置文件与属性来源
  Spring Boot 能从多种属性源获得属性，包括：
  + 命令行参数
  + java:comp/env 里的 JNDI 属性
  + JVM 系统属性
  + 操作系统环境变量
  + 随机生成的带 random.* 前缀的属性（在设置其他属性时，可以引用它们，比如 ${random.long}）
  + 应用程序以外的 application.properties 或者 appliaction.yml 文件
  + 打包在应用程序内的 application.properties 或者 appliaction.yml 文件
  + 通过 @PropertySource 标注的属性源
  + 默认属性

  这个列表按照优先级排序，也就是说，任何在高优先级属性源里设置的属性都会覆盖低优先级的相同属性。
  
  同时，application.properties 和 application.yml 文件能放在以下四个位置：
  + 外置，在相对于应用程序运行目录的 /config 子目录里
  + 外置，在应用程序运行的目录里
  + 内置，在 config 包内
  + 内置，在 classpath 根目录

  同样，这个列表也按照优先级排序，高优先级配置文件里设置的属性都会覆盖低优先级的相同属性。

  如果在同一优先级位置同时有 application.properties 和 application.yml，那么 application.yml 里的属性会覆盖 application.properties 里的属性。

  而遵循 application-{profile}.properties 这种命名格式，这能提供特定于 Profile 的属性。

* 数据库版本控制
  Spring Boot 集成了高级的数据库版本控制工具，因此可以通过 Flyway 来进行数据库的版本控制：
  + [[https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html][85. Database Initialization]]  

  简单的使用的话其实就只需要添加 ~flyway-core~ 的依赖，并在 ~resources/db/migration~ 目录中创建 SQL 脚本就可以了。

  但也可以通过 ~spring.flyway.locations~ 属性配置脚本目录位置：
  #+BEGIN_SRC conf
    spring.flyway.locations=classpath:/db/migration
  #+END_SRC

  Maven 的依赖添加：
  #+BEGIN_SRC xml
    <dependency>
        <groupId>org.flywaydb</groupId>
        <artifactId>flyway-core</artifactId>
        <version>5.2.4</version>
    </dependency>
  #+END_SRC

* 日志操作
  简单的日志操作直接调用相关的类就可以了：
  #+BEGIN_SRC java
    @RestController
    public class LoggingController {

      Logger logger = LoggerFactory.getLogger(LoggingController.class);

      @RequestMapping("/")
      public String index() {
        logger.trace("A TRACE Message");
        logger.debug("A DEBUG Message");
        logger.info("An INFO Message");
        logger.warn("A WARN Message");
        logger.error("An ERROR Message");

        return "Howdy! Check out the Logs to see the output...";
      }
    }
  #+END_SRC

  可以参考：[[https://www.baeldung.com/spring-boot-logging][Logging in Spring Boot | Baeldung]]

  另外，在 IDEA 中可以使用 Live Templates 代码模板快速创建 logger，常用模板：
  #+BEGIN_SRC java
    private static final Logger logger = LoggerFactory.getLogger($CLASS_NAME$.class);
    private final Logger logger = LoggerFactory.getLogger(this.getClass());
  #+END_SRC

  参考：
  + [[https://www.cnblogs.com/waterystone/p/6738154.html][Idea Live Templates 代码模板 - waterystone - 博客园]]

* 相关问题
** 在配置文件中使用环境变量
   SpringBoot 的配置文件中可以直接使用系统环境变量：
   #+BEGIN_SRC conf
     spring.datasource.url = ${OPENSHIFT_MYSQL_DB_HOST}:${OPENSHIFT_MYSQL_DB_PORT}/"nameofDB"
     spring.datasource.username = ${OPENSHIFT_MYSQL_DB_USERNAME}
     spring.datasource.password = ${OPENSHIFT_MYSQL_DB_PASSWORD}
   #+END_SRC

   参考：
   + [[https://stackoverflow.com/questions/35531661/using-env-variable-in-spring-boots-application-properties][java - Using env variable in Spring Boot's application.properties - Stack Overflow]]
   + [[https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html][24. Externalized Configuration]]

