#+TITLE:      Swing

* 目录                                                    :TOC_4_gh:noexport:
- [[#基本对象][基本对象]]
- [[#事件驱动][事件驱动]]
- [[#图形][图形]]

* 基本对象
  + JFrame :: 框架或窗口
  + widget :: 组件或控件

  JFrame 用于承载组件， 组件应该放在 JFrame 的 pane 上

* 事件驱动
  事件驱动（处理）中的三个基本对象：
  + 事件源 :: 框架或组件等将用户操作转换成事件的对象
  + 监听者 :: 监听者是类扮演的角色， 属于 *接口*. ~Listener~.
  + 事件对象 :: 携带事件信息 ~Event~.

  一般流程：
  1. 创建事件源对象
  2. 创建监听者对象
  3. 将监听者对象添加到事件源对象， 类似于 ~addActionListener~ 的方法

  由于监听者是一个实现了监听者接口的类， 为了省略定义类的步骤， 可以使用特殊语法：
  #+BEGIN_SRC java
    button.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent ev) {
          System.out.println("click");
        }
      });
  #+END_SRC

  其中， ~ActionListener~ 是对应的监听者接口， ~actionPerformed~ 是这个监听者需要实现的方法。

  ~actionPerformed~ 这个方法会在事件发生时自动调用。
  
  监听者接口及事件类型：
  + [[http://www.runoob.com/manual/jdk1.6/java/awt/event/package-summary.html][java.awt.event]]

* 图形
  ~JFrame~ 对象的 ~ContentPane~ 成员的方法 ~paintComponent~ 会在 *重绘时* 自动调用。

  可以通过继承 ~JPanel~ 并覆盖 ~paintComponent~ 方法来定义重绘时的行为。

  通过调用 ~reapint~ 方法来要求系统进行重绘。

  ~paintComponent~ 的参数是一个 ~Grahphics2D~ 对象， 但是使用的是 ~Grahphics~ 进行引用。

  这个对象不能直接获取， 而是由系统分配。
  
