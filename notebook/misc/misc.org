#+TITLE:      Misc

* 目录                                                    :TOC_4_gh:noexport:
- [[#命令行参数语法][命令行参数语法]]
- [[#依赖固化][依赖固化]]
- [[#数据收集][数据收集]]
- [[#同名标识符优先级问题][同名标识符优先级问题]]
- [[#文件签名列表][文件签名列表]]
- [[#相似图片搜索][相似图片搜索]]
- [[#不同语言标准提案][不同语言标准提案]]
- [[#repository-manager][Repository Manager]]
- [[#目录服务][目录服务]]
- [[#bug-的等级][BUG 的等级]]
- [[#32-位到-64-位][32 位到 64 位]]

* 命令行参数语法
  我们在使用 Linux 上的命令时，使用的语法通常为 [[https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html][Argument Syntax (The GNU C Library)]]，但是，不同的平台上语法还是会有些区别。

  比如 MacOS 上命令参数的语法和 Linux 就存在区别，Windows 就更不要说了，而且，JVM 平台的命令行参数也是别树一帜。

  参考：
  + [[https://softwareengineering.stackexchange.com/a/70485][java - Command line options style - POSIX or what? - Software Engineering Stack Exchange]]

* 依赖固化
  依赖固化是一种在编程中常用的手段，比如说在 Go 语言中，固化的依赖通常会保存在 vender 目录中。

* 数据收集
  现在，我们在访问很多网站的时候，我们的数据都在不知不觉间就被收集了，这是值得了解一下的：
  + [[http://blog.codinglabs.org/articles/how-web-analytics-data-collection-system-work.html][网站统计中的数据收集原理及实现]]

* 同名标识符优先级问题
  这里的同名标识符指的是以下两种情况：
  1. 函数参数和函数同名
  2. 局部变量和函数同名

  这在不同的语言中存在着不同的表现，最好，还是避免这种情况的发生：
  |------------+----------------------------------------------------------------|
  | 语言       | 情况                                                           |
  |------------+----------------------------------------------------------------|
  | C 语言     | 函数参数的优先级大于函数，但是不能定义和函数名称相同的局部变量 |
  | Python     | 局部变量/函数参数的优先级大于函数                              |
  | Java       | 局部变量/函数参数的优先级大于函数                              |
  | JavaScript | 局部变量/函数参数的优先级大于函数                              |
  |------------+----------------------------------------------------------------|

  不愧是 C 语言，画风就是和其他语言不一样。

* 文件签名列表
  Linux 中判断文件类型的命令 file 其实就是通过文件签名来判断文件类型的，可以参考：
  + [[https://en.wikipedia.org/wiki/List_of_file_signatures][List of file signatures - Wikipedia]]

* 相似图片搜索
  相似图片搜索使用的关键技术叫做感知哈希算法，它的作用是对每张图片生成一个指纹字符串，然后比较不同图片的指纹。结果越接近，就说明图片越相似。
  1. 将图片缩小到 8x8 的尺寸，总共 64 个像素。作用是去除图片的细节，只保留结构、明暗等基本信息，摒弃不同尺寸、比例带来的图片差异
  2. 将缩小后的图片，转为 64 级灰度
  3. 计算所有 64 个像素的灰度平均值
  4. 将每个像素的灰度，与平均值进行比较。大于或等于平均值，记为 1，小于平均值，记为 0
  5. 将上一步的比较结果，组合在一起，就构成了一个 64 位的整数，这就是这张图片的指纹
     
  参考：
  + [[http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html][相似图片搜索的原理 - 阮一峰的网络日志]]

* 不同语言标准提案
  + Python - PEP
  + Java - JSR
  + JavaScript - TC39
  + C - 标准委员会

* Repository Manager  
  有些时候还是需要自己建一个的：[[https://help.sonatype.com/repomanager3][Repository Manager 3]]

* 目录服务
  目录服务是一个储存、组织和提供信息访问服务的软件系统，最常用例子是 DNS 服务，也有公司内网员工信息的管理，域账号便是基于目录服务的。

  参考：
  + [[https://zh.wikipedia.org/wiki/%E7%9B%AE%E5%BD%95%E6%9C%8D%E5%8A%A1][目录服务 - 维基百科，自由的百科全书]]
  + [[https://www.cnblogs.com/wilburxu/p/9174353.html][LDAP 概念和原理介绍 - WilburXu - 博客园]]
  + [[https://zhuanlan.zhihu.com/p/32732045][LDAP 基础学习笔记（概念 & 快速安装） - 知乎]]

* BUG 的等级
  为 BUG 划分等级来更加有效的衡量 BUG 的影响和开发人员的能力：
  + critical 是崩溃的 BUG，比如说一个服务直接不可用了，微信不能发消息，支付宝不能付款这种，打开直接报错
  + block 是指某个流程的中间环节被卡住，无法进行下一步，比如说，注册的时候手不到验证码，购物的时候添加不到购物车
  + major 就是影响业务功能或者是用户体验的环节。 比如说知乎里的回答不是我的却显示成我的，本来只能回答一次却允许我回答十次等
  + noamal 是指非核心业务流程产生的问题，比如说知乎无法变更头像，昵称等。这个要看自己的定义
  + minor 就是指各种影响体验，但不影响使用的内容
    
  参考：[[https://www.zhihu.com/question/348196899/answer/842222196][公司领导说，个人写的代码超过十个bug就开除是一种什么体验？ - 暗灭的回答 - 知乎]]

* 32 位到 64 位
  32 位到 64 位不可避免的问题就是由于指针膨胀和对齐补白带来的更多的内存消耗，但是，往往还会存在编码上的一些问题。

  32 位和 64 位程序的数据模型时存在区别的，ILP32 和 LP64 之间，部分数据类型的宽度是存在区别的：
  |----------------+--------------------+--------------------+--------|
  | Data type      | Data length(32bit) | Data length(64bit) | Signed |
  |----------------+--------------------+--------------------+--------|
  | char           |                  8 |                  8 | Y      |
  | unsigned char  |                  8 |                  8 | N      |
  | short          |                 16 |                 16 | Y      |
  | unsigned short |                 16 |                 16 | N      |
  | int            |                 32 |                 32 | Y      |
  | unsigned int   |                 32 |                 32 | N      |
  | long           |                 32 |                 64 | Y      |
  | unsigned long  |                 32 |                 64 | N      |
  | long long      |                 64 |                 64 | Y      |
  | point          |                 32 |                 64 | N      |
  | size_t         |                 32 |                 64 | N      |
  | ssize_t        |                 32 |                 64 | Y      |
  | off_t          |                 32 |                 64 | Y      |
  |----------------+--------------------+--------------------+--------|

  这就存在一些问题：
  1. 截断问题， ILP32 数据模型下的自动类型转换在 LP64 中可能存在截断问题
  2. 常量有效性问题，比如 0xFFFFFFFF 在 LP64 环境下不是 -1 而是 4294967295
  3. ……

  参考：
  + [[https://stackoverflow.com/questions/4552905/what-is-the-difference-between-a-32-bit-and-64-bit-processor][64 bit - What is the difference between a 32-bit and 64-bit processor? - Stack Overflow]]
  + [[https://blog.csdn.net/w174504744/article/details/8678045][32 位移植到 64 位 注意事项_开心-CSDN博客]]
  + [[https://zh.wikipedia.org/wiki/64%E4%BD%8D%E5%85%83#%E8%BB%9F%E9%AB%94%E7%9A%84%E5%8F%AF%E7%94%A8%E6%80%A7][64 位 - 维基百科，自由的百科全书]]

