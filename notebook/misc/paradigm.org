#+TITLE:      编程范式相关

* 目录                                                    :TOC_4_gh:noexport:
- [[#函数式编程][函数式编程]]
  - [[#函数柯里化][函数柯里化]]
  - [[#函数副作用][函数副作用]]
  - [[#尾递归优化][尾递归优化]]

* 函数式编程
** 函数柯里化
   在计算机科学中，柯里化是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。

   比如：
   #+BEGIN_SRC python
     func = lambda a: lambda b: a + b  # func(1)(2)
   #+END_SRC

   参考链接：
   + [[https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96][柯里化 - 维基百科，自由的百科全书]]

** 函数副作用
   在计算机科学中，函数副作用指当调用函数时，除了返回函数值之外，还对主调用函数产生附加的影响。例如修改全局变量（函数外的变量）或修改参数。

   参考链接：
   + [[https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E5%89%AF%E4%BD%9C%E7%94%A8][函数副作用 - 维基百科，自由的百科全书]]

** 尾递归优化
   函数调用会在内存形成一个"调用记录"，又称"调用帧"（call frame），保存调用位置和内部变量等信息。如果在函数 A 的内部调用函数 B，那么在 A 的调用记录上方，
   还会形成一个 B 的调用记录。等到 B 运行结束，将结果返回到 A，B 的调用记录才会消失。如果函数 B 内部还调用函数 C，那就还有一个 C 的调用记录栈。

   尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用记录，
   取代外层函数的调用记录就可以了。

   参考：
   + [[https://www.ruanyifeng.com/blog/2015/04/tail-call.html][尾调用优化 - 阮一峰的网络日志]]

