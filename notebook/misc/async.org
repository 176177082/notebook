#+TITLE:      异步编程

* 目录                                                    :TOC_4_gh:noexport:
- [[#编程模型][编程模型]]
- [[#实现方式][实现方式]]
- [[#作用][作用]]

* 编程模型
  不同的语言中异步代码的编写方式有所不同，甚至在同一种语言中也可能存在多种方式，但大于可以归纳为以下几种（我所知道的）：
  + 基于 Callback 的异步编程模型，可以算是最原始的一类，其他的一些模型也是在 Callback 模型的基础上进行修改的
  + 基于 Promise/Stream 的异步编程模型，针对 Callback 模型的优化，避免了回调地狱，常和函数式编程结合使用
  + 基于 async/await 的异步编程模型，通过编写同步代码的方式编写异步代码，需要语言支持或模仿 yield 特性

  还有就是 Golang 这种直接不需要自己管的。

  不同的编程模型中，存在的一些区别有：
  1. Eager vs Lazy - 异步函数是立即执行还是延后执行
  2. Top-level async or not - 是否支持 Top async
  3. Built-in vs Opt-in - 内置的还是可选的

* 实现方式
  异步编程通常是和 I/O 挂钩的，实现自然也离不开操作系统级别的异步接口，比如 Linux 上的 aio 或者新的 io_uring。

  而到了编程语言这一级别，通常有两种实现方式：
  1. 多线程 + 线程池
  2. 协程 + 事件循环

  这两个中，协程相对来说往往会更好一点，协程切换的消耗比线程更少，大量的线程会因为抢占式调度的原因使得每个线程执行时间很短，
  而协程，则可以执行至异步任务切换点。

* 作用
  + C10K 问题

