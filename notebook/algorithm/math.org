#+TITLE:      数学问题

* 目录                                                    :TOC_4_gh:noexport:
- [[#三点共线问题][三点共线问题]]
- [[#求取最大公约数][求取最大公约数]]
- [[#整数分解][整数分解]]
- [[#获取区间交集和并集][获取区间交集和并集]]
- [[#整数的向上与向下取整][整数的向上与向下取整]]
- [[#全排列][全排列]]

* 三点共线问题
  三点共线问题可以通过判断三个点围成的三角形的面积来判断，其中使用的三角形面积公式为：
  #+HTML: <img src="https://i.loli.net/2019/05/06/5ccfd667adb67.png">

  C 语言实现代码：
  #+BEGIN_SRC C
    int func(int x1, int y1, int x2, int y2, int x3, int y3) {
      return (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) == 0;
    }
  #+END_SRC

* 求取最大公约数  
  求取最大公约数可以通过 [[https://zh.wikipedia.org/wiki/%25E8%25BC%25BE%25E8%25BD%2589%25E7%259B%25B8%25E9%2599%25A4%25E6%25B3%2595][辗转相除法]] 实现，即：两数相除，取余数重复进行相除，直到余数为 0 时，前一个除数即为最大公约数：
  #+BEGIN_SRC python
    def gcd(x, y):
        while not y == 0:
            x, y = y, x % y
        return x
  #+END_SRC

* 整数分解
  *整数分解(integer factorization)* 将一个正整数写成几个约数的乘积，这样的分解结果应该是独一无二的。

  给出两个大约数，很容易就能将它们两个相乘。但是，给出它们的乘积，找出它们的因子就显得不是那么容易了。
  这就是许多现代密码系统的关键所在。

  + [[https://zh.wikipedia.org/wiki/%E6%95%B4%E6%95%B0%E5%88%86%E8%A7%A3][整数分解 - 维基百科，自由的百科全书]]

* 获取区间交集和并集
  获取区间 ~[a, b]~ 和区间 ~[c, d]~ 的交集：
  #+begin_example
    [max(a, c), min(b, d)]
  #+end_example

  获取区间 ~[a, b]~ 和区间 ~[c, d]~ 的并集：
  #+begin_example
    [min(a, c), max(b, d)]
  #+end_example

* 整数的向上与向下取整
  在常见的编程语言中，整数除法默认便是向下取整的，这时有些时候容易忽视的一点，比如说在二分法中向上和向下取整会影响到边界条件的选择。

  然后就是向上取整，其实现也是很简单的：
  #+begin_src C
    int ceil(int a, int b) {
      return (a + b - 1) / b;
    }
  #+end_src

* 全排列
  全排列问题可以用回溯算法解决，参考：
  + [[https://leetcode-cn.com/problems/permutations/solution/quan-pai-lie-by-leetcode/][全排列 - 全排列 - 力扣（LeetCode）]]
  + [[https://leetcode-cn.com/problems/permutations-ii/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liwe-2/][回溯搜索 + 剪枝 - 全排列 II - 力扣（LeetCode）]]

