#+TITLE:      Sort

* 目录                                                    :TOC_4_gh:noexport:
- [[#经典排序算法][经典排序算法]]
- [[#归并排序][归并排序]]
- [[#快速排序][快速排序]]
- [[#堆排序][堆排序]]
- [[#相关问题][相关问题]]
  - [[#为什么快速排序要优于归并排序][为什么快速排序要优于归并排序]]
  - [[#冒泡排序和选择排序的区别][冒泡排序和选择排序的区别]]
  - [[#为什么不使用堆排序][为什么不使用堆排序]]

* 经典排序算法
  十大经典排序算法复杂度：
  #+HTML: <img src="https://images2018.cnblogs.com/blog/849589/201804/849589-20180402133438219-1946132192.png">

  参考链接：[[https://www.cnblogs.com/onepixel/p/7674659.html][十大经典排序算法（动图演示） - 一像素 - 博客园]]

* 归并排序
  归并排序是一个比较容易理解的排序方式，主要利用了递归的思想实现：
  #+BEGIN_SRC python :results output
    def merge_sort(nums, left, right):
        def merge(na, nb):
            i, j, nr = 0, 0, []
            while i < len(na) and j < len(nb):
                if na[i] < nb[j]:
                    nr.append(na[i])
                    i += 1
                else:
                    nr.append(nb[j])
                    j += 1
            nr.extend(na[i:])
            nr.extend(nb[j:])
            return nr
        if left < right:
            center = (left + right) // 2
            na = merge_sort(nums, left, center)
            nb = merge_sort(nums, center + 1, right)
            return merge(na, nb)
        return nums[left:right+1]

    nums = [1, 23, 4, 5, 6, 2, 6, 7, 3, 45, 3456, 23, 546, 3, 53, 634, 63, 534, 3]
    print(merge_sort(nums, 0, len(nums)))
  #+END_SRC

  #+RESULTS:
  : [1, 2, 3, 3, 3, 4, 5, 6, 6, 7, 23, 23, 45, 53, 63, 534, 546, 634, 3456]

  这也许是写的最丑的归并排序 @_@

* 快速排序
  快速排序作为分治算法，最好的时间复杂度为 ~O(nlogn)~, 但是在最坏情况下，快速排序会退化为冒泡排序，必然每次选取的枢纽元都是最小值的情况，
  此时时间复杂度为 ~O(n^2)~.

  参考实现：
  #+begin_src java
    public class QuickSort {
      public static void quickSort(int[] arr) {
        quickSort(arr, 0, arr.length - 1);
      }

      public static void quickSort(int[] arr, int left, int right) {
        if (left >= right) {
          return;
        }

        // 通过 selectPivot 选择枢纽元时会将排序区间缩小为 [left + 1, right - 2]
        // 即 [++i, --j]
        int i = left, j = right - 1, pivot = selectPivot(arr, left, right);

        while (i < j) {
          while (arr[++i] < pivot);
          while (arr[--j] > pivot);

          if (i < j) {
            swap(arr, i, j);
          }
        }

        swap(arr, i, right - 1);

        quickSort(arr, left, i - 1);
        quickSort(arr, i + 1, right);
      }

      private static int selectPivot(int[] arr, int left, int right) {
        int mid = (left + right) / 2;

        if (arr[left] > arr[mid]) {
          swap(arr, left, mid);
        }

        if (arr[left] > arr[right]) {
          swap(arr, left, right);
        }

        if (arr[mid] > arr[right]) {
          swap(arr, mid, right);
        }

        // arr[left] <= arr[mid] <= arr[right]
        // 确保正确的边界条件
        swap(arr, mid, right - 1);

        return arr[right - 1];
      }

      private static void swap(int[] arr, int i, int j) {
        int item = arr[i];
        arr[i] = arr[j];
        arr[j] = item;
      }
    }
  #+end_src

* 堆排序
  堆排序的时间复杂度在最坏和最优时都是 ~O(nlogn)~, 对数组 ~[57, 40, 38, 11, 13, 34, 48, 75, 6, 19, 9, 7]~ 进行堆排序的步骤为：
  1. 根据输入和排序方式创建最大堆或最小堆
     #+HTML: <img src="https://pic3.zhimg.com/80/v2-a71cede24ccc2f9c866762b179883772_1440w.jpg">
  2. 不断将堆的根节点放到末尾，调整堆序
     #+HTML: <img src="https://pic2.zhimg.com/80/v2-843070653f31636b46728b4777a0aac9_1440w.jpg">

  参考实现：
  #+begin_src java
    public class HeapSort {
      public static void sort(int[] arr) {
        for (int i = arr.length / 2; i >= 0; i--) {
          sink(arr, i, arr.length);
        }

        for (int i = arr.length - 1; i >= 0; i--) {
          swap(arr, 0, i);
          sink(arr, 0, i);
        }
      }

      public static void sink(int[] arr, int i, int n) {
        // 下滤操作
        int left = i * 2 + 1;
        int right = left + 1;
        int largest = i;

        if (left < n && arr[left] > arr[largest]) {
          largest = left;
        }

        if (right < n && arr[right] > arr[largest]) {
          largest = right;
        }

        if (largest != i) {
          swap(arr, i, largest);
          sink(arr, largest, n);
        }
      }

      public static void swap(int[] arr, int i, int j){
        int num = arr[i];
        arr[i] = arr[j];
        arr[j] = num;
      }
    }
  #+end_src

  参考：
  + [[https://blog.csdn.net/sxhelijian/article/details/50295637][数据结构示例——堆排序过程_C/C++_迂者-贺利坚的专栏-CSDN博客]]
  + [[https://www.cnblogs.com/chengxiao/p/6129630.html][图解排序算法(三)之堆排序 - dreamcatcher-cx - 博客园]]

* 相关问题
** 为什么快速排序要优于归并排序
   尽管两个排序算法的时间复杂度时相同的，但是，在存在很多影响算法运行时间的因数时，快速排序的表现往往要比归并排序的要好。

   并且，归并往往需要一个临时的缓冲区，而快排不需要。

   #+begin_quote
   However, it’s superior to merge sort in many scenarios because many factors influence an algorithm’s runtime, and, when taking them all together, quicksort wins out.
   #+end_quote

   参考链接：
   + [[https://stackoverflow.com/questions/70402/why-is-quicksort-better-than-mergesort][algorithm - Why is quicksort better than mergesort? - Stack Overflow]]

** 冒泡排序和选择排序的区别
   同样数据的情况下，两种算法的循环次数是一样的，但选择排序只有 0 到 1 次交换，而冒泡排序有 0 到 n 次交换。

** 为什么不使用堆排序
   堆排序的时间复杂度在最坏和最优时都是 ~nlogn~, 按理说应该会比快速排序要好，但在真实的使用场景中，快速排序一般不会遇到最坏情况，
   同时，快速排序 +可以+ 是稳定的，维护应该区间也比维护一个队要容易。同时，快排前面的 ~n~ 系数要更小。

   其他原因：
   + 堆排比较交换次数更多
   + 堆排序要经常处理距离很远的数，不符合局部性原理，会导致 CPU Cache 命中率降低，频繁读写内存

   NOTE: 快排的通常实现为不稳定的，因为选取的枢纽元的关系，交换元素位置后往往会变得不稳定

   参考：
   + [[https://stackoverflow.com/questions/8311090/why-not-use-heap-sort-always][algorithm - Why not use heap sort always - Stack Overflow]]

