#+TITLE:      数据结构与算法 - 基础数据结构

* 目录                                                    :TOC_4_gh:noexport:
- [[#二叉查找树-binary-search-tree][二叉查找树 (Binary Search Tree)]]
  - [[#leetcode-题][LeetCode 题:]]
- [[#删除当前链表节点][删除当前链表节点]]
- [[#合并有序链表][合并有序链表]]
- [[#二叉树的遍历][二叉树的遍历]]

* 二叉查找树 (Binary Search Tree)
  定义: 是指一棵空树或者具有下列性质的 [[https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91][二叉树]]:
  1. 若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；
  2. 若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；
  3. 任意节点的左、右子树也分别为二叉查找树；
  4. 没有键值相等的节点。

  + [[https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9][维基百科 - 二叉查找树]]

** LeetCode 题:
   #+BEGIN_EXAMPLE
     Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

     According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

             _______6______
            /              \
         ___2__          ___8__
        /      \        /      \
        0      _4       7       9
              /  \
              3   5
     For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
   #+END_EXAMPLE

   #+BEGIN_SRC C
     struct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {
       if (root->val > p->val && root->val > q->val) {
         return lowestCommonAncestor(root->left, p , q);
       }
       else if(root->val < p->val && root->val < q->val) {
         return lowestCommonAncestor(root->right, p, q);
       }
       else{
         return root;
       }
     }
   #+END_SRC

* 删除当前链表节点
  #+BEGIN_SRC java
    class Solution {
      public void deleteNode(ListNode node) {
        node.val = node.next.val;
        node.next = node.next.next;
      }
    }
  #+END_SRC

* 合并有序链表
  + 递归合并
    #+BEGIN_SRC C
      Node* Merge(Node* head1, Node* head2) {
        if (head1 == NULL) return head2;
        if (head2 == NULL) return head1;

        Node* res = NULL;

        if (head1->value < head2->value) {
          res = head1;
          res->next = Merge(head1->next, head2);
        } else {
          res = head2;
          res->next = Merge(head1, head2->next);
        }

        return res;
      }
    #+END_SRC

  + 循环迭代合并
    #+BEGIN_SRC C
      Node* Merge(Node* head1, Node* head2) {
        if (head1 == NULL) return head2;
        if (head2 == NULL) return head1;

        Node* res;
        Node* ret;
        Node* p = head1;
        Node* q = head2;

        if (p->value < q->value) {
          res = p;
          p = p->next;
        } else {
          res = q;
          q = q->next;
        }

        ret = res;
        while (p && q) {
          if (p->value < q->value) {
            res->next = p;
            res = p;
            p = p->next;
          } else {
            res->next = q;
            res = q;
            q = q->next;
          }
        }

        while (p) {
          res->next = p;
          res = p;
          p = p->next;
        }

        while (q) {
          res->next = q;
          res = q;
          q = q->next;
        }

        return ret;
      }
    #+END_SRC
* 二叉树的遍历
  + 非递归形式的中序遍历：
    #+BEGIN_SRC C
      struct TreeNode *Stack[1000] = {0};
      struct TreeNode *tmp = root, **stack = Stack;

      /* 非递归进行中序遍历 */
      while (stack >= Stack)
      {
        /* 所有左子树（包括叶子）入栈 */
        while (tmp)
        {
          ,*stack++ = tmp;
          tmp = tmp->left;
        }

        tmp = *(--stack);
        tmp = tmp->right;
      }
    #+END_SRC

