#+TITLE:      数据结构

* 目录                                                    :TOC_4_gh:noexport:
- [[#表][表]]
  - [[#删除当前链表节点][删除当前链表节点]]
  - [[#合并有序链表][合并有序链表]]
  - [[#linux-内核链表][Linux 内核链表]]
- [[#树][树]]
  - [[#二叉查找树-binary-search-tree][二叉查找树 (Binary Search Tree)]]
  - [[#获取二叉树的高度][获取二叉树的高度]]
  - [[#bk-tree][BK-Tree]]
  - [[#b-树和-b-树][B 树和 B+ 树]]
- [[#图][图]]
  - [[#迪杰斯特拉算法][迪杰斯特拉算法]]
  - [[#斐波那契堆][斐波那契堆]]

* 表
** 删除当前链表节点
   这个方法需要保证传入的节点不会是尾节点：
   #+BEGIN_SRC java
     class Solution {
       public void deleteNode(ListNode node) {
         node.val = node.next.val;
         node.next = node.next.next;
       }
     }
   #+END_SRC

** 合并有序链表
   + 递归合并
     #+BEGIN_SRC C
       Node* Merge(Node* head1, Node* head2) {
         if (head1 == NULL) return head2;
         if (head2 == NULL) return head1;

         Node* res = NULL;

         if (head1->value < head2->value) {
           res = head1;
           res->next = Merge(head1->next, head2);
         } else {
           res = head2;
           res->next = Merge(head1, head2->next);
         }

         return res;
       }
     #+END_SRC

   + 循环迭代合并
     #+BEGIN_SRC C
       Node* Merge(Node* head1, Node* head2) {
         if (head1 == NULL) return head2;
         if (head2 == NULL) return head1;

         Node* res;
         Node* ret;
         Node* p = head1;
         Node* q = head2;

         if (p->value < q->value) {
           res = p;
           p = p->next;
         } else {
           res = q;
           q = q->next;
         }

         ret = res;
         while (p && q) {
           if (p->value < q->value) {
             res->next = p;
             res = p;
             p = p->next;
           } else {
             res->next = q;
             res = q;
             q = q->next;
           }
         }

         while (p) {
           res->next = p;
           res = p;
           p = p->next;
         }

         while (q) {
           res->next = q;
           res = q;
           q = q->next;
         }

         return ret;
       }
     #+END_SRC

** Linux 内核链表
   Linux 内核链表的实现很巧妙，不存在数据域，而是选择通过 ~container_of~ 的方式来获取链表的 container，通过这种方式，可以通用 List 结构：
   #+begin_src C
     struct list_head {
       struct list_head *next, *prev;
     };
   #+end_src

   参考：[[https://www.ibm.com/developerworks/cn/linux/kernel/l-chain/index.html][深入分析 Linux 内核链表]]

* 树
** 二叉查找树 (Binary Search Tree)
   定义: 是指一棵空树或者具有下列性质的 [[https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91][二叉树]]:
   1. 若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；
   2. 若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；
   3. 任意节点的左、右子树也分别为二叉查找树；
   4. 没有键值相等的节点。

   + [[https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9][二叉搜索树 - 维基百科，自由的百科全书]]

** 获取二叉树的高度
   #+BEGIN_SRC java
     public int getHeight(TreeNode root) {
       if (root == null)
         return 0;
       return 1 + Math.max(getHeight(root.left), getHeight(root.right));
     }
   #+END_SRC

** BK-Tree
   BK 树通常用于拼写检查，是比 Tries 树更好的选择：
   + [[https://en.wikipedia.org/wiki/BK-tree][BK-tree - Wikipedia]]

** B 树和 B+ 树
   B 树和 B+ 树是十分经典的数据结构，两者都是平衡的书结构，B+ 树常用于数据库的索引建立。

   B 树要求：
   + 根节点要么是树叶，要么子节点的数量在 2 到 M 之间
   + 除根以外，所有非树叶节点的子节点数在 M/2 和 M 之间
   + 所有树叶都在相同的深度上

   其中，M 指的是树的阶：所有节点的孩子节点的最大数量。
   
   可以参考的文章：
   + [[https://www.cnblogs.com/wade-luffy/p/6292784.html][B+ 树介绍 - wade&luffy - 博客园]]
   + [[https://www.cnblogs.com/nullzx/p/8729425.html][B 树和 B+ 树的插入、删除图文详解 - nullzx - 博客园]]

* 图
** 迪杰斯特拉算法
   Dijkstra's algorithm 用于计算一个节点到其他所有节点的最短路径，其原理很简单：
   1. 将已求出最短路径的顶点集合用 S 表示，将其余未确定最短路径的顶点集合用 U 表示
   2. 初始时，S 中只包含源点 V
   3. 从 U 中选取一个距离 V 最小的顶点 K，把 K，加入 S 中
   4. 在 S 中选择目前距离和最小的顶点 V 作为新的参考点，重复第 3 步，直到所有点都在 S 中
   5. 此时，就得到了最短路径

   需要注意的是：不能有负权边。

   #+HTML: <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/DijkstraDemo.gif/220px-DijkstraDemo.gif">

   算法的伪码实现：
   #+BEGIN_EXAMPLE
     function Dijkstra(Graph, source):

         create vertex set Q

         for each vertex v in Graph:             // Initialization
             dist[v] ← INFINITY                  // Unknown distance from source to v
             prev[v] ← UNDEFINED                 // Previous node in optimal path from source
             add v to Q                          // All nodes initially in Q (unvisited nodes)

         dist[source] ← 0                        // Distance from source to source

         while Q is not empty:
             u ← vertex in Q with min dist[u]    // Node with the least distance
                                                 // will be selected first
             remove u from Q

             for each neighbor v of u:           // where v is still in Q.
                 alt ← dist[u] + length(u, v)
                 if alt < dist[v]:               // A shorter path to v has been found
                     dist[v] ← alt
                     prev[v] ← u

         return dist[], prev[]
   #+END_EXAMPLE

   相关链接：
   + [[https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm][Dijkstra's algorithm - Wikipedia]]

** 斐波那契堆
   *斐波那契堆（Fibonacci heap）* 是计算机科学中 *树* 的集合。它比二项堆具有更好的平摊分析性能，可用于实现合并优先队列。

   斐波那契数列的基本结构如下：
   #+BEGIN_SRC C
     // 斐波那契结点 ADT
     typedef struct FibonacciHeapNode {
       int key;                   // 该节点的值
       int degree;                // 该节点子节点的数量
       FibonacciHeapNode* left;   // 左兄弟
       FibonacciHeapNode* right;  // 右兄弟
       FibonacciHeapNode* parent; // 父结点
       FibonacciHeapNode* child;  // 孩子结点
       bool marked;               // 是否被删除孩子节点
     } FibNode;

     // 斐波那契堆 ADT
     typedef struct FibonacciHeap {
       int keyNum;               // 堆中结点个数
       FibonacciHeapNode* min;   // 最小堆，根结点
       int maxNumOfDegree;       // 最大度
       FibonacciHeapNode** cons; // 指向最大度的内存区域
     } FibHeap;
   #+END_SRC

   其中，每个节点的所有子节点通过 left 和 right 链接为一个循环链表，而所有根结点也通过 left 和 right 链接为一个循环链表。

   执行的各个操作：
   + *插入一个节点：* 创建一个仅包含一个节点的新的斐波纳契堆，然后执行 *堆合并*
   + *查找最小的节点：* 由于用一个指针指向了具有最小值的根节点，因此查找最小的节点是简单的操作
   + *合并两个斐波纳契堆：* 可以简单地通过连接两个堆的树根列表来实现合并
   + *释放（删除）最小的节点：*
     1) 找到最小的根节点并删除它，其所有的子节点都加入堆的根表，即它的子树都成为堆所包含的树
     2) 合并当前根结点中所有度数相同的节点，节点值大的作为节点值小的子节点，重复直到所有根结点的度数不相同
     3) 找到最小的根结点并用 min 指向它
   + *降低一个节点的键值：*
     1) 如果当前节点键值小于其父节点的键值，则把该节点及其子树摘下来作为堆的新树的根节点
     2) 其原父节点如果是被标记（marked）节点，则也被摘下来作为堆的新树的根节点
     3) 如果其原父节点不是被标记（marked）节点且不是根节点，则其原父节点被加标记
     4) 如果堆的新树的根节点被标记（marked），则去除该标记
     5) 自下而上执行以上操作，直至到根节点或一个未被标记（marked）节点为止
   + *增加节点值：*
     1) 将被增加节点的左孩子和左孩子的所有兄弟都链接到根链表中
     2) 把被增加节点添加到根链表，同时进行级联剪切

   其中最复杂的释放最小节点和降低节点值的操作，可以用图片来演示这一过程：
   1. 斐波那契堆示例：

      #+HTML: <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Fibonacci_heap.png/250px-Fibonacci_heap.png">

   2. 提取最小值节点后：

      #+HTML: <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Fibonacci_heap_extractmin1.png/170px-Fibonacci_heap_extractmin1.png">

   3. 执行根结点的合并：

      #+HTML: <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Fibonacci_heap_extractmin2.png/130px-Fibonacci_heap_extractmin2.png">

   4. 降低节点 9 的值为 0：

      #+HTML: <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/Fibonacci_heap-decreasekey.png/250px-Fibonacci_heap-decreasekey.png">

   相关链接：
   + [[https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86][斐波那契堆 - 维基百科，自由的百科全书]]
   + [[https://en.wikipedia.org/wiki/Fibonacci_heap][Fibonacci heap - Wikipedia]]
   + [[https://www.cnblogs.com/skywang12345/p/3659060.html][斐波那契堆之图文解析和 C 语言的实现 - 如果天空不死 - 博客园]]

