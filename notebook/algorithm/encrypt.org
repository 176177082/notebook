#+TITLE:      加密算法

* 目录                                                    :TOC_4_gh:noexport:
- [[#rsa-算法][RSA 算法]]
- [[#aes-算法][AES 算法]]

* RSA 算法
  *RSA 加密算法* 是一种 _非对称加密算法_, 可靠性来源于对极大整数做因数分解的难度。

  算法的参考实现：
  #+BEGIN_SRC js
    'use strict';

    /**
     ,* RSA hash function reference implementation.
     ,* Uses BigInteger.js https://github.com/peterolson/BigInteger.js
     ,* Code originally based on https://github.com/kubrickology/Bitcoin-explained/blob/master/RSA.js
     ,*/
    const RSA = {};

    /**
     ,* Generates a k-bit RSA public/private key pair
     ,* https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Code
     ,*
     ,* @param   {keysize} int, bitlength of desired RSA modulus n (should be even)
     ,* @returns {array} Result of RSA generation (object with three bigInt members: n, e, d)
     ,*/
    RSA.generate = function(keysize) {
      /**
       ,* Generates a random k-bit prime greater than √2 × 2^(k-1)
       ,*
       ,* @param   {bits} int, bitlength of desired prime
       ,* @returns {bigInt} a random generated prime
       ,*/
      function randomPrime(bits) {
        const min = bigInt(6074001000).shiftLeft(bits - 33);  // min ≈ √2 × 2^(bits - 1)
        const max = bigInt.one.shiftLeft(bits).minus(1);  // max = 2^(bits) - 1
        for (;;) {
          const p = bigInt.randBetween(min, max);  // WARNING: not a cryptographically secure RNG!
          if (p.isProbablePrime(256)) {
            return p;
          }
        }
      }

      // set up variables for key generation
      const e = bigInt(65537);  // use fixed public exponent
      let p;
      let q;
      let lambda;

      // generate p and q such that λ(n) = lcm(p − 1, q − 1) is coprime with e and |p-q| >= 2^(keysize/2 - 100)
      do {
        p = randomPrime(keysize / 2);
        q = randomPrime(keysize / 2);
        lambda = bigInt.lcm(p.minus(1), q.minus(1));
      } while (bigInt.gcd(e, lambda).notEquals(1) || p.minus(q).abs().shiftRight(
          keysize / 2 - 100).isZero());

      return {
        n: p.multiply(q),  // public key (part I)
        e: e,  // public key (part II)
        d: e.modInv(lambda),  // private key d = e^(-1) mod λ(n)
      };
    };

    /**
     ,* Encrypt
     ,*
     ,* @param   {m} int / bigInt: the 'message' to be encoded
     ,* @param   {n} int / bigInt: n value returned from RSA.generate() aka public key (part I)
     ,* @param   {e} int / bigInt: e value returned from RSA.generate() aka public key (part II)
     ,* @returns {bigInt} encrypted message
     ,*/
    RSA.encrypt = function(m, n, e) {
      return bigInt(m).modPow(e, n);
    };

    /**
     ,* Decrypt
     ,*
     ,* @param   {c} int / bigInt: the 'message' to be decoded (encoded with RSA.encrypt())
     ,* @param   {d} int / bigInt: d value returned from RSA.generate() aka private key
     ,* @param   {n} int / bigInt: n value returned from RSA.generate() aka public key (part I)
     ,* @returns {bigInt} decrypted message
     ,*/
    RSA.decrypt = function(c, d, n) {
      return bigInt(c).modPow(d, n);
    };
  #+END_SRC

  + [[http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html][阮一峰 - RSA 算法原理一]]
  + [[http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html][阮一峰 - RSA 算法原理二]]
  + [[https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95][维基百科 - RSA加密算法]]

* AES 算法
  高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称 Rijndael 加密法，
  是美国联邦政府采用的一种区块加密标准。

  算法的操作流程：
  #+HTML: <img src="https://images0.cnblogs.com/blog2015/671127/201503/130035028553414.png">

  + [[https://www.cnblogs.com/luop/p/4334160.html][密码算法详解——AES - ReadingLover - 博客园]]

