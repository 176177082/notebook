#+TITLE:      消息摘要算法

* 目录                                                    :TOC_4_gh:noexport:
- [[#概念][概念]]
- [[#md5][MD5]]
  - [[#基本思路][基本思路]]
  - [[#注意事项][注意事项]]
- [[#hmac][HMAC]]

* 概念
  ~Hash~ 算法又称为消息摘要算法， 通过将任意数据通过一个函数转换成长度固定的数据串，
  函数与数据串之间形成一一映射的关系。

  + [[https://www.zhihu.com/question/20820286/answer/333248794][知乎 - 什么是哈希算法]]
  + [[https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8][维基百科 - 散列函数]]

* MD5
  *MD5消息摘要算法(MD5 Message-Digest Algorithm)*, 一种被广泛使用的密码散列函数，
  可以产生出一个 128 位（16字节）的散列值。
  
  + [[https://zh.wikipedia.org/wiki/MD5][维基百科 - MD5]]

** 基本思路
   将信息分为 *N个分组*, 每组 *64个字节* (一个字节 8 位), 对每个分组进行摘要运算.

   当一个分组的摘要运算完毕后, 将 _上一个分组的结果用于下一个分组的运算_.

** 注意事项
   1. 信息的长度(注意是 *bit位* 长度, 不是字节长度)用 *64 位* 表示, 也要参加信息摘要运算.
      信息长度放在最后一个分组的末尾, 所以 *长度信息要占据 8 个字节*.

      如果数据的最后一个分组的长度 *小于 64 个字节*, 便在其后添加 ~0x80~ 标志结束.
      此时:
      1. 数据 + 结束标志 <= 56 byte:
         在 结束标志 到 第 56 个字节 补 0. 然后放入长度数据.

      2. 数据 + 结束标志 > 56 byte:
         在这个分组后面 补 0, 进行一次摘要运算.
         新建一个分组, 前面全部补 0, 最后 16 字节添加长度学习, 再进行一次摘要运算.

   2. MD5 最后生成的摘要信息是 16 个字节，SHA1 是 20 个字节

   3. MD5 和 SHA1 的分组信息运算，分组里面的的数据都会被视为 16 个 DWORD(4个字节)，
      而 MD5 算法认为这些 DWORD 的字节序列是 LITTLE-ENDIAN , 而 SHA1 的算法认为 DWORD 是 BIG-ENDIAN 的。
      所以在不同字节序的主机上要进行转换.

   4. 放入最后一个分组的长度信息，是原始数据长度，而且是 BIT 位长度，其是一个 uint64_t，而
      MD5 算法要求放入的长度是 LITTLE-ENDIAN 的，而 SHA1 算法则要求这个长度是 BIG-ENDIAN 的。
      不同的平台要进行转换。

   5. 当然生成的结果，MD5 也要求是 LITTLE-ENDIAN，SHA1 也要求结果是 BIG-ENDIAN 的.
      不同的平台还是要进行转换.

* HMAC
  通过 Hash 算法进行消息摘要的时候，可以增加一个 slat 使得相同的输入也能得到不同的摘要结果，避免通过彩虹表得到原始输入。

  算法：
  #+BEGIN_EXAMPLE
    Function hmac
       Inputs:
          key:        Bytes     //array of bytes
          message:    Bytes     //array of bytes to be hashed
          hash:       Function  //the hash function to use (e.g. SHA-1)
          blockSize:  Integer   //the block size of the underlying hash function (e.g. 64 bytes for SHA-1)
          outputSize: Integer   //the output size of the underlying hash function (e.g. 20 bytes for SHA-1)

       //Keys longer than blockSize are shortened by hashing them
       if (length(key) > blockSize) then
          key ← hash(key) //Key becomes outputSize bytes long
   
       //Keys shorter than blockSize are padded to blockSize by padding with zeros on the right
       if (length(key) < blockSize) then
          key ← Pad(key, blockSize) //pad key with zeros to make it blockSize bytes long
    
       o_key_pad = key xor [0x5c * blockSize]   //Outer padded key
       i_key_pad = key xor [0x36 * blockSize]   //Inner padded key
    
       return hash(o_key_pad ∥ hash(i_key_pad ∥ message)) //Where ∥ is concatenation
  #+END_EXAMPLE

  在 Python 中的使用：
  #+BEGIN_SRC python
    >>> import hmac
    >>> message = b'Hello, world!'
    >>> key = b'secret'
    >>> h = hmac.new(key, message, digestmod='MD5')
    >>> # 如果消息很长，可以多次调用 h.update(msg)
    >>> h.hexdigest()
    'fa4ee7d173f2d97ee79022d1a7355bcf'
  #+END_SRC
