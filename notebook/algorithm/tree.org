#+TITLE:      数据结构 - 树

* 目录                                                    :TOC_4_gh:noexport:
- [[#二叉查找树-binary-search-tree][二叉查找树 (Binary Search Tree)]]
  - [[#获取二叉树的高度][获取二叉树的高度]]
  - [[#删除二叉树的节点][删除二叉树的节点]]
- [[#avl-树][AVL 树]]
- [[#b-树和-b-树][B 树和 B+ 树]]
  - [[#b-树][B 树]]
  - [[#b-树-1][B+ 树]]
  - [[#理解][理解]]
- [[#others][Others]]
  - [[#bk-tree][BK-Tree]]
- [[#footnotes][Footnotes]]

* 二叉查找树 (Binary Search Tree)
  定义: 是指一棵空树或者具有下列性质的 [[https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91][二叉树]]:
  1. 若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；
  2. 若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；
  3. 任意节点的左、右子树也分别为二叉查找树；
  4. 没有键值相等的节点。

  参考链接：
  + [[https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9][二叉搜索树 - 维基百科，自由的百科全书]]

** 获取二叉树的高度
   #+BEGIN_SRC java
     public int getHeight(TreeNode root) {
       if (root == null)
         return 0;
       return 1 + Math.max(getHeight(root.left), getHeight(root.right));
     }
   #+END_SRC

** 删除二叉树的节点
   删除二叉树的节点应该是二叉树中最复杂的操作了，因为需要面对几种情况：
   1. 删除的节点是叶子节点，没有子元素
   2. 删除的节点有一个子节点
   3. 删除的节点有两个子节点

   其中，对于前两种情况来说，删除操作很好实现，叶子节点可以直接删除，只有一个子节点时也可以直接用该子节点代替原节点。

   问题在于删除的节点有两个子节点的情况，对于这种情况可以这样处理：
   + 删除节点后，用该节点的后继节点（比删除节点大的最小节点）来替换原有节点，也就是找到要删除节点的最左子节点

   当然，如果是普通的二叉树，随便找一个节点来替换也是可以的。

* AVL 树
  AVL 树的存在感感觉不是很强烈，但是我们可以通过 AVL 树学习到一个重要的操作：树的旋转。

  参考：
  + [[https://www.cnblogs.com/skywang12345/p/3576969.html][AVL 树之图文解析和 C 语言的实现 - 如果天空不死 - 博客园]]

* B 树和 B+ 树
** B 树
   B 树的设计十分巧妙，但是概念很抽象，整体理解需要结合其插入和删除操作来完成，对于一颗 M 阶的 B 树来说：
   1. 每个结点最多有 *M - 1* 个 *关键字*
   2. 根结点最少可以只有 *1* 个关键字，也就是说最小为 *2* 阶
   3. 非根结点至少有 *Math.ceil(M / 2) - 1* 个 *关键字*
   4. 每个结点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它
   5. 所有叶子结点都位于同一层，或者说根结点到每个叶子结点的长度都相同

   这里需要注意区分 B 树中每个节点的数据、子树和关键字的概念：数据时该节点保存的数据，而关键字是用来表示数据（大小）的特征，B 树根据关键字来组织平衡，
   而关键字的两侧和每个关键字之间的空隙都可以指向一颗子树。
   #+begin_example
       K   K   K   K   K
       |   |   |   |   |
       D   D   D   D   D
      / \ / \ / \ / \ / \
     C   C   C   C   C   C
   #+end_example

   B 树概念十分抽象，你很难从它的定义中想象它是什么样的，因此，需要结合插入和删除操作来理解，进行插入和删除操作时的关键是要记住：
   1. 每个结点最多有 *M - 1* 个 *关键字*
   2. 非根结点至少有 *Math.ceil(M / 2) - 1* 个 *关键字*

   进行插入和删除操作时需要不断的维护好这两点，插入操作的规则为：
   1. 根据要插入的 key 的值，找到 *叶子结点* 并插入
   2. 判断当前结点[fn:1] key 的个数是否小于等于 M - 1，若满足则结束，否则进行第 3 步
   3. 以结点中间的 key 为中心分裂成左右两部分，然后将这个中间的 key 插入到 *父结点* 中，这个 key 的左子树指向分裂后的左半部分，这个 key 的右子支指向分裂后的右半部分，
      然后将当前结点指向父结点，继续进行第 2 步

   通过这个规则，整个 B 数在插入过程中可以通过不断的分裂来保证自身的平衡，试一下就会发现十分巧妙，而删除操作的规则为：
   1. 如果当前需要删除的 key 位于非叶子结点上，则用后继 key 覆盖要删除的 key，然后在后继 key 所在的子支中删除该后继 key。此时后继 key 一定位于叶子结点上，这个过程和二叉搜索树删除结点的方式类似。
      删除这个记录后执行第 2 步
   2. 该结点 key 个数大于等于 Math.ceil(M / 2) - 1，结束删除操作，否则执行第 3 步
   3. 如果兄弟结点 key 个数大于 Math.ceil(M / 2) - 1，则父结点中的 key 下移到该结点，兄弟结点中的一个 key 上移，删除操作结束。否则，将父结点中的 key 下移与当前结点及它的兄弟结点中的 key 合并，
      形成一个新的结点。原父结点中的 key 的两个孩子指针就变成了一个孩子指针，指向这个新结点。然后当前结点的指针指向父结点，重复上第 2 步

   PS: 有些结点它可能即有左兄弟，又有右兄弟，那么任意选择一个兄弟结点进行操作即可
  
   删除操作通过借值和合并操作维持了整棵树的平衡，和插入操作以前维护实现了 B 树的平衡结构。

   参考：
   + [[https://www.cnblogs.com/nullzx/p/8729425.html][B 树和 B+ 树的插入、删除图文详解 - nullzx - 博客园]]

** B+ 树
   理解了 B 树以后，B+ 树的理解就简单多了，B+ 树整体结构和 B 树类似，但是进行了一些修改：
   1. B+ 树包含 2 种类型的结点：内部结点（也称索引结点）和叶子结点，索引节点只保存关键字值，所有数据都保存在叶子节点中
   2. 每个叶子结点都存有相邻叶子结点的指针，叶子结点本身依关键字的大小自小而大顺序链接，这样一来，所有叶子节点也构成了一个链表

   对于 B+ 树的操作影响最大的应该是索引节点不保存值这一特性，这使得插入和删除操作时，需要不断维护内部索引节点的值以匹配叶子节点，详情可参考：
   + [[https://www.cnblogs.com/nullzx/p/8729425.html][B 树和 B+ 树的插入、删除图文详解 - nullzx - 博客园]]
   
** 理解
   B 树和 B+ 树常用于文件和数据库系统的原因是希望通过 B 树和 B+ 树的特性，降低树的 *深度* 来优化查询效率，在磁盘 I/O 的过程中，最为耗费时间的一步为定位到数据所在柱面的过程。
   而磁盘读取数据是以盘块为基本单位的，位于同一盘块中的所有数据都能被一次性全部读取出来。

   因此我们应该尽量将相关信息存放在同一盘块，同一磁道中。或者至少放在同一柱面或相邻柱面上，以求在读/写信息时尽量减少磁头来回移动的次数，避免过多的查找时间 Ts。

   所以，在大规模数据存储方面，大量数据存储在外存磁盘中，而在外存磁盘中读取/写入块中某数据时，首先需要定位到磁盘中的某块，如何有效地查找磁盘中的数据，需要一种合理高效的外存数据结构，
   比如说 B 树和 B+ 树。

   B 树中的每个结点根据实际情况可以包含大量的关键字信息和分支(当然是不能超过磁盘块的大小，根据磁盘驱动的不同，一般块的大小在 1k~4k 左右)，这样树的深度降低了，
   就意味着查找一个元素只要很少结点从外存磁盘中读入内存，很快访问到要查找的数据。

   而 B+ 树，通过一系列优化使得其更适合作为文件索引和数据库索引：
   1. B+ 树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对 B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。
      一次性读入内存中的需要查找的关键字也就越多。相对来说 IO 读写次数也就降低了
   2. 查询效率更加稳定，由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，使得每一个数据的查询效率相当
   3. B 树在提高了磁盘 IO 性能的同时并没有解决元素遍历的效率低下的问题，而 B+ 树只要遍历叶子节点就可以实现整棵树的遍历

   参考：
   + [[https://blog.csdn.net/v_JULY_v/article/details/6530142][从 B 树、B+ 树、B* 树谈到 R 树_磁盘,数据结构,存储_结构之法 算法之道-CSDN博客]]

* Others
** BK-Tree
   BK 树通常用于拼写检查，是比 Tries 树更好的选择：
   + [[https://en.wikipedia.org/wiki/BK-tree][BK-tree - Wikipedia]]

* Footnotes

[fn:1] 当前正在操作的节点，就是写代码时的 =currentNode= 

