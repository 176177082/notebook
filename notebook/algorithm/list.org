#+TITLE:      List

* 目录                                                    :TOC_4_gh:noexport:
- [[#链表][链表]]
  - [[#删除当前链表节点][删除当前链表节点]]
  - [[#合并有序链表][合并有序链表]]
  - [[#linux-内核链表][Linux 内核链表]]
- [[#跳表][跳表]]

* 链表
** 删除当前链表节点
   这个方法需要保证传入的节点不会是尾节点：
   #+BEGIN_SRC java
     class Solution {
       public void deleteNode(ListNode node) {
         node.val = node.next.val;
         node.next = node.next.next;
       }
     }
   #+END_SRC

** 合并有序链表
   + 递归合并
     #+BEGIN_SRC C
       Node* Merge(Node* head1, Node* head2) {
         if (head1 == NULL) return head2;
         if (head2 == NULL) return head1;

         Node* res = NULL;

         if (head1->value < head2->value) {
           res = head1;
           res->next = Merge(head1->next, head2);
         } else {
           res = head2;
           res->next = Merge(head1, head2->next);
         }

         return res;
       }
     #+END_SRC

   + 循环迭代合并
     #+BEGIN_SRC C
       Node* Merge(Node* head1, Node* head2) {
         if (head1 == NULL) return head2;
         if (head2 == NULL) return head1;

         Node* res;
         Node* ret;
         Node* p = head1;
         Node* q = head2;

         if (p->value < q->value) {
           res = p;
           p = p->next;
         } else {
           res = q;
           q = q->next;
         }

         ret = res;
         while (p && q) {
           if (p->value < q->value) {
             res->next = p;
             res = p;
             p = p->next;
           } else {
             res->next = q;
             res = q;
             q = q->next;
           }
         }

         while (p) {
           res->next = p;
           res = p;
           p = p->next;
         }

         while (q) {
           res->next = q;
           res = q;
           q = q->next;
         }

         return ret;
       }
     #+END_SRC

** Linux 内核链表
   Linux 内核链表的实现很巧妙，不存在数据域，而是选择通过 ~container_of~ 的方式来获取链表的 container，通过这种方式，可以通用 List 结构：
   #+begin_src C
     struct list_head {
       struct list_head *next, *prev;
     };
   #+end_src

   参考：[[https://www.ibm.com/developerworks/cn/linux/kernel/l-chain/index.html][深入分析 Linux 内核链表]]

* 跳表
  跳表是对有序链表的一种扩张，通过提取有序链表中的部分节点作为索引，提高查找、插入和删除效率，但是也会提高内存消耗：
  #+HTML: <img src="https://pic3.zhimg.com/80/v2-bfbe88e9c30b8417f73458f97d1d0da6_1440w.jpg">

  插入新节点时，通过随机判断的方式选择是否将当前节点提升为索引：
  #+HTML: <img src="https://pic4.zhimg.com/80/v2-25d7a651caf0be7716a910e4d434a5d7_1440w.jpg">
  #+HTML: <img src="https://pic1.zhimg.com/80/v2-b1b63213837cae345002fa034a7c05e0_1440w.jpg">
  #+HTML: <img src="https://pic2.zhimg.com/80/v2-0f42e111550b39c01cee48225b307fa5_1440w.jpg">

  删除时删除各层所有相同的节点：
  #+HTML: <img src="https://pic4.zhimg.com/80/v2-55915f6a2bcca4138eb6f9281309f003_1440w.jpg">
  #+HTML: <img src="https://pic4.zhimg.com/80/v2-6b3a8d23b9d90ed9e7888204ffdd0e47_1440w.jpg">

  参考：
  + [[https://zhuanlan.zhihu.com/p/53975333][漫画：什么是跳表？ - 知乎]]

