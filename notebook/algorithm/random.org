#+TITLE:      随机数相关

* 目录                                                    :TOC_4_gh:noexport:
- [[#c-语言随机数生成器源码][C 语言随机数生成器源码]]
- [[#蒙特卡洛方法][蒙特卡洛方法]]
  - [[#求-π][求 π]]
- [[#随机数生成算法][随机数生成算法]]
  - [[#随机数的分类][随机数的分类]]
  - [[#线性同余方法][线性同余方法]]
- [[#红包算法][红包算法]]

* C 语言随机数生成器源码
  #+BEGIN_SRC c
    /* rand */
    unsigned long _Randseed = 1;

    int (rand) (void) {
      _Randseed = _Randseed * 1103515245 + 12345;
      return ((unsigned int)(_Randseed >> 16) & RAND_MAX)
          }


    /* srand */
    void (srand) (unsigned int seed) {
      _Randseed = seed;
    }
  #+END_SRC

  其中， ~RAND_MAX~ 是由头文件 ~<stdlib.h>~ 定义的宏， 值为 ~rand~ 函数返回的最大值。

  *PS:* 如果要获得 ~0-1.0~ 之间的随机数， 可以：
  #+BEGIN_SRC c
    double rand_num = (double)rand() / RADN_MAX;
  #+END_SRC

  更多内容可参考：[[https://stackoverflow.com/questions/18634079/glibc-rand-function-implementation][C - glibc rand function implementation - Stack Overflow]]

* 蒙特卡洛方法
  *蒙特卡罗方法(Monte Carlo method)* 是一种以概率统计理论为指导的数值计算方法。
  是指使用随机数（伪随机数）来解决很多计算问题的方法。

  + [[https://zh.wikipedia.org/wiki/%E8%92%99%E5%9C%B0%E5%8D%A1%E7%BE%85%E6%96%B9%E6%B3%95][维基百科 - 蒙特卡罗方法]]

** 求 π
   #+BEGIN_SRC c
     #include <stdio.h>
     #include <stdlib.h>
     #include <time.h>

     int main(int argc, char* argv[]) {
       int times = 0, sum = 0;

       printf("Input times: ");
       scanf("%d", &times);

       srand(time(0));
       for (int i = 0; i < times; ++i) {
         double x = (double)rand() / RAND_MAX;
         double y = (double)rand() / RAND_MAX;

         if ((x * x + y * y) <= 1.0) {
           sum++;
         }
       }

       double pi = 4.0 * sum / times;
       printf("pi = %f", pi);

       return 0;
     }
   #+END_SRC

* 随机数生成算法
** 随机数的分类
   随机数的随机性检验的三个标准：
   1. *统计学伪随机性*

      统计学伪随机性指的是在给定的随机比特流样本中，1 的数量大致等于 0 的数量，同理，“10” “01” “00” “11” 四者数量大致相等。
      类似的标准被称为统计学随机性。满足这类要求的数字在人类“一眼看上去”是随机的

   2. *密码学安全伪随机性*

      其定义为，给定随机样本的一部分和随机算法，不能有效的演算出随机样本的剩余部分

   3. *真随机性*

      其定义为随机样本不可重现。实际上只要给定边界条件，真随机数并不存在，可是如果产生一个真随机数样本的边界条件十分复杂且难以捕捉，
      可以认为用这个方法演算出来了真随机数

   相应的三类随机数：
   1. *伪随机数：* 满足第一个条件的随机数
   2. *密码学安全的伪随机数：* 同时满足前两个条件的随机数。可以通过密码学安全伪随机数生成器计算得出
   3. *真随机数：* 同时满足三个条件的随机数


   + [[https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E6%95%B0][维基百科 - 随机数]]

** 线性同余方法
   *线性同余方法(LCG)* 是个生生伪随机数的方法。

   递归公式： [[file:img/rand.svg]]

   其中， *A*, *B*, *M* 是生成器设定的常数。

   LCG的周期最大为 *M*, 但大部分情况都会少于 *M*. 要令LCG达到最大周期，应符合以下条件：
   1. *B*, *M* 互质
   2. *M* 的所有质因数都能整除 *A - 1*
   3. 若 *M* 是 4 的倍数， *A - 1* 也是
   4. *A*, *B*, *N₀* 都比 *M* 小
   5. *A*, *B* 是正整数

   *PS:* 如果要获得 ~(0, 1)~ 之间的随机数， 可以用获取的随机数 *除 M*

* 红包算法
  问题：生成 10 个随机数 [0, 100] 且最终 10 个随机数之和为 100：

  解决方案：在一根 1 到 100 的数轴上，随机取 9 个点，拿到 10 个线段。计算每个线段的长度，即是取值。

  代码实现：
  #+BEGIN_SRC python :results output
    import random

    nums = [random.randint(0, 101) for i in range(9)]
    nums.extend([0, 100])
    nums.sort()

    result = []
    for i in range(1, 11):
        result.append(nums[i] - nums[i - 1])

    print(result, sum(result))
  #+END_SRC

  #+RESULTS:
  : [6, 7, 2, 2, 38, 22, 2, 2, 17, 2] 100

  概率统计：
  #+BEGIN_SRC python
    from collections import defaultdict

    import random


    def random_nums():
        nums = [random.randint(0, 101) for i in range(9)]
        nums.extend([0, 100])
        nums.sort()

        result = []
        for i in range(1, 11):
            result.append(nums[i] - nums[i - 1])

        return result

    counter = defaultdict(int)

    for i in range(1000):
        for num in random_nums():
            counter[num] += 1

    total = sum(counter.keys())
    for i in range(101):
        print('%d: %f' % (i, counter[i] / total))
  #+END_SRC

  更多参考：
  + [[https://www.zhihu.com/question/22625187][微信红包的随机算法是怎样实现的 - 知乎]]

    这种实现是根据剩余数量进行分配的，实现存储方便。

  + [[http://blog.sciencenet.cn/blog-797552-1089280.html][科学网—分红包的 Python 算法 - 康建的博文]]

    这种实现需要预先分配，实现简单，但存储要复杂一些

