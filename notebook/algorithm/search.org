#+TITLE:      Search

* 目录                                                    :TOC_4_gh:noexport:
- [[#二分搜索算法][二分搜索算法]]
- [[#遗传算法][遗传算法]]
- [[#埃拉托斯特尼筛法][埃拉托斯特尼筛法]]

* 二分搜索算法
  #+BEGIN_EXAMPLE
    a <= b, (a + b) / 2 <= b
  #+END_EXAMPLE

  只是单纯的查找指定元素，可以在闭区间 [left, right] 类进行查找：
  #+BEGIN_SRC C
    int bsearch(arr, left, right, target) {
      while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target) {
          return mid;
        } else if (arr[mid] > target) {
          right = mid - 1;
        } else {
          left = mid + 1;
        }
      }
      return -1;
    }
  #+END_SRC

  开区间 [left, right) 需要修改终止条件：
  #+BEGIN_SRC C
    int bsearch(arr, left, right, target) {
      while (left < right) {  // when left == right, mid = right, not in [left, right)
        int mid = left + (right - left) / 2;
        if (arr[mid] == target) {
          return mid;
        } else if (arr[mid] > target) {
          right = mid;  // [left, mid)
        } else {
          left = mid + 1;
        }
      }
      return -1;
    }
  #+END_SRC
  
  寻找下界时使用闭区间会陷入死循环，因此需要使用左闭右开区间 [left, right)：
  #+BEGIN_SRC C
    // arr[index] >= taget, arr[index - 1] < target
    int lower_bound(arr, left, right, target) {
      while (left < right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] < target) {
          left = mid + 1; // [mid, right)
        } else {
          right = mid;   // [left, mid)
        }
      }
      return left;
    }
  #+END_SRC

  当 target 比所有值都大时，left 会逐渐逼近 right，直到相等。

  当 target 比所有值都小时，right 会逐渐逼近 left，直到相等。

  寻找上界：
  #+BEGIN_SRC C
    // arr[index] > taget, arr[index - 1] <= target
    int lower_bound(arr, left, right, target) {
      while (left < right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] <= target) {
          left = mid + 1; // [mid, right)
        } else {
          right = mid;   // [left, mid)
        }
      }
      return left;
    }
  #+END_SRC

  + [[https://www.zhihu.com/question/36132386/answer/530313852][二分查找算法讲解 - 知乎]]
  + [[https://en.wikipedia.org/wiki/Binary_search_algorithm][Binary search algorithm - Wikipedia]]

  关键问题：
  1. while 循环的终止条件，开区间与闭区间时是不一样的
  2. 区间范围的收缩标准，目的与区间不一样时也是不一样的
  3. 实际上存在有三个区间
  4. 上界和下界之间的联系
  5. 中点的计算：
     #+BEGIN_EXAMPLE
       first + (last - first) / 2
       last - (last - first) / 2
     #+END_EXAMPLE

* 遗传算法
  *遗传算法(genetic algorithm (GA))* 是计算数学中用于解决最佳化的 *搜索算法*, 是进化算法的一种。
  
  + [[https://zh.wikipedia.org/wiki/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95][遗传算法 - 维基百科，自由的百科全书]]

* 埃拉托斯特尼筛法
  *埃拉托斯特尼筛法* 可以用来找出一定范围内所有的素数，是一种简单且历史悠久的筛法。

  代码实现：
  #+BEGIN_SRC python
    def eratosthenes(n):
        IsPrime = [True] * (n + 1)
        IsPrime[1] = False  #1不为素数
        for i in range(2, int(n ** 0.5) + 1):
            if IsPrime[i]:
                for j in range(i * i, n + 1, i):
                    IsPrime[j] = False
        return {x for x in range(2, n + 1) if IsPrime[x]}

    if __name__ == "__main__":
        print(eratosthenes(120))
  #+END_SRC

  原理图解：
  #+HTML: <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/Sieve_of_Eratosthenes_animation.gif/350px-Sieve_of_Eratosthenes_animation.gif">

  + [[https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95][埃拉托斯特尼筛法 - 维基百科，自由的百科全书]]
