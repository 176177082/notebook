#+TITLE:      Containers

* 目录                                                    :TOC_4_gh:noexport:
- [[#链表][链表]]
  - [[#删除当前链表节点][删除当前链表节点]]
  - [[#合并有序链表][合并有序链表]]
  - [[#linux-内核链表][Linux 内核链表]]
- [[#跳表][跳表]]
- [[#后缀表达式][后缀表达式]]
  - [[#中缀表达式---后缀表达式][中缀表达式 -> 后缀表达式]]
  - [[#后缀表达式的计算][后缀表达式的计算]]
- [[#斐波那契堆][斐波那契堆]]
- [[#相关链接][相关链接]]

* 链表
** 删除当前链表节点
   这个方法需要保证传入的节点不会是尾节点：
   #+BEGIN_SRC java
     class Solution {
       public void deleteNode(ListNode node) {
         node.val = node.next.val;
         node.next = node.next.next;
       }
     }
   #+END_SRC

** 合并有序链表
   + 递归合并
     #+BEGIN_SRC C
       Node* Merge(Node* head1, Node* head2) {
         if (head1 == NULL) return head2;
         if (head2 == NULL) return head1;

         Node* res = NULL;

         if (head1->value < head2->value) {
           res = head1;
           res->next = Merge(head1->next, head2);
         } else {
           res = head2;
           res->next = Merge(head1, head2->next);
         }

         return res;
       }
     #+END_SRC

   + 循环迭代合并
     #+BEGIN_SRC C
       Node* Merge(Node* head1, Node* head2) {
         if (head1 == NULL) return head2;
         if (head2 == NULL) return head1;

         Node* res;
         Node* ret;
         Node* p = head1;
         Node* q = head2;

         if (p->value < q->value) {
           res = p;
           p = p->next;
         } else {
           res = q;
           q = q->next;
         }

         ret = res;
         while (p && q) {
           if (p->value < q->value) {
             res->next = p;
             res = p;
             p = p->next;
           } else {
             res->next = q;
             res = q;
             q = q->next;
           }
         }

         while (p) {
           res->next = p;
           res = p;
           p = p->next;
         }

         while (q) {
           res->next = q;
           res = q;
           q = q->next;
         }

         return ret;
       }
     #+END_SRC

** Linux 内核链表
   Linux 内核链表的实现很巧妙，不存在数据域，而是选择通过 ~container_of~ 的方式来获取链表的 container，通过这种方式，可以通用 List 结构：
   #+begin_src C
     struct list_head {
       struct list_head *next, *prev;
     };
   #+end_src

   参考：[[https://www.ibm.com/developerworks/cn/linux/kernel/l-chain/index.html][深入分析 Linux 内核链表]]
* 跳表
  跳表是对有序链表的一种扩张，通过提取有序链表中的部分节点作为索引，提高查找、插入和删除效率，但是也会提高内存消耗：
  #+HTML: <img src="https://pic3.zhimg.com/80/v2-bfbe88e9c30b8417f73458f97d1d0da6_1440w.jpg">

  插入新节点时，通过随机判断的方式选择是否将当前节点提升为索引：
  #+HTML: <img src="https://pic4.zhimg.com/80/v2-25d7a651caf0be7716a910e4d434a5d7_1440w.jpg">
  #+HTML: <img src="https://pic1.zhimg.com/80/v2-b1b63213837cae345002fa034a7c05e0_1440w.jpg">
  #+HTML: <img src="https://pic2.zhimg.com/80/v2-0f42e111550b39c01cee48225b307fa5_1440w.jpg">

  删除时删除各层所有相同的节点：
  #+HTML: <img src="https://pic4.zhimg.com/80/v2-55915f6a2bcca4138eb6f9281309f003_1440w.jpg">
  #+HTML: <img src="https://pic4.zhimg.com/80/v2-6b3a8d23b9d90ed9e7888204ffdd0e47_1440w.jpg">

  参考：
  + [[https://zhuanlan.zhihu.com/p/53975333][漫画：什么是跳表？ - 知乎]]
* 后缀表达式
** 中缀表达式 -> 后缀表达式
   中缀表达式 ~a + b * c + (d * e + f) * g~ 转换得到的后缀表达式为 ~a b c * + d e * f  + g * +~, 转换规则为：
   1. 如果遇到操作数，我们就直接将其输出
   2. 如果遇到操作符，则我们将其放入到栈中，遇到左括号时我们也将其放入栈中
   3. 如果遇到一个右括号，则将栈元素弹出，将弹出的操作符输出直到遇到左括号为止。注意，左括号只弹出并不输出
   4. 如果遇到任何其他的操作符，如 ~+~ ~*~ ~(~ 等，从栈中弹出元素直到遇到发现更低优先级的元素(或者栈为空)为止。弹出完这些元素后，
      才将遇到的操作符压入到栈中
   5. 如果我们读到了输入的末尾，则将栈中所有元素依次弹出

   #+begin_src python
     def convert(express: str) -> str:
         stack, res = [], []

         ops = ['(', ')', '+', '-', '*', '/']
         priority = {
             '*': 2,
             '/': 2,
             '+': 1,
             '-': 1,
             '(': 0
         }

         for ch in express:
             if ch in ops:
                 if ch == '(':
                     stack.append(ch)
                 elif ch == ')':
                     while not stack[-1] == '(':
                         res.append(stack.pop())
                     stack.pop()
                 else:
                     while stack and priority[stack[-1]] >= priority[ch]:
                         res.append(stack.pop())
                     stack.append(ch)
             else:
                 res.append(ch)

         res.extend(stack[::-1])

         return ''.join(res)
   #+end_src

** 后缀表达式的计算
   后缀表达式的计算相对来说就比较简单了：
   1. 如果遇到操作数就将操作数放入栈中
   2. 如果遇到操作符，将计算结果 ~stack[-2] op stack[-1]~ 放入栈中

* 斐波那契堆
  *斐波那契堆（Fibonacci heap）* 是计算机科学中 *树* 的集合。它比二项堆具有更好的平摊分析性能，可用于实现合并优先队列。

  斐波那契数列的基本结构如下：
  #+BEGIN_SRC C
    // 斐波那契结点 ADT
    typedef struct FibonacciHeapNode {
      int key;                   // 该节点的值
      int degree;                // 该节点子节点的数量
      FibonacciHeapNode* left;   // 左兄弟
      FibonacciHeapNode* right;  // 右兄弟
      FibonacciHeapNode* parent; // 父结点
      FibonacciHeapNode* child;  // 孩子结点
      bool marked;               // 是否被删除孩子节点
    } FibNode;

    // 斐波那契堆 ADT
    typedef struct FibonacciHeap {
      int keyNum;               // 堆中结点个数
      FibonacciHeapNode* min;   // 最小堆，根结点
      int maxNumOfDegree;       // 最大度
      FibonacciHeapNode** cons; // 指向最大度的内存区域
    } FibHeap;
  #+END_SRC

  其中，每个节点的所有子节点通过 left 和 right 链接为一个循环链表，而所有根结点也通过 left 和 right 链接为一个循环链表。

  执行的各个操作：
  + *插入一个节点：* 创建一个仅包含一个节点的新的斐波纳契堆，然后执行 *堆合并*
  + *查找最小的节点：* 由于用一个指针指向了具有最小值的根节点，因此查找最小的节点是简单的操作
  + *合并两个斐波纳契堆：* 可以简单地通过连接两个堆的树根列表来实现合并
  + *释放（删除）最小的节点：*
    1) 找到最小的根节点并删除它，其所有的子节点都加入堆的根表，即它的子树都成为堆所包含的树
    2) 合并当前根结点中所有度数相同的节点，节点值大的作为节点值小的子节点，重复直到所有根结点的度数不相同
    3) 找到最小的根结点并用 min 指向它
  + *降低一个节点的键值：*
    1) 如果当前节点键值小于其父节点的键值，则把该节点及其子树摘下来作为堆的新树的根节点
    2) 其原父节点如果是被标记（marked）节点，则也被摘下来作为堆的新树的根节点
    3) 如果其原父节点不是被标记（marked）节点且不是根节点，则其原父节点被加标记
    4) 如果堆的新树的根节点被标记（marked），则去除该标记
    5) 自下而上执行以上操作，直至到根节点或一个未被标记（marked）节点为止
  + *增加节点值：*
    1) 将被增加节点的左孩子和左孩子的所有兄弟都链接到根链表中
    2) 把被增加节点添加到根链表，同时进行级联剪切

  其中最复杂的释放最小节点和降低节点值的操作，可以用图片来演示这一过程：
  1. 斐波那契堆示例：

     #+HTML: <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Fibonacci_heap.png/250px-Fibonacci_heap.png">

  2. 提取最小值节点后：

     #+HTML: <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Fibonacci_heap_extractmin1.png/170px-Fibonacci_heap_extractmin1.png">

  3. 执行根结点的合并：

     #+HTML: <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Fibonacci_heap_extractmin2.png/130px-Fibonacci_heap_extractmin2.png">

  4. 降低节点 9 的值为 0：

     #+HTML: <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/Fibonacci_heap-decreasekey.png/250px-Fibonacci_heap-decreasekey.png">

  相关链接：
  + [[https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86][斐波那契堆 - 维基百科，自由的百科全书]]
  + [[https://en.wikipedia.org/wiki/Fibonacci_heap][Fibonacci heap - Wikipedia]]
  + [[https://www.cnblogs.com/skywang12345/p/3659060.html][斐波那契堆之图文解析和 C 语言的实现 - 如果天空不死 - 博客园]]
* 相关链接
  + [[http://www.cplusplus.com/reference/stl/][Containers - C++ Reference]]

