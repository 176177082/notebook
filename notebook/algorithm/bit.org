#+TITLE:      位运算

* 目录                                                    :TOC_4_gh:noexport:
- [[#相关概念][相关概念]]
- [[#整数操作][整数操作]]
- [[#字节对齐][字节对齐]]
- [[#相关技巧][相关技巧]]
- [[#其他操作][其他操作]]

* 相关概念
  + 数字 ~0-9~ 的 ~ASCII~ 码为： ~0x30 - 0x39~.
  + 字母 ~a-z~ 的 ~ASCII~ 码为： ~0x61 - 0x7A~.
  + 算术和逻辑左移：高位遗弃，低位补 0
  + 算术右移：低位遗弃，高位补符号位的值
  + 逻辑右移：低位遗弃，高位补 0
  + 掩码运算：掩码 ~0xFF~ 获取一个二进制数据的最低 8 位数据，其他位置为 0

* 整数操作
  可以通过按位与运算判断整数的奇偶性：
  #+BEGIN_SRC C
    num & 1;  // 偶数为 0，奇数为 1
  #+END_SRC

  可以通过位运算获得整数类型的最大值最小值：
  #+BEGIN_SRC C
    int INT_MAX = (1 << 31) - 1;  // ~(1 << 31)
    int INT_MIX = 1 << 31;
  #+END_SRC

  通过移位操作乘以或除以 ~2~ 的 ~n~ 次幂：
  #+BEGIN_SRC C
    num << n;  // 乘
    num >> n;  // 除
  #+END_SRC

  异或自身和异或 ~0~ 的效果：
  #+BEGIN_SRC C
    a ^ a = 0;  // 异或自身得 0
    a ^ 0 = a;  // 异或 0 的自身
  #+END_SRC

* 字节对齐
  通过如下方式使得 size 为 4 的倍数，其中，4 的倍数最后两位必然为 0：
  #+BEGIN_SRC C
    size_t alingn4(size_t size) {
      if (size & 0x3 == 0) {
        return size;
      }
      return ((size >> 2) + 1) << 2;
    }
  #+END_SRC
    
  通过如下方式使得 size 为 8 的倍数，其中，8 的倍数最后三位必然为 0：
  #+BEGIN_SRC C
    size_t align8(size_t size) {
      if (size & 0x7 == 0) {
        return size;
      }
      return ((size >> 3) + 1) << 3;
    }
  #+END_SRC

* 相关技巧
  统计一个整数中 1 的个数，可以通过 ~>>~ 运算来解决，但也可以通过如下方式解决：
  #+begin_src python
    def counter(n: int) -> int:
        count = 0
        while n:
            count += 1
            n = n & (n - 1)
        return count
  #+end_src

  其中原理为，当计算 ~n - 1~ 时，数字 ~n~ 中的某一位 ~1~ 必然会变为 ~0~, 此时，通过 ~&~ 运算就可以得到少了一位 1 的新数字：
  #+begin_src python
    In [1]: def run(n: int):
       ...:     while n:
       ...:         print(bin(n))
       ...:         n = n & (n - 1)
       ...:

    In [2]: run(10)
    0b1010
    0b1000

    In [3]: run(11)
    0b1011
    0b1010
    0b1000
  #+end_src

  强者的写法：
  + https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/shared/System/Numerics/BitOperations.cs#L187

  -----
  
  在 Java 的 HashMap 和 ConcurrentHashMap 中可以发现计算索引时通过 ~(tab.length - 1) & hash~ 的方式完成的，这是因为：
  1. tab.length 的长度必须为 2 的幂
  2. 此时 tab.length - 1 的右端必然全为 1
  3. 计算 ~(tab.length - 1) & hash~ 时就可以根据 ~hash~ 值中 1 的位置和个数得到均匀的分布

* 其他操作
  #+begin_src java
    /**
     ,* 获取第 n + 1 位的值
     ,*/
    public static byte get(byte b, int n) {
      return (byte) ((b >> n) & 1);
    }

    /**
     ,* 设置第 n + 1 位的值为 1
     ,*/
    public static byte set1(byte b, int n) {
      return (byte) (b | (1 << n));
    }

    /**
     ,* 设置第 n + 1 位的值为 0
     ,*/
    public static byte set0(byte b, int n) {
      return (byte) (b & ~(1 << n));
    }

    /**
     ,* 取反第 n + 1 位的值
     ,*/
    public static byte neg(byte b, int n) {
      return (byte) (b ^ (1 << n));
    }
  #+end_src

