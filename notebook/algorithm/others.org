#+TITLE:      Others

* 目录                                                    :TOC_4_gh:noexport:
- [[#base64-编码][Base64 编码]]
- [[#lru-cache][LRU Cache]]
- [[#bitmap][BitMap]]
- [[#bloomfilter][BloomFilter]]
- [[#滑动窗口算法][滑动窗口算法]]

* Base64 编码
  *Base64* 是一种基于 64 个可打印字符来表示二进制数据的表示方法。由于 2 ** 6 = 64，所以每 6 个比特为一个单元，对应某个可打印字符。

  转换方式：
  + 首先，对二进制数据进行处理，每 3 个字节一组，一共是 3 x 8 = 24bit，划为 4 组，每组正好 6 个 bit：
    #+HTML: <img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001399415038305edba53df7d784a7fa76c6b7f6526873b000">

  + 得到 4 个数字作为索引，然后查表，获得相应的 4 个字符，就是编码后的字符串

  + 如果要编码的二进制数据不是 3 的倍数，可以用 \x00 字节在末尾补足后，再在编码的末尾加上 1 个或 2 个 = 号，表示补了多少字节

  简单的实现：
  #+BEGIN_SRC js
    function base64_encode (s)
    {
      // the result/encoded string, the padding string, and the pad count
      var base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var r = "";
      var p = "";
      var c = s.length % 3;

      // add a right zero pad to make this string a multiple of 3 characters
      if (c > 0) {
        for (; c < 3; c++) {
          p += '=';
          s += "\0";
        }
      }

      // increment over the length of the string, three characters at a time
      for (c = 0; c < s.length; c += 3) {

        // we add newlines after every 76 output characters, according to the MIME specs
        if (c > 0 && (c / 3 * 4) % 76 == 0) {
          r += "\r\n";
        }

        // these three 8-bit (ASCII) characters become one 24-bit number
        var n = (s.charCodeAt(c) << 16) + (s.charCodeAt(c+1) << 8) + s.charCodeAt(c+2);

        // this 24-bit number gets separated into four 6-bit numbers
        n = [(n >>> 18) & 63, (n >>> 12) & 63, (n >>> 6) & 63, n & 63];

        // those four 6-bit numbers are used as indices into the base64 character list
        r += base64chars[n[0]] + base64chars[n[1]] + base64chars[n[2]] + base64chars[n[3]];
      }
       // add the actual padding string, after removing the zero pad
      return r.substring(0, r.length - p.length) + p;
    }

    function base64_decode (s)
    {
      var base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      // remove/ignore any characters not in the base64 characters list
      //  or the pad character -- particularly newlines
      s = s.replace(new RegExp('[^'+base64chars.split("")+'=]', 'g'), "");

      // replace any incoming padding with a zero pad (the 'A' character is zero)
      var p = (s.charAt(s.length-1) == '=' ?
              (s.charAt(s.length-2) == '=' ? 'AA' : 'A') : "");
      var r = "";
      s = s.substr(0, s.length - p.length) + p;

      // increment over the length of this encoded string, four characters at a time
      for (var c = 0; c < s.length; c += 4) {

        // each of these four characters represents a 6-bit index in the base64 characters list
        //  which, when concatenated, will give the 24-bit number for the original 3 characters
        var n = (base64inv[s.charAt(c)] << 18) + (base64inv[s.charAt(c+1)] << 12) +
                (base64inv[s.charAt(c+2)] << 6) + base64inv[s.charAt(c+3)];

        // split the 24-bit number into the original three 8-bit (ASCII) characters
        r += String.fromCharCode((n >>> 16) & 255, (n >>> 8) & 255, n & 255);
      }
       // remove any zero pad that was added to make this a multiple of 24 bits
      return r.substring(0, r.length - p.length);
    }
  #+END_SRC

  参考链接：：
  + [[https://en.wikibooks.org/wiki/Algorithm_Implementation/Miscellaneous/Base64][Algorithm Implementation/Miscellaneous/Base64 - Wikibooks, open books for an open world]]

* LRU Cache
  LRU Cache 需要保证最近访问的节点保持在限定容量的 Cache 中，如果超过容量则应该把近期最少使用的节点删除掉。

  LRU Cache 可以借助散列表和链表实现，基本思路如下：
  1. 通过双向链表来存储所有的 *值*
  2. 通过散列表来存储所有的 *键 - 链表节点* 对
  3. 访问键时获取对应的节点，如果节点存在便将该节点移到链表一端，同时返回值
  4. 增加键时判断是否达到容量上限，如果达到就删除链表另一端的节点

  简易的实现：
  #+BEGIN_SRC java
    public class LRUCache<K, V> {
      class Node<K, V> {
        Node<K, V> prev;
        Node<K, V> next;
        K key;
        V val;

        Node(K key, V val) {
          this.key = key;
          this.val = val;
        }
      }

      private Map<K, Node<K, V>> map = new HashMap<>();
      private Node<K, V> head;
      private Node<K, V> tail;

      private int capacity;

      public LRUCache(int capacity) {
        this.capacity = capacity;
        this.head = new Node<>(null, null);
        this.tail = new Node<>(null, null);
        head.next = tail;
        tail.prev = head;
      }

      public V get(K key) {
        Node<K, V> node = map.get(key);
        if (node != null) {
          node.prev.next = node.next;
          node.next.prev = node.prev;
          appendTail(node);
          return node.val;
        }
        return null;
      }

      public void set(K key, V val) {
        Node<K, V> node = map.get(key);

        if (node != null) {
          node.val = val;
          // map.put(key, node);
          node.prev.next = node.next;
          node.next.prev = node.prev;
          appendTail(node);
        } else {
          if (map.size() == capacity) {
            Node<K, V> temp = head.next;
            head.next = head.next.next;
            head.next.prev = head;
            map.remove(temp.key);
          }

          node = new Node<>(key, val);
          appendTail(node);
          map.put(key, node);
        }
      }

      private void appendTail(Node<K, V> node) {
        node.next = tail;
        node.prev = tail.prev;
        tail.prev.next = node;
        tail.prev = node;
      }
    }
  #+END_SRC

  同时，可以借助 Java 中的 LinkedHashMap 快速实现：
  #+BEGIN_SRC java
    public class LRUCache<K, V> extends LinkedHashMap<K, V> {
      private int maxSize;

      public LRUCache(int initialCapacity, float loadFactor, int maxSize) {
        // 参数 true 表示按照访问对链表排序
        super(initialCapacity, loadFactor, true);
        this.maxSize = maxSize;
      }

      protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
        return size() > maxSize;
      }
    }
  #+END_SRC

  参考：[[https://yikun.github.io/2015/04/03/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AALRU-Cache%EF%BC%9F/][如何设计实现一个 LRU Cache | Yikun]]

* BitMap
  BitMap 算法通过一个 Bit 数组来标识一个值是否存在，如果该值存在，就将该值所在的 Bit 位置为 1，反之置为 0。

  因为 BitMap 算法中用来标识一个值是否存在只需要一个 Bit 位，因此，相较于直接使用 HashSet 之类的数据结构可以节约很多内存。

  在 Java 中使用时，可以通过 BitSet 直接使用：
  #+begin_src java
    public BitSet fromArray(int[] array) {
      BitSet bs = new BitSet(4_000_000_000);

      for (int i = 0; i < array.length; ++i) {
        bs.set(array[i], true);
      }

      return bs;
    }
  #+end_src
  
  可以说，使用 BitMap 来处理整数值是很简单的，但是，对于其他类型的对象就不是那么好处理了。

* BloomFilter
  布隆过滤器的原理是：当一个元素被加入集合时，通过 K 个散列函数将这个元素映射成一个位数组中的 K 个点，把它们置为 1。检索时，我们只要看看这些点是不是都是 1 就（大约）知道集合中有没有它了。

  如果这些点有任何一个 0，则被检元素一定不在，如果都是 1，则被检元素很可能在。这就是布隆过滤器的基本思想。

  可以发现，布隆过滤器就是 BitMap 算法的升级版，虽然存在一定的误差，但是，效率上还是很不错的。

* 滑动窗口算法
  在 LeetCode 上遇到 [[https://leetcode-cn.com/problems/longest-repeating-character-replacement/submissions/][424. 替换后的最长重复字符]] 这道题的时候，直接的想法就是暴力解决，然后 Time Out。看了题解后发现，使用了不是很熟悉的滑动窗口算法解答。

  算法通常的步骤为：找到第一个窗口，然后根据边界条件缩小左窗口边界，扩展右窗口边界。

  可以参考：
  + [[https://www.zhihu.com/question/314669016/answer/620247024][什么是「滑动窗口算法」（sliding window algorithm），有哪些应用场景？ - 王天笑的回答 - 知乎]]
  + [[https://note.youdao.com/ynoteshare1/index.html?id=270d3cd80b048c1074dcfa5b14ece4b4&type=note][LeetCode笔记-Java版-专题篇-滑动窗口]]

