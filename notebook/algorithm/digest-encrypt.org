#+TITLE:      消息摘要与加密算法

* 目录                                                    :TOC_4_gh:noexport:
- [[#消息摘要算法][消息摘要算法]]
  - [[#常用算法][常用算法]]
  - [[#hmac][HMAC]]
- [[#非对称加密算法][非对称加密算法]]
  - [[#rsa-算法][RSA 算法]]
- [[#对称加密算法][对称加密算法]]
  - [[#aes-算法][AES 算法]]

* 消息摘要算法
** 常用算法
  |----------+----------------------------+----------|
  | 算法名称 | 摘要长度                   | 是否安全 |
  |----------+----------------------------+----------|
  | MD5      | 128 位，16 字节，32 个字符 | 否       |
  | SHA256   | 256 位，32 字节，64 个字符 | 是       |
  |----------+----------------------------+----------|
 
** HMAC
   通过 Hash 算法进行消息摘要的时候，可以增加一个 slat 使得相同的输入也能得到不同的摘要结果，避免通过彩虹表得到原始输入。

   算法的伪代码如下：
   #+BEGIN_EXAMPLE
     Function hmac
        Inputs:
           key:        Bytes     //array of bytes
           message:    Bytes     //array of bytes to be hashed
           hash:       Function  //the hash function to use (e.g. SHA-1)
           blockSize:  Integer   //the block size of the underlying hash function (e.g. 64 bytes for SHA-1)
           outputSize: Integer   //the output size of the underlying hash function (e.g. 20 bytes for SHA-1)

        //Keys longer than blockSize are shortened by hashing them
        if (length(key) > blockSize) then
           key ← hash(key) //Key becomes outputSize bytes long
   
        //Keys shorter than blockSize are padded to blockSize by padding with zeros on the right
        if (length(key) < blockSize) then
           key ← Pad(key, blockSize) //pad key with zeros to make it blockSize bytes long
    
        o_key_pad = key xor [0x5c * blockSize]   //Outer padded key
        i_key_pad = key xor [0x36 * blockSize]   //Inner padded key
    
        return hash(o_key_pad ∥ hash(i_key_pad ∥ message)) //Where ∥ is concatenation
   #+END_EXAMPLE

   在 Python 中的使用：
   #+BEGIN_SRC python
     >>> import hmac
     >>> message = b'Hello, world!'
     >>> key = b'secret'
     >>> h = hmac.new(key, message, digestmod='MD5')
     >>> # 如果消息很长，可以多次调用 h.update(msg)
     >>> h.hexdigest()
     'fa4ee7d173f2d97ee79022d1a7355bcf'
   #+END_SRC
* 非对称加密算法
** RSA 算法
   *RSA 加密算法* 是一种非对称加密算法，可靠性来源于对极大整数做因数分解的难度，可以参考：
   + [[http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html][阮一峰 - RSA 算法原理一]]
   + [[http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html][阮一峰 - RSA 算法原理二]]

* 对称加密算法
** AES 算法
   高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称 Rijndael 加密法，是美国联邦政府采用的一种区块加密标准。

   参考链接：
   + [[https://www.cnblogs.com/luop/p/4334160.html][密码算法详解——AES - ReadingLover - 博客园]]

