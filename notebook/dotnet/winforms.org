#+TITLE:      .NET - WinForm 相关笔记

* 目录                                                    :TOC_4_gh:noexport:
- [[#mouseeventargs][MouseEventArgs]]
- [[#实现无边框-form-的移动][实现无边框 Form 的移动]]
- [[#creategraphics-method-and-paint-event-args][CreateGraphics() Method and Paint Event Args]]
- [[#通知的使用][通知的使用]]
- [[#系统事件的使用][系统事件的使用]]
- [[#开机自启动的实现][开机自启动的实现]]
- [[#appconfig][App.Config]]
- [[#右下角弹窗实现][右下角弹窗实现]]

* MouseEventArgs
  ~MouseEventArgs~ 的属性 ~X, Y~ 得到的坐标是相对于 *控件* 而言的，而不是屏幕或窗口。
  
  + [[https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.mouseeventargs?view=netframework-4.7.2][MouseEventArgs Class]]

* 实现无边框 Form 的移动
  + 通过记录窗口位置和鼠标位置实现
    #+BEGIN_SRC csharp
      bool isMoving = false;
      Point mouseOffset;

      void MouseDown(object sender, MouseEventArgs e) {
        mouseOffset = new Point(-e.X, -e.Y);
        isMoving = true;
      }

      void MouseMove(object sender, MouseEventArgs e) {
        if (isMoving) {
          Point mouseSet = Control.MousePosition;
          mouseSet.offset(mouseOffset);
          this.Location = mouseSet;
        }
      }

      void MouseUp(object sender, MouseEventArgs e) {
        isMoving = false;
      }
    #+END_SRC

  + 通过调用底层接口实现
    #+BEGIN_SRC csharp
      /// <summary>
      /// Utilities for Form.
      /// </summary>
      public class FormUtils
      {
        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HT_CAPTION = 0x2;

        [DllImportAttribute("user32.dll")]
        public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);
        [DllImportAttribute("user32.dll")]
        public static extern bool ReleaseCapture();

        /// <summary>
        /// Practical mouse moves Form without borders.
        /// </summary>
        /// <param name="form">The form to be moved.</param>
        public static void FormMoveWithMouse(Form form) {
          ReleaseCapture();
          SendMessage(form.Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
        }
      }
    #+END_SRC

* CreateGraphics() Method and Paint Event Args
  1. CreateGraphics gives you a graphics object that you should always Dispose() prior to exiting.
     You should put your statement inside of a using block.

  2. The graphics you draw are only valid until the form gets repainted.
     In your case, by calling this in Form_Load, it's happening prior to the first render, and getting "thrown away".
     You should always put this in OnPaint() in order to have it "persistent" on the screen, as that will cause it to get redrawn when the control is redrawn.

* 通知的使用
  使用通知可以在任务栏显示小图标，并可以通过气泡显示通知消息：
  + [[https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.notifyicon?view=netframework-4.7.2][NotifyIcon Class (System.Windows.Forms) | Microsoft Docs]]  
  
  图标的菜单可以通过 ContextMenu 属性设置。

* 系统事件的使用
  通过注册系统事件来监听系统状态的变化：
  + [[https://docs.microsoft.com/en-us/dotnet/api/microsoft.win32.systemevents?redirectedfrom=MSDN&view=netframework-4.7.2][SystemEvents Class (Microsoft.Win32) | Microsoft Docs]]  

* 开机自启动的实现
  通过编辑注册表实现，相关的注册表项：
  #+BEGIN_EXAMPLE
    HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
    HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run 
  #+END_EXAMPLE

  实现的代码：
  #+BEGIN_SRC csharp
    var path = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Run";
    RegistryKey key = Registry.CurrentUser.OpenSubKey(path, true);
    key.SetValue("MyApplication", Application.ExecutablePath.ToString());
  #+END_SRC

  + [[https://stackoverflow.com/questions/7427354/program-start-with-windows-c-sharp][winforms - Program start with windows? c# - Stack Overflow]]
  
* App.Config
  + 需要的名称空间
    #+BEGIN_SRC csharp
      using System.Configuration
    #+END_SRC

  + 添加键值对到配置文件
    #+BEGIN_SRC csharp
      Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
      config.AppSettings.Settings.Add(key, value);
      config.Save(ConfigurationSaveMode.Modified);
      ConfigurationManager.RefreshSection("appSettings");
    #+END_SRC

  + 判断键是否存在
    #+BEGIN_SRC csharp
      public bool exists(string keyName)
      {
        foreach (string key in ConfigurationManager.AppSettings)
        {
          if (key == keyName)
          {
            return true;
          }
        }
        return false;
      }
    #+END_SRC

  + 获取键的值
    #+BEGIN_SRC csharp
      ConfigurationManager.AppSettings[key];
    #+END_SRC

  + 修改键的值
    #+BEGIN_SRC csharp
      Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
      config.AppSettings.Settings[key].Value = value;
      config.Save(ConfigurationSaveMode.Modified);
      ConfigurationManager.RefreshSection("appSettings");
    #+END_SRC

  + 删除键
    #+BEGIN_SRC csharp
      Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
      config.AppSettings.Settings.Remove(key);
      config.Save(ConfigurationSaveMode.Modified);
      ConfigurationManager.RefreshSection("appSettings");
    #+END_SRC

* 右下角弹窗实现
  #+BEGIN_SRC csharp
    void PopupFormLoad(object sender, EventArgs e)
    {
      Rectangle workingArea = Screen.GetWorkingArea(this);
      this.Location = new Point(workingArea.Right, workingArea.Bottom - this.Size.Height);
      timer.Enabled = true;
    }

    void TimerTick(object sender, EventArgs e)
    {
      if (widthOffset < this.Size.Width) {
        widthOffset += 4;

        Rectangle workingArea = Screen.GetWorkingArea(this);
        this.Location = new Point(workingArea.Right - widthOffset,
                                  workingArea.Bottom - this.Size.Height);
      } else {
        timer.Enabled = false;
      }
    }
  #+END_SRC

