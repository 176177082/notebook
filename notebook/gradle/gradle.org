#+TITLE:      Gradle - 基础使用

* 目录                                                    :TOC_4_gh:noexport:
- [[#任务相关][任务相关]]
- [[#构建][构建]]
- [[#依赖管理][依赖管理]]
- [[#插件使用][插件使用]]
- [[#gradle-wrapper][Gradle Wrapper]]
- [[#多项目构建][多项目构建]]
- [[#buildscript][buildscript]]

* 任务相关
  使用关键字 ~task~ 定义任务：
  #+BEGIN_SRC groovy
    task hello {
      doLast {
        println 'tutorialspoint'
      }
    }

    task hello << {
      println 'tutorialspoint'
    }

    task('hello') << {
      println "tutorialspoint"
    }

    tasks.create(name: 'hello') << {
      println "tutorialspoint"
    }
  #+END_SRC

  查看任务属性：
  #+BEGIN_SRC groovy
    task hello

    println hello.name
    println project.hello.name

    // -----------------------

    task hello

    println tasks.hello.name
    println tasks['hello'].name

    // ------------------------

    project(':projectA') {
      task hello
    }
    task hello

    println tasks.getByPath('hello').path
    println tasks.getByPath(':hello').path
    println tasks.getByPath('projectA:hello').path
    println tasks.getByPath(':projectA:hello').path
  #+END_SRC

  添加任务依赖：
  #+BEGIN_SRC groovy
    task taskX << {
      println 'taskX'
    }

    task taskY(dependsOn: 'taskX') << {
      println "taskY"
    }

    // --------------------------------

    task taskY << {
      println 'taskY'
    }

    task taskX << {
      println 'taskX'
    }

    taskY.dependsOn taskX

    // ------------------

    task taskX << {
      println 'taskX'
    }

    taskX.dependsOn {
      tasks.findAll {
        task -> task.name.startsWith('lib')
      }
    }

    task lib1 << {
      println 'lib1'
    }

    task lib2 << {
      println 'lib2'
    }

    task notALib << {
      println 'notALib'
    }
  #+END_SRC
  
  添加任务描述：
  #+BEGIN_SRC groovy
    task copy(type: Copy) {
      description 'Copies the resource directory to the target directory.'
      from 'resources'
      into 'target'
      include('**/*.txt', '**/*.xml', '**/*.properties')
      println("description applied")
    }
  #+END_SRC

  跳过任务：
  #+BEGIN_SRC groovy
    task eclipse << {
       println 'Hello Eclipse'
    }

    // #1st approach - closure returning true, if the task should be executed, false if not.
    eclipse.onlyIf {
       project.hasProperty('usingEclipse')
    }

    // #2nd approach - alternatively throw an StopExecutionException() like this
    eclipse.doFirst {
       if(!usingEclipse) {
          throw new StopExecutionException()
       }
    }
  #+END_SRC
* 构建
  存在以下四个任务：
  #+BEGIN_SRC groovy
    task task1 << {
      println 'compiling source'
    }

    task task2(dependsOn: task1) << {
      println 'compiling unit tests'
    }

    task task3(dependsOn: [task1, task2]) << {
      println 'running unit tests'
    }

    task task4(dependsOn: [task1, task3]) << {
      println 'building the distribution'
    }
  #+END_SRC

  编译执行上述任务：
  #+BEGIN_SRC bash
    C:\> gradle task4
  #+END_SRC

  输出应该为：
  #+BEGIN_EXAMPLE
    > Task :task1                    
    compiling source                 
                                 
    > Task :task2                    
    compiling unit tests             
                                 
    > Task :task3                    
    running unit tests               
                                 
    > Task :task4                    
    building the distribution        
  #+END_EXAMPLE

  排除任务一：
  #+BEGIN_SRC bash
    gradle task4 -x task1
  #+END_SRC

  输出为：
  #+BEGIN_EXAMPLE
    > Task :task2
    compiling unit tests

    > Task :task3
    running unit tests

    > Task :task4
    building the distribution
  #+END_EXAMPLE

* 依赖管理
  #+BEGIN_SRC groovy
    apply plugin: 'java'

    repositories {
      mavenCentral()
    }

    dependencies {
      compile group: 'org.hibernate', name: 'hibernate-core', version: '3.6.7.Final'
      // equal compile 'org.hibernate:hibernate-core:3.6.7.Final'
      testCompile group: 'junit', name: 'junit', version: '4.+'
    }
  #+END_SRC

  选项说明：
  + Complie :: 项目编译需要的依赖项
  + Runtime :: 项目运行需要的依赖项， 默认也包含 ~Complie~ 项
  + Test Complie :: 项目测试源编译需要的依赖项， 默认也包含 ~Complie~ 和编译生成的项
  + Test Runtime :: 项目测试运行时需要的依赖项， 包含 ~Runtime~ 和 ~Test Complie~ 项
                   
  存储库至少需要一个， 用于外部依赖项， 通过以下方式声明 ~maven~ 存储库：
  #+BEGIN_SRC groovy
    repositories {
       mavenCentral()
    }
  #+END_SRC

  定义远程库：
  #+BEGIN_SRC groovy
    repositories {
      maven {
        url "http://repo.mycompany.com/maven2"
      }
    }
  #+END_SRC

  *Publish*:
  #+BEGIN_SRC groovy
    apply plugin: 'maven'

    uploadArchives {
      repositories {
        mavenDeployer {
          repository(url: "file://localhost/tmp/myRepo/")
        }
      }
    }
  #+END_SRC

* 插件使用
  + [[https://www.tutorialspoint.com/gradle/gradle_plugins.htm][Gradle - Plugins]]
  + [[http://wiki.jikexueyuan.com/project/gradle/package.html][Gradle 插件]]

  应用插件：
  #+BEGIN_SRC groovy
    apply plugin: 'java'  
  #+END_SRC

  通过类型应用插件：
  #+BEGIN_SRC groovy
    apply plugin: org.gradle.api.plugins.JavaPlugin

    apply plugin: JavaPlugin
  #+END_SRC

  使用 id:
  #+BEGIN_SRC groovy
    plugins {
       id 'java'
    }
  #+END_SRC
* Gradle Wrapper
  Gradle Wrapper是开始一个Gradle构建的首选方式。 它包含了windows批处理以及OS X和Linux的Shell脚本。
  这些脚本允许我们在没有安装Gradle的系统上执行Gradle构建。

  使用指令 ~Gradle wrapper~ 初始化 ~Wrapper~ 环境。

  使用 ~gradlew~ 来代替 ~gradle~ 指令。
* 多项目构建
  在 ~root-project~ 所在目录添加 ~build.gradle~ 和 ~settings.gradle~.

  ~settings.gradle~ 中通过以下方式包含子项目：
  #+BEGIN_SRC groovy
    include 'sub-project1', 'sub-project2'
  #+END_SRC

  ~sub-project~ 是子项目文件夹名。

  在 ~build.gradle~ 通过以下方式配置应用于所有项目的配置：
  #+BEGIN_SRC groovy
    allprojects {
       apply plugin: 'idea'
  #+END_SRC

  通过以下方式配置应用于所有子项目的配置：
  #+BEGIN_SRC groovy
    subprojects {
      apply plugin: 'java'
    }
  #+END_SRC

  构建时， ~gradle~ 会自动寻找子项目中的 ~build.gradle~ 并执行构建。
* buildscript
  ~build.gradle~ 类似下面代码中的 ~buildscript~ 的作用是声明是 ~gradle~ 脚本自身需要使用的资源。

  #+BEGIN_SRC groovy
    buildScript {
      repositories {
        mavenCentral()
      }
    }

    repositories {
      mavenCentral()
    }
  #+END_SRC

