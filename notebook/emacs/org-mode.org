#+TITLE:      Org mode

* 目录                                                    :TOC_4_gh:noexport:
- [[#agenda-views][Agenda Views]]
- [[#dates-and-times][Dates and Times]]
- [[#markup-for-rich-contents][Markup for Rich Contents]]
- [[#refile--copy][Refile & copy]]
- [[#文学编程][文学编程]]
- [[#问题集][问题集]]
  - [[#如何将-org-capture-捕获的内容插入当前光标位置][如何将 org-capture 捕获的内容插入当前光标位置]]
  - [[#怎样在-org-table-中计算日期][怎样在 org-table 中计算日期]]
  - [[#怎样在-org-92-中使用旧的模板引擎][怎样在 Org 9.2 中使用旧的模板引擎]]
  - [[#怎样在导出-html-使用-css-样式高亮代码][怎样在导出 HTML 使用 CSS 样式高亮代码]]
  - [[#怎样对齐文件中的所有标签][怎样对齐文件中的所有标签]]

* Agenda Views
  + Agenda Views 默认会显示每个条目的 ~CATEGORY~ 属性，该属性可以通过快捷键 ~C-c C-x p~ 进行插入

  + Agenda Views 中可以通过快捷键 ~C-k~ 删除条目，也可以通过 ~B f org-agenda-kill~ 批量删除标记的条目

  + 在 Agenda Views 中可以通过快捷键 ~J~ 跳转到处于活动状态的条目

  + 通过设置 org-agenda-start-day 的方式修改 Agenda 视图的显示，周视图会显示 start-day 所在的那一周。

    参考问题：[[https://emacs.stackexchange.com/questions/13075/agenda-span-of-last-7-days][org mode - Agenda span of "last 7 days" - Emacs Stack Exchange]]

  + 设置距离 DEADLINE 还有几天时进行显示： ~DEADLINE -nd~

  + 可以通过快捷键 ~j~ 跳转到指定日期，方便的显示该日所在的周视图

* Dates and Times
  可以通过快捷键 ~C-c C-x C-r~ 插入 clock table 来进行时间统计，其中：
  + 通过用双引号包围的 tag 来过滤条目，不同的 tag 用 ~|~ 进行分隔：
     #+BEGIN_SRC org
       ,#+BEGIN: clocktable :tags "tag1|tag2"

       ,#+END:
     #+END_SRC

  + 通过 tstart 指定起始时间：
    #+BEGIN_SRC org
      ,#+BEGIN: clocktable :scope tree :maxlevel 1 :tstart "<2019-01-21>"
    #+END_SRC

  可以通过连续的 ~C-c .~ 创建时间段，而 ~C-c C-y~ 可以用于计算时间段的间隔

* Markup for Rich Contents
  Org-mode 中可以之间插入 latex 内容，行内公式可以通过 ~$~ 包围插入，而环境则可以通过 ~\begin~ 插入。

  可以参考：[[https://orgmode.org/manual/LaTeX-fragments.html#LaTeX-fragments][The Org Manual: LaTeX fragments]]

  特别的：
  + 插入公式时，环境 ~equation*~ 和 ~align*~ 是无编号的
  + Latex 的预览需要同时安装 latex 和 dvipng
    
  更多的 Latex 技巧可以参考：[[https://linux.cn/article-10269-1.html][技术|如何使用 Emacs 创建 LaTeX 文档]]

* Refile & copy
  使用 Org-Mode 时应该较为常见的使用常见是将一个 headline 移动到另一个 headline 下，这时，我们可以通过 refile 来完成这样工作。

  通过快捷键 ~C-c C-w~ 可以将选中的 ~headline~ 转接到 ~org-refile-targets~ 指定的目标中。

  参考：
  + [[https://orgmode.org/manual/Refile-and-copy.html#DOCF94][The Org Manual: Refile and copy]]

* 文学编程
  文学编程是一种很适合用来进行算法练习的编程模式，而 Org 提供了很多的功能来支持这样模式，可以参考：
  + [[https://github.com/lujun9972/emacs-document/blob/master/org-mode/%E6%96%87%E5%AD%A6%E7%BC%96%E7%A8%8B%E7%AE%80%E4%BB%8B.org][文学编程简介]]

  相关问题：
  + 参数 ~:noweb~ 和参数 ~:noweb-ref~ 的作用是什么？
    
    当代码块通过 ~#+NAME~ 或 ~:noweb-ref~ 指定名称后便可以在其他代码块中通过 ~<<name>>~ 的方式引用代码块，此时需要指定 ~:noweb~ 参数的值，
    保证在导出时引用的代码块被展开。

    参数 ~:noweb~ 的可选值有：
    |--------------+------------------------------------------------------|
    | 可选值       | 作用                                                 |
    |--------------+------------------------------------------------------|
    | ~no~           | 默认值，不展开引用代码块                             |
    | ~yes~          | 在执行、提取代码、导出时都展开代码块                 |
    | ~tangle~       | 仅在提取代码时展开代码块                             |
    | ~no-export~    | 除了导出以外的情况都展开代码块                       |
    | ~strip-export~ | 除了导出以外的情况都展开代码块，导出时移除代码块引用 |
    | ~eval~         | 仅在执行时展开代码块                                 |
    |--------------+------------------------------------------------------|

  + 代码块执行结果的默认类型是什么？

    对于 ~Functional mode~ 来说默认类型是 ~value~, 对于 ~Scripting mode~ 来说默认类型是 ~output~. 可以通过 ~results~ 来指定结果值。

  相关链接：
  + [[https://www.gnu.org/software/emacs/manual/html_node/org/Specific-header-arguments.html#Specific-header-arguments][Specific header arguments - The Org Manual]]
  
* 问题集
** 如何将 org-capture 捕获的内容插入当前光标位置
   #+BEGIN_QUOTE
   When called with a ‘C-0’ (zero) prefix, insert a template at point.
   #+END_QUOTE

   可以将其定义为方便使用的函数：
   #+BEGIN_SRC elisp
     (defun org-capture-at-point ()
       "Insert an org capture template at point."
       (interactive)
       (org-capture 0))
   #+END_SRC

** 怎样在 org-table 中计算日期
   直接用列进行加减就可以了，也可以用函数 ~now~ 表示当前的时间：
   #+BEGIN_EXAMPLE
    ,#+TBLFM: $5=($2 - now()); %dd
   #+END_EXAMPLE

** 怎样在 Org 9.2 中使用旧的模板引擎
   #+BEGIN_SRC elisp
     (require 'org-tempo)
   #+END_SRC

   + [[https://emacs.stackexchange.com/questions/46988/easy-templates-in-org-9-2][org mode - Easy Templates in Org 9.2 - Emacs Stack Exchange]]

** 怎样在导出 HTML 使用 CSS 样式高亮代码
   通过将 ~org-html-htmlize-output-type~ 设置为 ~css~ 来让导出的 ~HTML~ 中的代码部分使用 ~CSS~ 文件中的高亮样式。

** 怎样对齐文件中的所有标签
   通过快捷键 ~C-u C-c C-q~ 可以很方便的完成这一工作。

