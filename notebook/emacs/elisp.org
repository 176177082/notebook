#+TITLE:     Emacs Lisp

* 目录                                                    :TOC_4_gh:noexport:
- [[#lisp-data-types][Lisp Data Types]]
  - [[#alist--plist][alist & plist]]
  - [[#quote--backquote][Quote & Backquote]]
  - [[#cons][cons]]
  - [[#type-predicates][Type Predicates]]
- [[#loading][Loading]]
  - [[#autoload][autoload]]
- [[#major-and-minor-modes][Major and Minor Modes]]
  - [[#minor-mode][minor-mode]]
- [[#symbols][Symbols]]
- [[#macros][Macros]]
- [[#operating-system-interface][Operating System Interface]]
  - [[#timer][Timer]]
- [[#functions][Functions]]
  - [[#关键字参数][关键字参数]]
  - [[#interactive][interactive]]
  - [[#有用的函数][有用的函数]]
- [[#风格规范][风格规范]]
  - [[#package][Package]]
  - [[#命名风格][命名风格]]
- [[#问题集][问题集]]
  - [[#setq-和-setq-defautl-的区别][setq 和 setq-defautl 的区别]]
  - [[#let-和-let-的区别][let 和 let* 的区别]]
  - [[#以--开头的参数是怎么一回事][以 : 开头的参数是怎么一回事]]

* Lisp Data Types
** alist & plist
   alist 的常见的两种形式：
   #+BEGIN_SRC elisp
     '((a . 1) ("b" 2 3))
     '((rose red) (lily white) (buttercup yellow))
   #+END_SRC

   plist 常见的形式：
   #+BEGIN_SRC elisp
     (plist-get '(foo 4) 'foo)     ;; ⇒ 4
     (plist-get '(foo 4 bad) 'foo) ;; ⇒ 4
     (plist-get '(foo 4 bad) 'bad) ;; ⇒ nil
     (plist-get '(foo 4 bad) 'bar) ;; ⇒ nil
   #+END_SRC

   可见两者的本质是相同的：
   #+BEGIN_SRC elisp
     ELISP> (type-of '(foo 4))
     cons
     ELISP> (type-of '((foo 4)))
     cons
   #+END_SRC

   + [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html][Association Lists - GNU Emacs Lisp Reference Manual]]
   + [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Plist-Access.html#Plist-Access][Plist Access - GNU Emacs Lisp Reference Manual]]
   + [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Dotted-Pair-Notation.html][Dotted Pair Notation - GNU Emacs Lisp Reference Manual]]
** Quote & Backquote
   通过 quote 包裹的对象将不会执行，而是直接返回：
   #+BEGIN_SRC elisp
     '( a b c)  ; => (a b c)
   #+END_SRC

   反引号内部可以通过 ~,~ 和 ~,@~ 进行计算：
   #+BEGIN_SRC elisp
     `(1 2 ,(+ 3 4))  ; => (1 2 7)
     `(1 2 ,@(+ 3 4)) ; => (1 2 . 7)
   #+END_SRC

   + [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Quoting.html][Quoting - GNU Emacs Lisp Reference Manual]]
   + [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html#Backquote][Backquote - GNU Emacs Lisp Reference Manual]]

** cons
   任何非空的列表，都可以被视为一对由列表第一个元素及列表其余元素所组成的列表。

   Lisp 的惯例是使用 car 代表列表的第一个元素，而用 cdr 代表列表的其余的元素。

   + [[https://acl.readthedocs.io/en/latest/zhCN/ch3-cn.html#conses][第三章：列表 — ANSI Common Lisp 中文版]]

** Type Predicates
   通过函数 ~type-of~ 判断一个对象的类型：
   #+BEGIN_SRC elisp
     (type-of '(1 2 3))  ; => cons
   #+END_SRC

   + [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Type-Predicates.html][Type Predicates - GNU Emacs Lisp Reference Manual]]

* Loading
** autoload
   通过如下格式的注释声明某个函数为自动加载的：
   #+BEGIN_SRC elisp
     ;;;###autoload
     (defun doctor ()
       "Switch to *doctor* buffer and start giving psychotherapy."
       (interactive)
       (switch-to-buffer "*doctor*")
       (doctor-mode))
   #+END_SRC

* Major and Minor Modes
** minor-mode
   *概念：* ~Non-nil~ 指的是所有非 ~nil~ 的值，包括 ~0~ 和负数。

   *Minor Modes*:
   #+BEGIN_SRC elisp
     (minor-mode &optional ARG)
   #+END_SRC

   如果参数 ~ARG~ 存在，那么：
   + 如果 ~ARG~ 为正，就启用 ~minor-mode~
   + 其他情况就禁用 ~minor-mode~

   如果参数 ~ARG~ 不存在为 ~ARG~ 为 ~nil~, 也启动 ~minor-mode~.

   #+BEGIN_SRC elisp
     ;; enable
     (blink-cursor-mode)           ; Omitted argument
     (blink-cursor-mode 1)         ; Positive argument
     (blink-cursor-mode t)         ; True argument
     (blink-cursor-mode nil)       ; nil argument (don't use this)

     ;; disable
     (blink-cursor-mode 0)         ; Non-positive argument
     (blink-cursor-mode -1)        ; Negative argument
   #+END_SRC

* Symbols
  #+BEGIN_SRC elisp
    ;; 符号列表
    (setq lst '(symbolA symbolB symbolC))
    (symbolp (car lst))  ;; => t

    ;; 符号根据不同的使用场景，使用其代表的 值、函数、符号
    (symbol x x x)       ;; => 函数
    (+ symbolA symbolB)  ;; => 值
    'symbol              ;; => 符号
  #+END_SRC

* Macros
  宏是一种可以生成代码的代码。类比与 C 语言中的宏以及 C++中的模板：
  #+BEGIN_SRC elisp
    (defmacro inc (var)
      (list 'setq var (list '1+ var)))

    (setq my-var 1)
    (setq my-var (+ 1 my-var))

    (macroexpand '(inc my-var))
  #+END_SRC

  可以使用 macroexpand 获得宏展开的结果，以上代码结果为：
  #+BEGIN_SRC elisp
    (setq my-var (1+ my-var))
  #+END_SRC

  宏和函数的区别：
  + 宏的参数并不会被马上求值，解释器会先展开宏，宏展开之后解释器才会执行宏展开的结果
  + 宏的执行结果是一个表达式，该表达式会立即被解释器执行

* Operating System Interface
** Timer
   可以通过函数 run-with-timer 创建定时任务：
   #+BEGIN_SRC elisp
     (run-with-timer SECS REPEAT FUNCTION &rest ARGS)
   #+END_SRC

   参数含义：
   + SECS: 间隔多少秒执行 FUNCTION
   + REPEAT: 非空便重复执行

   可以通过函数 cancel-timer 取消一个 Timer:
   #+BEGIN_SRC elisp
     (cancel-timer TIMER)
   #+END_SRC

   TIMER 是由函数 run-with-timer 创建的。

* Functions
  两种形式的函数引用及展开后的形式：
  #+BEGIN_SRC elisp
    #'foo  ; => (function foo)
    'foo   ; => (quote foo)
  #+END_SRC

  + [[https://stackoverflow.com/questions/18390586/why-use-before-function-arguments-in-emacs-lisp?rq=1][Why use #' before function arguments in emacs-lisp? - Stack Overflow]]

** 关键字参数
   使用 cl-defun 可以更方便的定义带关键字参数的函数：
   #+BEGIN_SRC elisp
     (cl-defun func (&key foo bar))
   #+END_SRC

   + [[https://www.emacswiki.org/emacs/KeywordArguments][EmacsWiki: Keyword Arguments]]

** interactive
   ~Emacs~ 中存在 *两种函数*:
   1) 可以作为命令执行的函数
   2) 不能作为命令执行的普通函数

   如果要让定义的函数可以作为命令执行， 需要在函数中添加 ~interactive~:
   #+BEGIN_SRC emacs-lisp
     (defun hello-world ()
       (interactive)
       (insert "hello, world"))
   #+END_SRC

   同时可以在 ~interactive~ 中获取函数调用时需要的参数：
   #+BEGIN_SRC emacs-lisp
     (defun c-malloc (name value)
       (interactive
        (list (read-string "name")
              (read-string "value"))
        (insert (format "%s = %s" name value)))
   #+END_SRC

** 有用的函数
   + 获取 Emacs 已启动时间长度：
     #+BEGIN_SRC elisp
       (emacs-uptime)
     #+END_SRC

   + 消息摘要算法的支持
     #+BEGIN_SRC elisp
       (md5 "str")
       (secure-hash 'sha256 "123")
     #+END_SRC

     参考：[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Checksum_002fHash.html][Checksum/Hash - GNU Emacs Lisp Reference Manual]]

* 风格规范
** Package
   #+BEGIN_SRC elisp
     ;;; superfrobnicator.el --- Frobnicate and bifurcate flanges

     ;; Copyright (C) 2011 Free Software Foundation, Inc.

     ;; Author: J. R. Hacker <jrh@example.com>
     ;; Version: 1.3
     ;; Package-Requires: ((flange "1.0"))
     ;; Keywords: multimedia, frobnicate
     ;; URL: http://example.com/jrhacker/superfrobnicate

     ...

          ;;; Commentary:

     ;; This package provides a minor mode to frobnicate and/or
     ;; bifurcate any flanges you desire.  To activate it, just type
     ...

          ;;;###autoload
     (define-minor-mode superfrobnicator-mode
       ...
   #+END_SRC

   + [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Simple-Packages.html][Simple Packages - GNU Emacs Lisp Reference Manual]]

** 命名风格  
   #+BEGIN_SRC elisp
     ;; define custom variable
     (setq rgb-24bit/variable-name)

     ;; define mode
     (define-minor-mode name-mode)

     ;; define mode variable
     (setq name-mode-variable-name)
   #+END_SRC

   可以参考：[[https://github.com/bbatsov/emacs-lisp-style-guide][A community-driven Emacs Lisp style guide]]

* 问题集
** setq 和 setq-defautl 的区别
   Emacs 中有些变量是 buffer-local 的，通过 setq 设置 buffer-local 变量时，只会影响该缓冲区，而 setq-default 会设置全局的值。

   简单的说，就是：
   + setq：设置的值可能只影响当前缓冲区
   + setq-default：设置的值是全局的，影响所有的缓冲区

** let 和 let* 的区别
   ~let~ 的参数列表中，后序的参数不能使用前面定义的参数，而 ~let*~ 可以：
   #+BEGIN_SRC elisp
     ELISP> (let ((num 10) (n num)))
     ,*** Eval error ***  Symbol’s value as variable is void: num
     ELISP> (let* ((num 10) (n num)))
     nil
   #+END_SRC

** 以 : 开头的参数是怎么一回事
   Elisp 中以符号 *:* 开头的符号属于 *关键字*, 声明一个 *:xxx* 形式的变量会自动变为关键字：
   #+BEGIN_SRC elisp
     ELISP> (intern-soft ":key-1")
     nil
     ELISP> :key-1
     :key-1
     ELISP> (intern-soft ":key-1")
     :key-1
   #+END_SRC

   可以通 ~keywordp~ 判断一个符号是否是关键字：
   #+BEGIN_SRC elisp
     (keywordp :key-1)  ; => t
   #+END_SRC
