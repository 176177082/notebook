#+TITLE:      Emacs 使用笔记

* 目录                                                    :TOC_4_gh:noexport:
- [[#简单使用][简单使用]]
  - [[#文本编辑][文本编辑]]
  - [[#窗口操作][窗口操作]]
  - [[#查看帮助][查看帮助]]
  - [[#自定义快捷键][自定义快捷键]]
- [[#使用技巧][使用技巧]]
  - [[#批量修改文件名称][批量修改文件名称]]
  - [[#录制键盘宏][录制键盘宏]]
  - [[#版本控制-vc][版本控制 VC]]
  - [[#undotree][undotree]]
  - [[#重复操作][重复操作]]
  - [[#实用指令][实用指令]]
  - [[#性能监控][性能监控]]
  - [[#矩形编辑][矩形编辑]]
  - [[#保存-scratch-缓冲区的代码][保存 scratch 缓冲区的代码]]
- [[#概念问题][概念问题]]
  - [[#前缀参数][前缀参数]]
  - [[#编码问题][编码问题]]
  - [[#emacs-server][emacs server]]
  - [[#字体与字体集][字体与字体集]]
- [[#休闲娱乐][休闲娱乐]]

* 简单使用
** 文本编辑
   + 使用快捷键 ~C-q~ 转义下一个将要输入的字符，通过 ~C-q C-l~ 可以输入分页符
   + 使用快捷键 ~C-x 8~ 选择输入特殊字符，也可以通过 ~C-x 8 <key>~ 的方式输入对应的特殊字符
   + 通过快捷键 ~C-x RET C-\ Tex RET~ 可以开启输入 ~Tex~ 字符的环境
   + 通过快捷键 ~C-g C-g~ 跳转到指定行

** 窗口操作
   窗口大小的调整：
   + 快捷键 ~C-x ^~ 扩大当前窗口高度
   + 快捷键 ~C-x }~ 扩大当前窗口宽度
   + 快捷键 ~C-x {~ 缩减当前窗口宽度
   + 快捷键 ~C-x -~ 缩小窗口以适应内容
   + 快捷键 ~C-x +~ 使所有窗口等宽等高

** 查看帮助
   + 快捷键 ~C-h C-h~ 查看关于帮助的帮助
   + 快捷键 ~C-h r~ 在 Emacs 类阅读 Emacs manual
   + 快捷键 ~C-h l~ 查看最近输入了什么按键以及对应的命令

** 自定义快捷键
   通过函数 ~global-set-key~ 来设置全局的快捷键：
   #+BEGIN_SRC elisp
     (global-set-key (kbd "C-x C-\\") 'next-line)
     (global-set-key "\C-x\C-\\" 'next-line)
   #+END_SRC

   如果 ~C-x~ 已经是快捷键节，就需要先通过函数 ~global-unset-key~ 取消设置：
   #+BEGIN_SRC elisp
     (global-unset-key "\C-x")
   #+END_SRC

   通过 ~local-set-key~ 和 ~local-unset-key~ 设置指定模式下的快捷键。

   缓冲区本地快捷键可以参考： [[https://www.emacswiki.org/emacs/BufferLocalKeys][EmacsWiki: Buffer Local Keys]]

* 使用技巧
** 批量修改文件名称
   通过 ~dired-mode~ 的编辑模式完成这一工作：
   1. 通过快捷键 ~C-x C-q~ 进入编辑模式
   2. 通过文本编辑方式批量修改文件名称
   3. 使用快捷键 ~C-c C-c~ 保存修改

** 录制键盘宏
   通过快捷键 ~F3~ 开始录制宏，快捷键 ~F4~ 结束录制，结束录制后通过快捷键 ~F4~ 进行使用。

   可以通过快捷键 ~C-x C-k n~ 为最近使用的宏命名，然后使用 ~insert-kbd-macro~ 将宏转换为 ~Lisp~ 代码。

** 版本控制 VC 
   通过命令 ~vc-version-diff~ 进行版本对比。

** undotree
   ~Emacs~ 默认的撤销快捷键为 ~C-/~, 而撤销撤销为 ~C-g C-/~.
   
   但是很多的配置中都使用了 ~undo-tree.el~ 这个扩展，修改了撤销的快捷键。

   ~undo-tree.el~ 定义的撤销快捷键为 ~C-/~, 而撤销撤销为 ~C-?~.

** 重复操作
   通过 ~C-x z~ 重复上一次执行的指令，连续重复执行 ~C-x z z z...~ 就可以了。

** 实用指令
   + ~erase-buffer~ - 清空当前缓冲区

** 性能监控
   通过指令 ~profiler-start~ 启动性能监控，通过指令 ~profiler-report~ 显示监控结果。

** 矩形编辑
   矩形编辑中常用的一些快捷键：
   |------------------------------------------------+----------------------------|
   | 快捷键                                         | 作用                       |
   |------------------------------------------------+----------------------------|
   | C-x r k                                        | 剪切矩形区域的内容         |
   | C-x r M-w                                      | 复制矩形区域的内容         |
   | C-x r d                                        | 删除矩形区域的内容         |
   | C-x r y                                        | 粘贴复制的矩形区域         |
   | C-x r N                                        | 在矩形边缘插入行号         |
   | M-x string-insert-rectangle <RET> string <RET> | 在矩形的每一行上插入字符串 |
   |------------------------------------------------+----------------------------|

   + [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html][Rectangles - GNU Emacs Manual]]

** 保存 scratch 缓冲区的代码
   #+BEGIN_SRC elisp
     (setq initial-scratch-message "")

     (setq initial-buffer-choice
           '(lambda ()
              (let ((buf (get-buffer-create "*scratch*"))
                    (file "~/.emacs.d/scratch.el"))
                (with-current-buffer buf
                  (insert-file-contents file)
                  (local-set-key
                   "\C-x\C-s"
                   '(lambda ()
                      (interactive)
                      (let ((str (buffer-string)))
                        (with-current-buffer
                            (find-file "~/.emacs.d/scratch.el")
                          (erase-buffer)   (insert str)
                          (save-buffer)    (kill-buffer)
                          )))))
                buf)))
   #+END_SRC

* 概念问题
** 前缀参数
   可以通过 ~C-u~ 指定或指示需要输入前缀参数，比如在 ~org-mode~ 中创建脚注的时候，是可以指定前缀参数的：
   + [[https://orgmode.org/manual/Footnotes.html][The Org Manual: Footnotes]]

   指示需要前缀参数的使用方式：
   #+BEGIN_EXAMPLE
   C-u C-c C-x f
   #+END_EXAMPLE

** 编码问题
   Emacs 中根据换行符的样式将同一种编码分为 ~unix~, ~dos~, ~mac~ 三类，可以参考：
   + [[http://ergoemacs.org/emacs/emacs_line_ending_char.html][Emacs: Newline Representation ^M ^J ^L]]
   + [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Coding-Systems.html#Coding-Systems][Coding Systems - GNU Emacs Manual]]

   另外，这是 Spacemacs 中的 mode-line 显示编码的方式：
   #+BEGIN_SRC elisp
     (defun buffer-encoding-abbrev ()
       "The line ending convention used in the buffer."
       (let ((buf-coding (format "%s" buffer-file-coding-system)))
         (if (string-match "\\(dos\\|unix\\|mac\\)" buf-coding)
             (match-string 1 buf-coding)
           buf-coding)))
   #+END_SRC  

** emacs server
   在 Windows 系统上可以通过 ~runemacs --daemon~ 的方式启动 ~emacs server~, 通过 ~emacsclient~ 连接服务器。

   关闭服务器可以通过如下方式：
   #+BEGIN_SRC bash
     $ emacsclient -e "(kill-emacs)"
   #+END_SRC

   参考：[[https://www.emacswiki.org/emacs/EmacsAsDaemon][EmacsWiki: Emacs As Daemon]]

** 字体与字体集
   + [[https://idiocy.org/emacs-fonts-and-fontsets.html][Emacs, fonts and fontsets]]

* 休闲娱乐
  + [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Amusements.html][Games and Other Amusements]]

