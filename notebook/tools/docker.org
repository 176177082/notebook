#+TITLE:      Docker

* 目录                                                    :TOC_4_gh:noexport:
- [[#docker-架构][Docker 架构]]
- [[#linux-unionfs][Linux UnionFS]]
- [[#数据卷][数据卷]]
- [[#网络][网络]]
- [[#oci--cri][OCI & CRI]]
- [[#常用容器][常用容器]]
  - [[#mysql][mysql]]
  - [[#redis][redis]]
  - [[#mongodb][mongodb]]
  - [[#elasticsearch][elasticsearch]]
- [[#相关问题][相关问题]]
  - [[#怎样配置-docker-的镜像加速器][怎样配置 Docker 的镜像加速器]]
  - [[#停止或移除所有-containers][停止或移除所有 Containers]]
- [[#相关资源][相关资源]]

* Docker 架构
  Docker 使用客户端 - 服务器架构模式，使用远程 API 来管理和创建 Docker 容器。

  Docker 容器通过 Docker 镜像来创建。容器与镜像的关系类似于面向对象编程中的对象与类。

  需要注意的是，当我们通过 docker 命令进行操作时，其实是通过 docker 命令发出相应的请求给运行的 Docker 主机，
  所有的操作都是有 Docker 主机完成的。

* Linux UnionFS
  因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 Union FS 的技术，将其设计为分层存储的架构。
  
  所以严格来说，Docker 镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。

  镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，
  而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。

  因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。

  参考链接：
  + [[https://www.jianshu.com/p/e3a4b69f649c][Docker 镜像分层存储与镜像精简 - 简书]]
  + [[https://coolshell.cn/articles/17061.html][Docker 基础技术：AUFS | | 酷 壳 - CoolShell]]

* 数据卷
  数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：
  + 数据卷可以在容器之间共享和重用
  + 对数据卷的修改会立马生效
  + 对数据卷的更新，不会影响镜像
  + 数据卷默认会一直存在，即使容器被删除

  数据卷命令：
  #+begin_src sh
    $ docker volume create my-vol   # create volume
    $ docker volume ls
    $ docker volume inspect my-vol  # info
    $ docker run -d -P --name web --mount source=my-vol,target=/usr/share/nginx/html nginx:alpine  # mount to container
    $ docker volume rm my-vol
    $ docker volume prune
  #+end_src

  也可以挂载本地/目录：
  #+begin_src sh
    docker run -d -P --name web --mount type=bind,source=/src/webapp,target=/usr/share/nginx/html nginx:alpine
  #+end_src

* 网络
  创建容器时可以通过 -p 参数来指定端口映射关系，通常使用的格式为 hostPort:containerPort。而对于多个容器，
  还可以通过创建 docker 网络来实现它们的互联。

  创建网络：
  #+begin_example
    $ docker network create -d bridge example
  #+end_example

  创建容器时加入网络：
  #+begin_example
    $ docker run --name busybox --network example -d busybox
  #+end_example

* OCI & CRI
  前段时间通过 [[https://www.infoq.cn/article/47HcIxefRy1cETbZuGWd][Kubernetes 弃用 Docker 后怎么办？-InfoQ]] 这篇文章了解到 k8s 和 docker 之间并不是强绑定的，同时，Docker 也并不是容器的唯一实现。

  对于容器来说，Docker 只是 [[https://opencontainers.org/][OCI(Open Container Initiative)]] 的一种实现，除了 Docker 以外，还有如：
  + [[https://github.com/cri-o/cri-o][cri-o/cri-o: Open Container Initiative-based implementation of Kubernetes Container Runtime Interface]]
  + [[https://github.com/containerd/containerd][containerd/containerd: An open and reliable container runtime]]

  对于 k8s 来说，则可以通过 CRI(Kubernetes Container Runtime Interface) 来控制编排容器。

  由于 Docker 并没有标准的 CRI 实现，现在是通过 dockershim 来间接实现的，因此，为了更符合 k8s 的发展策略，k8s 弃用了 Docker。

  参考：
  + [[https://developer.ibm.com/technologies/containers/blogs/kube-cri-overview/][An overview of the Kubernetes Container Runtime Interface (CRI) – IBM Developer]]
  + [[https://www.infoq.cn/article/47HcIxefRy1cETbZuGWd][Kubernetes 弃用 Docker 后怎么办？-InfoQ]]

* 常用容器
** mysql
   创建 MySQL 容器，使用 5.7 镜像：
   #+begin_src bash
     docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=yourpassword -d mysql:5.7 --max-allowed-packet=67108864
   #+end_src

   进入容器：
   #+begin_src bash
     docker exec -it mysql bash
   #+end_src

** redis
   创建 redis 容器，使用最新镜像：
   #+begin_src bash
     docker run --name redis -p 6379:6379 -d redis
   #+end_src

   进入容器：
   #+begin_src bash
     docker exec -it redis bash
   #+end_src

** mongodb
   创建 MongoDB 容器，使用最新镜像：
   #+begin_src bash
     docker run --name mongo -p 27017:27017 -d mongo --auth
   #+end_src
   
   进入容器：
   #+begin_src bash
     docker exec -it mongo mongo admin
   #+end_src
   
** elasticsearch
   创建 elasticsearch 容器：
   #+begin_src bash
     docker run --name es -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:6.4.3
   #+end_src

   进入容器：
   #+begin_src bash
     docker exec -it es bash
   #+end_src

   必要的配置：
   #+begin_src bash
     # grep vm.max_map_count /etc/sysctl.conf
     sysctl -w vm.max_map_count=262144
   #+end_src

* 相关问题
** 怎样配置 Docker 的镜像加速器
   国内无需账号密码即可使用的 Docker 镜像加速器：
   #+begin_src json
     {
       "registry-mirrors": [
         "https://hub-mirror.c.163.com",
         "https://mirror.baidubce.com"
       ]
     }
   #+end_src

   保存配置后重启服务就可以了。

** 停止或移除所有 Containers
   #+begin_src sh
     docker stop $(docker ps -a -q)
     docker rm $(docker ps -a -q)
   #+end_src
   
* 相关资源
  + [[https://yeasy.gitbook.io/docker_practice/][Docker —— 从入门到实践]]

