#+TITLE:      命令行工具

* 目录                                                    :TOC_4_gh:noexport:
- [[#curl][curl]]
- [[#fping][fping]]
- [[#ffmpeg][ffmpeg]]
- [[#nc][nc]]
- [[#search][search]]
- [[#figlet][FIGlet]]
- [[#shred][shred]]

* curl
  curl 的常用选项如下：
  #+BEGIN_EXAMPLE
    -o,             保存网页内容到文件
    -L,             自动跳转
    -i,             显示响应头信息及网页代码
    -I,             只显示响应头信息
    -v,             显示整个 http 通信过程
    --trace,        显示比 -v 选项更详细的通信过程
    --trace-ascii,  将 --trace 的输出保存到文件
    -X,             指定使用的请求方法
    -d, --data,     指定要发送的数据
    --user-agent,   指定 User Agent
    --cookie,       发送 cookie
    -H, --header，  增加头信息
  #+END_EXAMPLE

  使用实例：
  + 查看网页源码
    #+BEGIN_SRC bash
      $ curl www.sina.com
    #+END_SRC
  + 自动跳转
    #+BEGIN_SRC bash
      $ curl -L www.sina.com
    #+END_SRC
  + 显示头信息
    #+BEGIN_SRC bash
      $ curl -i www.sina.com
    #+END_SRC
  + 显示通信过程
    #+BEGIN_SRC bash
      $ curl -v www.sina.com
    #+END_SRC
  + HTTP动词
    #+BEGIN_SRC bash
      $ curl -X POST www.example.com
    #+END_SRC
  + User Agent字段
    #+BEGIN_SRC bash
      $ curl --user-agent "[User Agent]" [URL]
    #+END_SRC
  + cookie
    #+BEGIN_SRC bash
      $ curl --cookie "name=xxx" www.example.com
    #+END_SRC
  + 增加头信息
    #+BEGIN_SRC bash
      $ curl -H "Content-Type:application/json" http://example.com
    #+END_SRC
  + 自己当前的公网 IP
    #+begin_src sh
      $ curl cip.cc
    #+end_src

  参考：
  + [[https://www.ruanyifeng.com/blog/2019/09/curl-reference.html][curl 的用法指南 - 阮一峰的网络日志]]
    
* fping
  Fping 相较于 ping 命令可以同时 ping 多个目标 IP 地址，甚至可以将要测试的 IP 地址保存到文件中作为标准输入。

  #+begin_src bash
    $ fping < ip.txt
  #+end_src

  参考：
  + [[https://www.howtoing.com/ping-multiple-linux-hosts-using-fping][Fping - Linux 的高性能 Ping 工具]]

* ffmpeg
  FFmpeg 是一款非常快速的视频和音频转换器, 是开源项目 FFmpeg (Fast Forward moving pictures expert group) 的命令行程序。它可以在任意采样率之间转换，
  并通过高质量的多相滤波器实时调整视频大小。

  FFmpeg 程序的转码流程：
  #+begin_example
    _______              ______________
    |       |            |              |
    | input |  demuxer   | encoded data |   decoder
    | file  | ---------> | packets      | -----+
    |_______|            |______________|      |
                                               v
                                           _________
                                          |         |
                                          | decoded |
                                          | frames  |
                                          |_________|
     ________             ______________       |
    |        |           |              |      |
    | output | <-------- | encoded data | <----+
    | file   |   muxer   | packets      |   encoder
    |________|           |______________|
 
 
    其中, demuxer 为解复用器, muxer 为复用器; decoder 为解码器, encoder 为编码器
  #+end_example

  参考：
  + [[https://www.cnblogs.com/chenpingzhao/p/10758820.html][关于 ffmpeg 的一些常见用法 - 踏雪无痕SS - 博客园]]
  + [[https://github.com/skywind3000/awesome-cheatsheets/blob/master/tools/ffmpeg.sh][awesome-cheatsheets/ffmpeg.sh at master · skywind3000/awesome-cheatsheets]]

  使用：
  #+begin_src bash
    # 转换 flv 文件为 MP3
    ffmpeg -i input.flv -q:a 5 out.mp3
  #+end_src

* nc
  NetCat，在网络工具中有 “瑞士军刀” 美誉，其有 Windows 和 Linux 的版本。因为它短小精悍、功能实用，被设计为一个简单、可靠的网络工具，可通过 TCP 或 UDP 协议传输读写数据。同时，它还是一个网络应用 Debug 分析器，
  因为它可以根据需要创建各种不同类型的网络连接。

  可以通过 ~-l~ 选项监听某个端口：
  #+begin_src sh
    $ nc -l port
  #+end_src

  可以通过重定向标准输入输出的方式传输信息：
  #+begin_src sh
    $ nc -l port > file
    $ cat file | nc host port
  #+end_src
  
* search
  在使用 Emacs 的过程中了解到有很多强大的外部搜索工具，对于文件来说 ~fd~ 通常就是一个很好的选择，
  而文本则可以使用 ~rg~ 来搜索。

  更多的可以参考：
  + [[https://github.com/syl20bnr/spacemacs/blob/develop/doc/DOCUMENTATION.org#searching][Searching - With an external tool]]

* FIGlet
  可以通过 FIGlet 生成字符画。


* shred
  通常，删除文件时，磁盘的该部分被标记为已准备好将另一个文件写入其中，但数据仍然存在。如果第三方要获得对磁盘的物理访问权限，
  他们可以使用高级技术访问您认为已删除的数据。

  shred 以数字方式完成此类破坏的方式是覆盖要销毁的数据，将其替换为其他（通常是随机的）数据。
  这会磁性破坏磁盘上的数据，并且很难恢复它。

  比如：
  #+begin_src sh
    shred file1.txt file2.jpg file3.doc
  #+end_src

