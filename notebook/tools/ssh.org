#+TITLE:      SSH

* 目录                                                    :TOC_4_gh:noexport:
- [[#简单使用][简单使用]]
- [[#文件传输][文件传输]]
- [[#git-ssh-私钥][git ssh 私钥]]
- [[#gssapi][GSSAPI]]
- [[#相关问题][相关问题]]
  - [[#连接后长时间未使用终端-hang-住怎么办][连接后长时间未使用终端 hang 住怎么办？]]

* 简单使用
  使用用户名和密码登录：
  #+BEGIN_SRC bash
    $ ssh user@host
  #+END_SRC

  指定端口号，默认为 22:
  #+BEGIN_SRC bash
    $ ssh -p 2222 user@host
  #+END_SRC

  第一次登录时会出现如下提示：
  #+BEGIN_EXAMPLE
    The authenticity of host 'host (12.18.429.21)' can't be established.

    RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.

    Are you sure you want to continue connecting (yes/no)?
  #+END_EXAMPLE

  使用公钥登录，其中公钥放在服务器，自己用私钥文件：
  #+BEGIN_SRC bash
    $ ssh -i file user@host
  #+END_SRC

  教程：
  + [[https://wangdoc.com/ssh/index.html][SSH 教程 - 网道]]

* 文件传输
  1. 从服务器上下载文件
     #+BEGIN_EXAMPLE
       scp user@host:/path/filename /path/local
     #+END_EXAMPLE

  2. 上传本地文件到服务器
     #+BEGIN_EXAMPLE
       scp /path/filename user@host:/path/remote
     #+END_EXAMPLE

  3. 从服务器下载整个目录
     #+BEGIN_EXAMPLE
       scp -r user@host:/path/remote_dir/ /path/local_dir
     #+END_EXAMPLE

  4. 上传目录到服务器
     #+BEGIN_EXAMPLE
       scp -r local_dir user@host:/path/remote_dir
     #+END_EXAMPLE

  可以使用 ~-i~ 参数指定 *私钥文件*.

* git ssh 私钥
  git ssh 私钥不能像除自己以外的用户共享，因此需要执行：
  #+BEGIN_EXAMPLE
    $ chome go=---
  #+END_EXAMPLE

* GSSAPI
  建立 SSH 连接时如果开启了 GSSAPI 认证会消耗较多的时间，因此，如果不需要使用 GSSAPI 的话可以关掉该配置：
  #+begin_src conf
    Host *
      GSSAPIAuthentication no
  #+end_src

  配置文件路径为：
  + 服务端 - ~/etc/ssh/sshd_config~
  + 客户端 - ~/etc/ssh/ssh_config~

  参考：
  + [[https://jaminzhang.github.io/linux/GSSAPI-related-options-in-ssh-configuration/][SSH 中的 GSSAPI 相关选项 - Jamin Zhang]]

* 相关问题
** 连接后长时间未使用终端 hang 住怎么办？
   通过 ssh 连接后所在环境是 ssh，而非 bash，需要通过 ssh 指令来断开连接：
   #+begin_quote
     ESCAPE CHARACTERS
          When a pseudo-terminal has been requested, ssh supports a number of func-
          tions through the use of an escape character.
     
          A single tilde character can be sent as ~~ or by following the tilde by a
          character other than those described below.  The escape character must
          always follow a newline to be interpreted as special.  The escape charac-
          ter can be changed in configuration files using the EscapeChar configura-
          tion directive or on the command line by the -e option.
     
          The supported escapes (assuming the default `~') are:
     
          ~.      Disconnect.
     
          ~^Z     Background ssh.
     
          ~#      List forwarded connections.
     
          ~&      Background ssh at logout when waiting for forwarded connection /
                  X11 sessions to terminate.
     
          ~?      Display a list of escape characters.
     
          ~B      Send a BREAK to the remote system (only useful if the peer sup-
                  ports it).
     
          ~C      Open command line.  Currently this allows the addition of port
                  forwardings using the -L, -R and -D options (see above).  It also
                  allows the cancellation of existing port-forwardings with
                  -KL[bind_address:]port for local, -KR[bind_address:]port for
                  remote and -KD[bind_address:]port for dynamic port-forwardings.
                  !command allows the user to execute a local command if the
                  PermitLocalCommand option is enabled in ssh_config(5).  Basic
                  help is available, using the -h option.
     
          ~R      Request rekeying of the connection (only useful if the peer sup-
                  ports it).
     
          ~V      Decrease the verbosity (LogLevel) when errors are being written
                  to stderr.
     
          ~v      Increase the verbosity (LogLevel) when errors are being written
                  to stderr.t    
   #+end_quote

   但是感觉没有生效……不知道是不是姿势不对 QAQ

