#+TITLE:      HTTPS

* 目录                                                    :TOC_4_gh:noexport:
- [[#ssl-和-tls-协议][SSL 和 TLS 协议]]
- [[#数字证书和数字签名][数字证书和数字签名]]
  - [[#生成方式][生成方式]]
  - [[#信任问题][信任问题]]
  - [[#参考链接][参考链接]]

* SSL 和 TLS 协议
  + [[https://www.ruanyifeng.com/blog/2014/02/ssl_tls.html][SSL/TLS 协议运行机制的概述 - 阮一峰的网络日志]]

* 数字证书和数字签名
  数字证书和数字签名的生成其实并不复杂，理解这两者中最复杂的反而是其中的信任问题，因此，在了解学习这两个东西的过程中，
  可以考虑将生成方式和信任问题分开来进行理解。

** 生成方式
   数字签名的生成是很简单的，需要进行数字签名时，先通过 Hash 计算得到需要发送的信息的摘要，然后通过自己的私钥对摘要进行加密，得到的便是数字签名了。

   即：通过 *私钥* 对 *信息摘要* 进行加密后得到的便是 *数字签名*

   数字证书的生成同样很简单，需要生成数字证书时，签发机构通过自己的私钥对一些必要的基本信息进行加密（比如申请者的公钥），得到的结果就是数字证书了。

   即：通过签发机构的 *私钥* 对申请者的 *公钥* 和其他信息加密后得到的便是 *数字证书*

   然后，申请者在发送信息的时候便可以带上数字证书证明自己的身份，带上数字签名证明信息没有被篡改。

** 信任问题
   数字签名用来证明信息内容的完整性，已经，信息没有被篡改，这依赖于 Hash 算法，但是 Hash 算法只能保证信息时完整的，不能保证信息没有被篡改。

   因此，需要通过私钥对信息的摘要进行加密，这样一来，即使中间人能够拿到信息，也不能生成可以被公钥界面的数字签名。但是，如果接收者拿到的公钥也是假的呢？

   于是乎，数字证书出现了，通过受信任的第三方机构的公钥和该机构签发的数字证书，我们能够保证，只要拿到的数字证书时没有问题的，那么，解密数字证书得到的公钥就没有问题，
   那么，通过解密得到的公钥效验数字签名就没有问题了。

   说到底，就是一个信任链的问题，我信任数字证书的签发机构，签发机构信任信息的发送者，于是，我也信任信息的发送者。

** 参考链接
   + [[https://www.zhihu.com/question/47232448][怎么保证「CA 的公钥」是真实的？ - 知乎]]
   + [[http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html][数字签名是什么？ - 阮一峰的网络日志]]
   + [[https://rootdeep.github.io/posts/ssl/#%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6][理解数字证书及制作过程]]
   
