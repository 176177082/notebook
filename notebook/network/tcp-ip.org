#+TITLE:      TCP/IP 相关

* 目录                                                    :TOC_4_gh:noexport:
- [[#tcp-流量控制和拥塞控制][TCP 流量控制和拥塞控制]]
- [[#相关问题][相关问题]]
  - [[#tcp-面向连接和-udp-无连接的理解][TCP 面向连接和 UDP 无连接的理解]]

* TCP 流量控制和拥塞控制
  TCP 中为了尽可能的利用信道的传输能力，会一次性发送多个数据报等待对方确认，但是这样做存在两个问题：
  1. 接收方的接收窗口未必能一次性接收这么多数据
  2. 网络的带宽也不一定足够大，容易出现丢包事故

  为了解决这两个问题，TCP 便通过 *滑动窗口* 和 *拥塞控制* 来确定发送窗口的大小，其中：
  + 滑动窗口通过接收方的确认数据包中指定的窗口大小来确定发送窗口大小
  + 拥塞控制通过拥塞控制算法来确定发送窗口的大小
    
  因此，发送窗口的大小取滑动窗口和拥塞控制两者确定的最小值。

  滑动窗口机制中窗口大小由接受方给出，较为直接，相对复杂的是滑动窗口中的数据重传机制，分为两种情况：
  1. 确认应答包丢失，这时，由于存在滑动窗口，只要发送方接受到了后续的确认应答包，那么，也就不需要重传
  2. 发送数据包丢失，这时，虽然发送方还是在不断的发送数据，但是，接受方发现之前的数据报一直没来时，就会一直重发对应的确认应答包，
     这时，当发送方发现重复次数达到 3 时就会重复数据包

  这也被称为连续 ARQ 协议，但是，当没有使用滑动窗口时，便需要使用停止等待 ARQ 协议，基本原理就是每发完一个分组就停止发送，等待对方确认。如果过了一段时间，
  还是没有收到 ACK 确认，说明没有发送成功，需要重新发送，直到收到确认后再发下一个分组。

  在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认，这时为了保证出现差错时不出现问题：
  + 确认丢失：确认消息在传输过程丢失。当 A 发送 M1 消息，B 收到后，B 向 A 发送了一个 M1 确认消息，但却在传输过程中丢失。而 A 并不知道，在超时计时过后，A 重传 M1 消息，
    B 再次收到该消息后采取以下两点措施：
    1. 丢弃这个重复的 M1 消息，不向上层交付
    2. 向 A 发送确认消息（不会认为已经发送过了，就不再发送。A 能重传，就证明 B 的确认消息丢失）
  + 确认迟到：确认消息在传输过程中迟到。A 发送 M1 消息，B 收到并发送确认。在超时时间内没有收到确认消息，A 重传 M1 消息，B 仍然收到并继续发送确认消息（B 收到了 2 份 M1）。
    此时 A 收到了 B 第二次发送的确认消息。接着发送其他数据。过了一会，A 收到了 B 第一次发送的对 M1 的确认消息（A 也收到了 2 份确认消息）。处理如下：
    1. A 收到重复的确认后，直接丢弃
    2. B 收到重复的 M1 后，也直接丢弃重复的 M1

  然后是拥塞控制，主要是四个算法：
  1. 慢开始算法，刚建立连接时将拥塞窗口设为 1 个 MSS 大小，每收到一个对新的报文段的确认后，将拥塞窗口增加至多一个 MSS 的数值，这个阶段窗口大小是指数增长的
  2. 拥塞避免算法，因为拥塞窗口是指数增长的，为防止后期增长过快，需要另外一个变量 - 慢开始门限 ssthres，当 cwind == ssthress 时，要预防拥塞的产生，开始执行拥塞避免算法，
     cwnd 按线性规律增长，一个 RTT 增长 1
  3. 快重传算法，就是使用滑动窗口时，一连收到三个重复的 ACK 即可断定有分组丢失了，就应立即重传丢失的报文段而不必继续等待为该报文段设置的重传计时器的超时
  4. 快恢复算法，当发送方连续收到三个重复确认时，就执行乘法减小算法，把慢开始门限减半，预防网络发生拥塞，同时把 cwnd 值设置为慢开始门限减半后的值，
     然后开始执行拥塞避免算法，是拥塞窗口的线性增大

  旧的拥塞控制中，没有使用快重传和快恢复算法时，当网络发生拥塞（即没有在 TTL 时间内接收到确认数据报，确认超时），就把 ssthresh 值更新为拥塞前 cwind 值的一半，
  cwnd 重新设置为 1，从新执行慢开始算法。

  参考：
  + [[https://segmentfault.com/a/1190000011641120][TCP 流量控制和拥塞控制 - 个人文章 - SegmentFault 思否]]
  + [[https://www.cnblogs.com/iou123lg/p/9017044.html][TCP 流量控制和拥塞控制 - lingjiango - 博客园]]
  + [[http://c.biancheng.net/view/6427.html][TCP 滑动窗口机制深度剖析]]

* 相关问题
** TCP 面向连接和 UDP 无连接的理解
   都说 TCP 是面向连接的协议而 UDP 是无连接的，那么，什么是连接呢？没能在网上找到合适的答案，只能给一个能够说服自己的。

   通过 TCP 协议传输数据的两方，在开始传输数据之前需要通过 *三次握手* 的过程来交换彼此之间的一些配置信息，同时会通过一系列的措施来保证数据传输的可靠型。

   但是对于 UDP 来说，传输数据只需要知道目标 IP 和端口号就行了，不需要通过复杂的流程来保证数据传输的可靠性。

   因此，个人理解：连接就是通过一些措施来保证通信的双方能够知晓对方的状况，而无连接，就是不需要知晓对方的状况就可以直接发送数据的方式。

