#+TITLE:      远程过程调用

* 目录                                                    :TOC_4_gh:noexport:
- [[#概览][概览]]
- [[#finagle][Finagle]]
- [[#thrift][Thrift]]
  - [[#使用不规范导致的-bug-记录][使用不规范导致的 BUG 记录]]
- [[#相关链接][相关链接]]

* 概览
  RPC 是远程过程调用（Remote Procedure Call）的缩写形式，Birrell 和 Nelson 在 1984 发表于 ACM Transactions on Computer Systems 的论文《Implementing remote procedure calls》对 RPC 做了经典的诠释。

  RPC 是指计算机 A 上的进程，调用另外一台计算机 B 上的进程，其中 A 上的调用进程被挂起，而 B 上的被调用进程开始执行，当值返回给 A 时，A 进程继续执行。调用方可以通过使用参数将信息传送给被调用方，而后可以通过传回的结果得到信息。
  而这一过程，对于开发人员来说是透明的。  

  远程过程调用采用客户机/服务器(C/S)模式。请求程序就是一个客户机，而服务提供程序就是一台服务器。和常规或本地过程调用一样，远程过程调用是同步操作，在远程过程结果返回之前，需要暂时中止请求程序。
  使用相同地址空间的低权进程或低权线程允许同时运行多个远程过程调用。

* Finagle
  对于 RPC 框架来说，通常需要提供 Server/Client SDK 来完成通信和调用，具体的协议可能不同。

  其中，Finagle 是协议无关的 RPC 框架，可以搭配多种协议和语言，支持编译得到多种语言的 Server/Client SDK。

  参考：
  + [[http://skaka.me/blog/2016/05/02/finagle3/][微服务框架 Finagle 介绍 Part3: 在 Finagle 中开发基于 Thrift 协议的应用 - skaka的博客]]
  + [[https://www.infoq.cn/article/2014/05/twitter-finagle-intro][Twitter 的 RPC 框架 Finagle 简介 - InfoQ]]
  + [[http://kapsterio.github.io/thrift/2016/10/20/thrift-async-server.html][thrift async server · kaspterio]]

* Thrift
** 使用不规范导致的 BUG 记录
   + 问题现象：客户端和服务端 IDL 文件版本不一致，客户端给一个字段传值了，但是服务端接收处理后得到的结果为 nil
   + 问题原因：修改 IDL 文件的过程中，对旧字段的 index 进行了修改，导致客户端和服务端 IDL 字段 index 的不兼容
   
   thrift 生成的代码：
   #+begin_src go
     case 3:
     if fieldTypeId == thrift.LIST {
       if err := p.ReadField3(iprot); err != nil {
         return err
       }
     } else {
       if err := iprot.Skip(fieldTypeId); err != nil {
         return err
       }
     }
   #+end_src
   
   当修改了字段 index 导致字段类型不一样时，服务端读取到客户端的传参，发现类型不一样会 SKIP 掉，得到 nil。

   PS：所以为啥不是返回一个 err 而是直接 skip 呢……

* 相关链接
  + [[https://www.cnkirito.moe/rpc-registry/][深入理解 RPC 之服务注册与发现篇 | 徐靖峰|个人博客]]
  + [[https://waylau.com/remote-procedure-calls/][远程过程调用(RPC)详解 | waylau.com]]
  + [[https://www.infoq.cn/article/ujea*5ch0HjW2racClC9][RPC 协议之争和选型要点-InfoQ]]

