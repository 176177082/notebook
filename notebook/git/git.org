#+TITLE:      Git - 使用笔记

* 目录                                                    :TOC_4_gh:noexport:
- [[#git-clone][git clone]]
- [[#git-clean][git clean]]
- [[#git-checkout][git checkout]]
- [[#git-log][git log]]
- [[#github-fork][github fork]]
- [[#git-branch][git branch]]
- [[#git-push][git push]]
- [[#git-submodule][git submodule]]
- [[#git-pull][git pull]]
- [[#git-stash][git stash]]
- [[#一些问题][一些问题]]
  - [[#大小写敏感设置][大小写敏感设置]]
  - [[#diff-参数顺序][diff 参数顺序]]
  - [[#git-push-冲突][git push 冲突]]
  - [[#空提交][空提交]]
  - [[#创建空白分支][创建空白分支]]
  - [[#本地分支跟踪远程分支][本地分支跟踪远程分支]]
  - [[#扩展][扩展]]

* git clone
  使用 ~git clone -b branch~ 克隆指定分支。

  通过 ~git clone -b tag~ 指定要克隆的 ~tag~.

* git clean
  #+BEGIN_SRC bash
    # 获取要删除的文件列表但不会删除
    git clean -n

    # 删除当前目录下所有没有 track 过的文件. 但不会删除 .gitignore 文件里面指定的文件夹和文件
    git clean -f

    # 删除指定路径下的没有被 track 过的文件
    git clean -f <path>

    # 删除当前目录下没有被 track 过的文件和文件夹
    git clean -df

    # 删除当前目录下所有没有 track 过的文件. 不管他是否是 .gitignore 文件里面指定的文件夹和文件
    git clean -xf
  #+END_SRC

* git checkout
  + 指定源分支：
    #+BEGIN_EXAMPLE
      git checkout -b <new_branch> <src_branch>
    #+END_EXAMPLE    

* git log
  + 指定目标分支：
    #+BEGIN_EXAMPLE
      git log <branch>
    #+END_EXAMPLE

* github fork
  添加上游仓库源： ~git remote add upstream source~.

  同步上游仓库：
  #+BEGIN_SRC bash
    # 获取上游更新
    git fetch upstream

    # 合并到本地分支
    git merge upstream/<branch>
  #+END_SRC

* git branch
  #+BEGIN_SRC bash
    # 查看远程分支
    git branch -r

    # 查看所有分支
    git branch -a

    # 重命名分支
    git branch -m <oldname> <newname>

    # 详细的信息
    git branch -vv
  #+END_SRC

  通过命令 ~git branch -r~ 可以查看远程分支， 通过命令 ~git branch -a~ 查看所有分支。

* git push
  #+BEGIN_SRC bash
    git push --all  # push 所有分支
    git push --tags  # push tag
  #+END_SRC

* git submodule
  添加子模块: ~git submodule add~

  子模块的添加会产生一个特殊文件： ~.gitmodules~.

  + [[https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97][Git 工具 - 子模块]]

* git pull
  ~git pull~ 的参数可以为 *存储库链接*.

* git stash
  #+BEGIN_SRC bash
    # 新建一个储藏
    git stash

    # 查看现有的储藏
    git stash list

    # 重新应用储藏
    git stash apply

    # 指定名称
    git stash apply stash@{2}
  #+END_SRC

  + [[https://git-scm.com/book/zh/v1/Git-%25E5%25B7%25A5%25E5%2585%25B7-%25E5%2582%25A8%25E8%2597%258F%25EF%25BC%2588Stashing%25EF%25BC%2589][Git 工具 - 储藏（Stashing）]]

* 一些问题
** 大小写敏感设置
   #+BEGIN_SRC bash
     git config core.ignorecase false  # 设置大小写敏感

     # 修改文件名为小写

     git rm -r --cached .  # 从版本库删除大写文件
     git push
   #+END_SRC

** diff 参数顺序
   #+BEGIN_SRC bash
     # 列出 b 相较于 a 做出的修改
     git diff a b
   #+END_SRC

** git push 冲突
   向一个非空的存储库进行推送的时候可能产出冲突，这时可以这样做：
   #+BEGIN_EXAMPLE
    git remote add origin
    git pull --rebase origin master
    git add --all
    git ci
    git push
  #+END_EXAMPLE

** 空提交
   #+BEGIN_SRC bash
     $ git commit --allow-empty -m "Empty"
   #+END_SRC

** 创建空白分支
   1. 创建无提交历史的分支
      #+BEGIN_EXAMPLE
        $ git checkout --orphan <branch>
      #+END_EXAMPLE

   2. 删除工作目录中的内容
      #+BEGIN_EXAMPLE
        $ git rm -rf .
      #+END_EXAMPLE

   3. 创建提交
      #+BEGIN_EXAMPLE
        $ git commit -am "comment"
      #+END_EXAMPLE

** 本地分支跟踪远程分支
   #+BEGIN_EXAMPLE
     git branch -u
     git push -u
   #+END_EXAMPLE

** 扩展
  1. 可执行文件命名为 git-<name>
  2. 通过 git <name> 的方式调用
