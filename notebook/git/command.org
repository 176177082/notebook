#+TITLE:      Git Command

* 目录                                                    :TOC_4_gh:noexport:
- [[#git-clone][git clone]]
- [[#git-clean][git clean]]
- [[#git-checkout][git checkout]]
- [[#git-log][git log]]
- [[#git-branch][git branch]]
- [[#git-push][git push]]
- [[#git-commit][git commit]]
- [[#git-apply][git apply]]
- [[#git-archive][git archive]]

* git clone
  + 克隆远程库时指定分支或标签：
    #+BEGIN_SRC bash
      $ git clone -b <branch>
      $ git clone -b <tag>
    #+END_SRC

  + 克隆远程库时指定克隆的深度，这在克隆提交记录很多的存储库时很有用：
    #+BEGIN_SRC bash
      $ git clone --depth=N
    #+END_SRC

* git clean
  + 获取要删除的文件列表但不会删除：
    #+BEGIN_SRC bash
      $ git clean -n
    #+END_SRC

  + 删除当前目录下所有没有 track 过的文件. 但不会删除 .gitignore 文件里面指定的文件夹和文件
    #+BEGIN_SRC bash
      $ git clean -f
    #+END_SRC

  + 删除指定路径下的没有被 track 过的文件
    #+BEGIN_SRC bash
      git clean -f <path>
    #+END_SRC

  + 删除当前目录下没有被 track 过的文件和文件夹
    #+BEGIN_SRC bash
      $ git clean -fd
    #+END_SRC

  + 删除当前目录下所有没有 track 过的文件. 不管他是否是 .gitignore 文件里面指定的文件夹和文件
    #+BEGIN_SRC bash
      $ git clean -xf
    #+END_SRC

* git checkout
  + 指定 checkout 时的源分支：
    #+BEGIN_EXAMPLE
      git checkout -b <new_branch> <src_branch>
    #+END_EXAMPLE    

* git log
  + 指定目标分支：
    #+BEGIN_EXAMPLE
      $ git log <branch>
    #+END_EXAMPLE

  + 代码行数变动统计，需要在 bash 中执行
    #+BEGIN_SRC bash
      $ git log --author="$(git config --get user.name)" --pretty=tformat: --numstat | awk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf "added lines: %s removed lines : %s total lines: %s\n", add, subs, loc }'
    #+END_SRC

  + 指定时间范围
    #+BEGIN_SRC bash
      $ git log --author="$(git config --get user.name)" --after="2018-01-01" --before="2019-01-01" --pretty= tformat: --numstat | awk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf "added lines: %s remo ved lines : %s total lines: %s\n",add,subs,loc }'
    #+END_SRC

* git branch
  + 获取所有远程分支的名称：
    #+BEGIN_SRC bash
      $ git branch -r
    #+END_SRC

  + 获取所有分支的名称：
    #+BEGIN_EXAMPLE
      $ git branch -a
    #+END_EXAMPLE

  + 重命名分支：
    #+BEGIN_EXAMPLE
      $ git branch -m <oldname> <newname>
    #+END_EXAMPLE

  + 获取分支的详细信息：
    #+BEGIN_EXAMPLE
      $ git branch -vv
    #+END_EXAMPLE

  + 获取包含指定 commit 的所有分支：
    #+begin_example
      $ git branch --contains <commit>
    #+end_example

* git push
  + 将所有分支的修改都推送到远程存储库：
    #+BEGIN_EXAMPLE
      $ git push --all
    #+END_EXAMPLE

  + 将所有标签推送到远程存储库：
    #+BEGIN_EXAMPLE
      $ git push --tags
    #+END_EXAMPLE

* git commit
  + 直接提交所有的修改：
    #+BEGIN_EXAMPLE
      $ git commit -a
    #+END_EXAMPLE

* git apply
  git 提供了两种补丁方案：
  + 通过 git diff 生成的 UNIX 标准补丁 .diff 文件
    
    这种生成方式将多个 commit 之间的区别生成为一个 diff 文件，不包含提交记录。

  + 通过 git format-patch 生成的 git 专用 .patch 文件

    这种生成方式可以保留 commit 日志，每个 commit 对应一个 patch 文件。

  可以参考的文章：
  + [[https://juejin.im/post/5b5851976fb9a04f844ad0f4][Git 打补丁-- patch 和 diff 的使用 - 掘金]]

* git archive
  将 master 以 zip 格式打包到指定文件：
  #+begin_example
    git archive --format zip --output /path/to/file.zip master
  #+end_example
  
  参考：
  + [[https://segmentfault.com/a/1190000002443283][git 文件打包命令 - 海诺 - SegmentFault 思否]]

