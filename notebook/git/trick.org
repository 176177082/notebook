#+TITLE:      Git 使用技巧

* 目录                                                    :TOC_4_gh:noexport:
- [[#git-pull-时使用存储库的链接][git pull 时使用存储库的链接]]
- [[#git-ignore][git ignore]]
- [[#git-merge-strategy][git merge strategy]]
- [[#使用不同的配置][使用不同的配置]]
- [[#workflow][workflow]]

* git pull 时使用存储库的链接
  git pull 不一定必须使用远程存储库的名称，也可以直接使用远程存储库的链接。

* git ignore
  git 可以从多个来源读取 ignore 配置，这些来源从高到低的优先级为：
  1. 从命令行参数中读取的配置，通常由底层命令使用
  2. 从项目目录下的 ~.gitignore~ 文件中读取的配置，子目录中的 ~.gitignore~ 文件优先级高于父目录
  3. 从 ~$GIT_DIR/info/exclude~ 文件中读取的配置
  4. 从通过 ~core.excludesFile~ 配置指定的文件中读取的配置

  其中，我们应该讲项目共享的忽略规则放到项目目录下的 ~.gitignore~ 文件中，将项目中私人的忽略规则放到 ~$GIT_DIR/info/exclude~ 文件中，
  将全局的忽略规则放到 ~core.excludesFile~ 配置项指定的文件中。

  参考：
  + [[https://git-scm.com/docs/gitignore][Git - gitignore Documentation]]

* git merge strategy
  在 merge 的时候可以通过 ~-X~ 选项指定合并策略，比如 ~theirs~ 和 ~ours~ 这两种简易的策略，可以参考：
  + [[https://stackoverflow.com/questions/173919/is-there-a-theirs-version-of-git-merge-s-ours][Is there a "theirs" version of "git merge -s ours"? - Stack Overflow]]

* 使用不同的配置
  当自己在 Github 上的用户名和在公司使用的用户名不一样时，可以选择将公司的仓库全部克隆在一个目录下，
  然后在 =~/.gitconfig= 添加如下配置：
  #+begin_src conf
    [user]
        name = yourname
        email = youremail

    [includeIf "gitdir:~/company/"]
        path = ~/.gitconfig-company
  #+end_src

  此时，在 =~/company= 目录下，会使用 =~/.gitconfig-company= 中的配置覆盖 =~/.gitconfig= 中的配置，这样，
  就可以在 =~/.gitconfig-company= 中指定你在公司的用户名和邮箱了。

  #+begin_src conf
    [user]
        name = companyname
        email = companyemail
  #+end_src

* workflow
  + [[http://www.ruanyifeng.com/blog/2015/12/git-workflow.html][Git 工作流程 - 阮一峰的网络日志]]

