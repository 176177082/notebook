#+TITLE:      C-C++ - Doxygen 笔记

* 目录                                                    :TOC_4_gh:noexport:
- [[#简单使用][简单使用]]
  - [[#doxyfile-配置][Doxyfile 配置]]
- [[#注释规范][注释规范]]
- [[#注释模板][注释模板]]
- [[#常用关键字列表][常用关键字列表]]

* 简单使用
  命令: =doxygen -g= 生成默认的文档生成模板
  命令: =doxygen= 根据目录下的 =Doxyfile= 生成文档

** Doxyfile 配置 
   |-------------------+--------+-----------------|
   | Key               | Value  | Description     |
   |-------------------+--------+-----------------|
   | GENERATE_LATEX    | NO     | 不生成Latex文档 |
   |-------------------+--------+-----------------|
   | DISABLE_INDEX     | YES    | ...             |
   | GENERATE_TREEVIEW | YES    | ...             |
   |-------------------+--------+-----------------|
   | PROJECT_NAME      | "name" | 项目名          |
   | OUTPUT_DIRECTORY  | .      | 文档输出目录    |
   | INPUT             | ../    | 源文件路径      |
   |-------------------+--------+-----------------|

* 注释规范
 + 文件头 ::
   #+BEGIN_SRC C 
     /**
      * @file filename
      * @brief 概述
      *
      * 详细描述
      *
      * @author 作者名
      * @version 版本号
      * @date 日期
      */
   #+END_SRC

 + 结构体 ::
   #+BEGIN_SRC C
     /**
      * @brief 结构简述
      */

     struct Example {
       int num;  /**< 成员描述 */
       char chr;  /**< 成员描述 */
     };

   #+END_SRC

 + 函数 ::
   #+BEGIN_SRC C
     /**
      * @brief 概述
      * @param n 参数说明
      * @return 返回值说明
      */
     int func(int n);
   #+END_SRC

 + 枚举 ::
   #+BEGIN_SRC C 
     /**
      * @brief 概述
      */
     enum E {
       em_1,  /**< 枚举值1的说明 */
       em_2,  /**< 枚举值2的说明 */
     };

   #+END_SRC

* 注释模板
  #+BEGIN_SRC C
    /**
     * @brief   摘要(文件头)
     * @file    文件名
     * @author  作者
     * @version 版本号
     * @date    你啥时候搞的
     * @note    注解
     * @since   自从
     */

    /**
     * @brief 这里写这个函数是干什么用的
     * @param i1[in]  输入参数1
     * @param i2[in]  输入参数2
     * @param o3[out] 输出参数1
     * @return        返回值解释一下
     * @warning       警告: 例如: 参数不能为空
     * @note          注解
     * @see           相当于是请参考xxoo函数之类的
     */

    /**< 行注释 */
  #+END_SRC

* 常用关键字列表
  #+BEGIN_EXAMPLE
    @author     作者的信息
    @brief      用于class 或function的简易说明 eg：@brief 本函数负责打印错误信息串
    @bug        被标记的代码会在Bug列表中出现
    @class      类名
    @date       日期
    @file       文件名，可以默认为空，DoxyGen会自己加
    @param      主要用于函数说明中，后面接参数的名字，然后再接关于该参数的说明
    @return     描述该函数的返回值情况eg: @return 本函数返回执行结果，若成功则返回TRUE，否则返回FLASE
    @retval     描述返回值类型 eg: @retval NULL 空字符串。@retval !NULL 非空字符串。
    @note       注解
    @attention  注意
    @name       分组名
    @warning    警告信息
    @enum       引用了某个枚举，Doxygen会在该枚举处产生一个链接 eg：@enum CTest::MyEnum
    @var        引用了某个变量，Doxygen会在该枚举处产生一个链接 eg：@var CTest::m_FileKey
    @class      引用某个类，格式：@class <name> [<header-file>] [<header-name>] eg:@class CTest "inc/class.h"
    @exception  可能产生的异常描述 eg: @exception 本函数执行可能会产生超出范围的异常
    @todo       对将要做的事情进行注释
    @see        see also字段
    @relates <name> 通常用做把非成员函数的注释文档包含在类的说明文档中。
    @since      从哪个版本后开始有这个函数的
    @code       在注释中开始说明一段代码，直到@endcode命令。
    @endcode    在注释中代码段的结束。
    @remarks    备注
    @pre        用来说明代码项的前提条件。
    @post       用来说明代码项之后的使用条件。
    @deprecated 这个函数可能会在将来的版本中取消。
    @defgroup   模块名
    @{          模块开始
    @}          模块结束
    @class      声明一个类 
    @version    版本号
    @fn         声明一个函数
    @par        开始一个段落，段落名称描述由你自己指定，比如可以写一段示例代码
    -           一级项目符号
    -#          二级项目符号
  #+END_EXAMPLE
