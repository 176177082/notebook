#+TITLE:      指针

* 目录                                                    :TOC_4_gh:noexport:
- [[#指针与数组][指针与数组]]
- [[#函数指针][函数指针]]
- [[#指针参数的传递][指针参数的传递]]
- [[#指针的使用][指针的使用]]
- [[#const--pointer][const & pointer]]

* 指针与数组
  #+BEGIN_QUOTE
  An object is a named region of storage; an lvalue is an expression referring to an object.
  #+END_QUOTE

  #+BEGIN_SRC C :results output :exports both
    int my_array[] = {1, 23, 17, 4, -5, 100};
    int* ptr;

    int main(void) {
      int i;
      ptr = &my_array[0];     /* point our pointer to the first
                                 element of the array */
      printf("\n\n");
      for (i = 0; i < 6; i++) {
        printf("my_array[%d] = %d   ",i,my_array[i]);   /*<-- A */
        printf("ptr + %d = %d\n",i, *(ptr + i));        /*<-- B */
      }
      return 0;
    }
  #+END_SRC

  #+RESULTS:
  : my_array[0] = 1   ptr + 0 = 1
  : my_array[1] = 23   ptr + 1 = 23
  : my_array[2] = 17   ptr + 2 = 17
  : my_array[3] = 4   ptr + 3 = 4
  : my_array[4] = -5   ptr + 4 = -5
  : my_array[5] = 100   ptr + 5 = 100

  在 ~C~ 标准中，凡是我们可以使用 ~&var_name[0]~ 的地方，我们都可以用 ~var_name~ 代替。

  同时，以下两种写法是等价的：
  #+BEGIN_SRC C
    arr[5];
    5[arr];
  #+END_SRC

* 函数指针
  #+BEGIN_SRC c
    /* 定义一个函数指针 */
    int (*func)(int num);

    /* 假定存在函数 int fib(int n) */
    func = fib;  /* 赋值 */

    /* 定义一个函数指针类型 */
    typedef int(*Func)(int num);  /* 定义了名为 Func 的函数指针类型 */

    /* 定义 Func 类型函数指针变量 */
    Func func = fib;
  #+END_SRC

  函数指针的值就是其本身，因此可以无限解引用：
  #+BEGIN_SRC C
    #include <stdio.h>

    void func() {}

    int main(int argc, char* argv[]) {
      printf("%p", *************************************************************func);
      return 0;
    }
  #+END_SRC
  
* 指针参数的传递
  指针也是 *按值* 传参的：
  #+BEGIN_SRC c
    #include <stdio.h>

    void test_point(int* point) {
      int num = 10;
      point = &num;
      printf("%p\n", point);
    }

    int main(void) {
      int num = 10;
      int* point = &num;

      printf("%p\n", point);
      test_point(point);
      printf("%p\n", point);

      return 0;
    }
  #+END_SRC

  输出结果：
  #+BEGIN_EXAMPLE
    000000000022FE44
    000000000022FE0C
    000000000022FE44
  #+END_EXAMPLE

  所以， 如果要在递归中对指针进行 ~realloc~, 可能在递归中将指针原来指向的内存清理了。

* 指针的使用
  1) 自增运算符和解引用运算符的优先级：
     #+BEGIN_SRC C
       ,*p++;  // *p, p++
       ,*++p;  // ++p, *p
     #+END_SRC

  2) 数组初始化与默认值：
     + 数组如果未初始化，那么数组元素的值是不确定的
     + 如果进行初始化时，初始化的元素小于数组的长度，那么剩下的值默认为 0
     + 可变长对象数组不能初始化

  3) 值类型与引用类型：
     + *结构体* 是值类型，所以函数返回结构体时，返回的是结构体的值，因此函数内部创建的结构体返回值依然存在

     + *数组* 是引用类型，函数返回数组的时候，返回的是数组所在那片内存区域的地址，而那片地址在函数执行完成后便消毁了

  4) 指针操作时可以操作的值有两种：
     + 指针指向内存区域的值
     + 指针变量本身的值 - 指向的内存区域的地址
     这两个值在使用时需要分清楚

* const & pointer
  声明中带有 ~const~ 的指针分为以下两种情况：
  + 不能修改指针本身的值
  + 不能修改指针指向内存的值

  两种指针的声明方式分别为：
  #+BEGIN_SRC C
    // 不能修改指针本身的值
    int* const ptr = &val;

    // 不能修改指针指向内存的值
    const int* ptr;
    int const* ptr;
  #+END_SRC

  对于第一种， 由于不能修改指针本身的值， 所以必须初始化。

  同时兼顾两者的声明方式：
  #+BEGIN_SRC C
    const int* const ptr = &val;
    int const* const ptr = &val;
  #+END_SRC

