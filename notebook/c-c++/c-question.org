#+TITLE:      C 语言问题集

* 目录                                                    :TOC_4_gh:noexport:
- [[#有符号数和无符号数之间的转换规则是怎样的][有符号数和无符号数之间的转换规则是怎样的]]
- [[#如果自增运算的左操作数和右操作数相同会怎样][如果自增运算的左操作数和右操作数相同会怎样]]
- [[#eof-怎样和无符号整数进行比较][EOF 怎样和无符号整数进行比较]]

* 有符号数和无符号数之间的转换规则是怎样的
  整数字面值默认为 *有符号数*, 定义无符号数可以使用后缀 ~u~ 或 ~U~.

  如果一个运算同时存在有符号数和无符号数， 那么会隐式的将有符号数转换为无符号数：
  #+BEGIN_SRC C
    // 1st. -2147483647 - 1 = -2147483648
    // 2st. -2147483648 ==> 2147483648U
    // 3st. 2147483647 > 2147483648U

    2147483647U > -2147483647 - 1;  // false
  #+END_SRC

* 如果自增运算的左操作数和右操作数相同会怎样
  以下代码的自增运算操作的左操作数和右操作数相同：
  #+BEGIN_SRC C
    #include <stdio.h>

    int main(void) {
      int count = 0;

      for (int i = 0; i < 10; ++i) {
        count = count++;  // lineno: 7
      }

      return 0;
    }
  #+END_SRC

  通过分析该行对应的汇编代码可以得到具体的执行过程：
  #+BEGIN_SRC asm
      // count in -4(rbp)
      0x000000000040158d <+29>:    mov    -0x4(%rbp),%eax
      0x0000000000401590 <+32>:    lea    0x1(%rax),%edx
      0x0000000000401593 <+35>:    mov    %edx,-0x4(%rbp)
      0x0000000000401596 <+38>:    mov    %eax,-0x4(%rbp)
  #+END_SRC

  1) 取有右操作数的值放入寄存器 eax
  2) eax + 1 放入寄存器 edx
  3) edx 的值放入右操作数地址
  4) eax 的值放入左操作数地址

  这样导致的结果：
  + 在这样的操作中，编译器使用了两个寄存器来保存 *自增前* 和 *自增后* 的值
  + 然后首先将 *自增后* 的值保存，然后将 *自增前* 的值赋给 *左值*
  + 因此 ~count = count++~ 不会改变 ~count~ 的值
  + 这是一个运算优先级的问题。先赋值在自增指的只是赋给 *左值* 的值是 *自增前* 的值
  + 而 ~++count~ 赋的是 *自增后* 的值

* EOF 怎样和无符号整数进行比较
  使用 ~int~ 型的值来保存读取到的字符：
  #+BEGIN_SRC C
    while ((ch = fgetc(stdin)) != EOF)
  #+END_SRC

  参考：[[https://stackoverflow.com/questions/8586722/comparing-unsigned-char-and-eof][c - Comparing unsigned char and EOF - Stack Overflow]]
  
