#+TITLE:      C 语言

* 目录                                                    :TOC_4_gh:noexport:
- [[#字符串字面量][字符串字面量]]
- [[#声明和定义][声明和定义]]
- [[#内存分区与生命周期][内存分区与生命周期]]
  - [[#关键字-static-的作用][关键字 static 的作用]]
- [[#预处理器][预处理器]]
  - [[#可变参数宏][可变参数宏]]
- [[#数组][数组]]
  - [[#数组的初始化][数组的初始化]]
  - [[#柔性数组的定义][柔性数组的定义]]
  - [[#二维数组的动态创建][二维数组的动态创建]]
- [[#结构体相关][结构体相关]]
  - [[#结构体字段内存对齐][结构体字段内存对齐]]
  - [[#结构体的嵌套与位域][结构体的嵌套与位域]]
  - [[#结构体的初始化][结构体的初始化]]
- [[#枚举类型][枚举类型]]
- [[#作用域][作用域]]
- [[#关键字][关键字]]
- [[#相关问题][相关问题]]
  - [[#整数类型的自动提升是如何的][整数类型的自动提升是如何的]]

* 字符串字面量
  支持的字符串字面量形式及支持该新式的标准：
  #+BEGIN_SRC C
    char* str = "Test string";
    char* str = u8"Test string";    // C11
    char16_t* str = u"Test string"; // C11
    char32_t* str = U"Test string"; // C11
    wchar_t* str = L"Test string";
  #+END_SRC

  若在字符串字面量中合法十六进制数位后随十六进制转义，则这会作为非法的转义序列导致编译失败，但能以字符串连接为变通方式：
  #+BEGIN_SRC C
    //char* p = "\xfff"; // 错误：十六进制转义在范围外
    char* p = "\xff""f"; // OK ：字面量为 char[3] ，保有 {'\xff', 'f', '\0'}
  #+END_SRC

  + [[https://zh.cppreference.com/w/c/language/string_literal][字符串字面量 - cppreference.com]]

* 声明和定义
  1) 声明可以出现在任意作用域，包括在函数体内部
     #+BEGIN_SRC C
       int main(int argc, char* argv[]) {
         int func(int, int);
       }
     #+END_SRC

  2) 函数定义不能嵌套，但结构体可以
     #+BEGIN_SRC C
       int main(int argc, char* argv[]) {
         ing func(int a, int b) {
           // error
         }
       }
     #+END_SRC

     PS: GCC 支持嵌套函数

  3) 枚举声明的同时必须定义
     #+BEGIN_SRC C
       typedef enum COLOR {
         RED, GREEN, BLUE
       } COLOR;
     #+END_SRC

  4) 枚举定义后其成员在定义它的 *作用域* 全局有效

  参考：[[https://zh.cppreference.com/w/c/language/declarations][声明 - cppreference.com]]

* 内存分区与生命周期
  + 栈区，由编译器在需要的时候分配，在不需要的时候自动清处的变量的存储区。里面的变量通常是局部变量、函数参数等。

  + 堆区，new 操作（C++）分配的内存块，它们的释放编译器不去管， 由应用程序去控制，一般一个 ~new~ 就要对应一个 ~delete~.
    如果程序没有释放掉，那么在程序结束后，操作系统会自动回收。

  + 自由存储区，由 ~malloc~ 等分配的内存块，它和堆十分相似，不过它是用 ~free~ 来结束自己的生命的。

  + 全局/静态存储区，局部变量和静态变量被分配到同一块内存中，在 ~C~ 语言中，全局变量又分为初始化的和未初始化的，
    在 ~C++~ 里面没有这个区分， 它们共同占用同一块内存区。

  + 常量存储区，这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。但可以通过指针直接修改。

** 关键字 static 的作用
   1) 在修饰变量的时候，static 修饰的静态局部变量只执行一次，而且延长了局部变量的生命周期，直到程序运行结束以后才释放
   2) static 修饰全局变量的时候，这个全局变量只能在本文件中访问，不能在其它文件中访问，即便是 extern 外部声明也不可以
   3) static 修饰一个函数，则这个函数的只能在本文件中调用，不能被其他文件调用
   4) static 修饰的局部变量存放在全局数据区的静态变量区, 初始化的时候自动初始化为 0
     
   使用：
   1) 不想被释放的时候，可以使用 static 修饰。比如修饰函数中存放在栈空间的数组。如果不想让这个数组在函数调用结束释放可以使用 static 修饰
   2) 考虑到数据安全性（当程序想要使用全局变量的时候应该先考虑使用 static）
      
* 预处理器
  C 语言中 *宏* 是一个很重要的工具，和 C++ 不同，C 语言本身的语法特性少的可伶，只能通过宏的方式来实现灵活的编程方式。

  需要注意的是，预处理是发生在编译之前的处理过程，使用宏其实就相当于通过一些指令指示预处理器来修改你的源代码，这样是再说，
  C 语言不存在名称空间这种东西，它都是直接把文件中的内容包含进来的，所以，头文件和源代码的分离很重要。

  在使用宏的过程中，如果内容太多一行装不下，可以用 ~\~ 换行：
  #+BEGIN_SRC C
    #define EXAMPLE for (int i = 0; i < 10; ++i) { \
      printf("Hello World !");                     \
      }
  #+END_SRC

  可以用操作符 ~##~ 链接宏中的两个标识符：
  #+BEGIN_SRC C
    #define FUNCTION(name, a) int fun_##name(int x) { return (a) * x; }
  #+END_SRC

  可以通过宏 ~__FILE__~ 得到当前的文件名。

  除了宏以外，预处理还会做的一些事：
  + 预处理器会将仅用 *空白字符* 分隔的字符串常量序列串联起来：
    #+BEGIN_EXAMPLE
      "123"  "456" ==> "123456"
    #+END_EXAMPLE

  预处理器的相关内容很多，可以参考：[[https://zh.cppreference.com/w/c/preprocessor][预处理器 - cppreference.com]].

** 可变参数宏
   通过宏 *__VA_ARGS__* 定义可变参数宏：
   #+BEGIN_SRC C
     #define F(...) func(__VA_ARGS__)
   #+END_SRC

   *#* 出现在 *__VA_ARGS__* 前时，将整个展开的 *__VA_ARGS__* 放入引号：
   #+BEGIN_SRC C
     #define showlist(...) puts(#__VA_ARGS__)
     showlist();             // 展开成 puts("")
     showlist(1, "x", int);  // 展开成 puts("1, \"x\", int")
   #+END_SRC

   一些编译器提供允许 *##* 出现在逗号后和 *__VA_ARGS__* 前的扩展，在此情况下 *##* 在 *__VA_ARGS__* 非空时无效，
   但在 *__VA_ARGS__* 为空时移除逗号。

   这使得可以定义如 fprintf (stderr, format, ##__VA_ARGS__) 的宏：
   #+BEGIN_SRC C
     #define pf(...) fprintf(stderr, format, ##__VA_ARGS__)

     pf();        // fprintf(stderr, format)
     pf(a, b, c)  // fprintf(stderr, format, a, b, c)
   #+END_SRC

   如下情况会导致编译出错：
   #+BEGIN_SRC C
     printf("string", );
   #+END_SRC

* 数组
** 数组的初始化
   #+BEGIN_SRC C
     int arr[] = {1, 2, 3};   // int arr[3] = {1, 2, 3}
     int arr[4] = {1, 2, 3};  // int arr[4] = {1, 2, 3, 0}
   #+END_SRC

** 柔性数组的定义
   将结构体最后一个成员定义为长度为 0 的数组，这个数组的实际大小为 0，
   数组的地址就是结构体后内存区域的地址。

   实际的例子：
   #+BEGIN_SRC C
     struct Example {
       int num;
       char data[];
     }
   #+END_SRC

   + [[https://coolshell.cn/articles/11377.html][C 语言结构体里的成员数组和指针 | 酷 壳 - CoolShell]]

** 二维数组的动态创建
  不连续内存的初始化方式：
  #+BEGIN_SRC C
    int** arr = (int**) malloc(rows * sizeof(int*));
    for (int i = 0; i < rows; ++i) {
      arr[i] = (int*) malloc(cols * sizeof(int));
    }
  #+END_SRC

  连续内存：
  #+BEGIN_SRC C
    int** arr = (int**) malloc(rows * sizeof(int*));
    arr[0] = (int*) malloc(rows * cols * sizeof(int));
    for (int i = 1; i < rows; ++i) {
      arr[i] = arr[i - 1] + cols;
    }
  #+END_SRC

* 结构体相关
** 结构体字段内存对齐
   结构体的内存对齐只要能满足对齐规则，就尽量少补，因此，结构体内部字段的字段对齐只发生在下一个字段无法对齐的情况：
   #+BEGIN_SRC C
     struct Example {  // 0x4
       int i;   // 4, 4 % 4 == 0
       char c;  // 5, 5 % 1 == 0
       char d;  // 6, 6 % 1 == 0
       long j;  // 8，8 % 8 == 0
     }
   #+END_SRC

** 结构体的嵌套与位域
   嵌套的结构体只能在结构体内部定义变量, 在结构体外不能使用：
   #+BEGIN_SRC C
     struct Outside {
       static Inside {
         int val;
       } _inside;
       int val;
     };

     struct Outside out;

     out.val = 0;
     out._insiade.val = 0;
   #+END_SRC

   对于结构体中不需要占用一个完整的字节的内容，可以通过位域让它们共享一段内存：
   #+BEGIN_SRC C
     typedef {
       unsigned int readable : 1;
       unsigned int writable : 1;
     } Mode;
   #+END_SRC  

   + [[http://www.cnblogs.com/bigrabbit/archive/2012/09/20/2695543.html][C 结构体之位域 - 大兔子_快跑 - 博客园]]

** 结构体的初始化
   结构体可以使用的初始化方式：
   #+BEGIN_SRC C
     typedef struct Pair {
       int left;
       int right;
     } Pair;

     // 顺序初始化
     Pair pair = {10, 20};

     // 乱序初始化
     Pair pair = {
       .left = 10,
       .right = 20,
     };
   #+END_SRC

* 枚举类型
  枚举值在其作用域中可直接使用，不需要使用枚举类型名访问。

  #+BEGIN_SRC C
    enum DAY {
      MON=1, TUE, WED, THU, FRI, SAT, SUN
    };

    enum DAY yesterday = MON;
  #+END_SRC

  枚举声明可以在函数体内部，也可以在函数体外，结构体，联合体一样。

  + [[https://www.cnblogs.com/JCSU/articles/1299051.html][C语言详解 - 枚举类型]]

* 作用域
  下面这样的写法在 C 语言中是合法的，但是在 Java 中并不合法：
  #+BEGIN_SRC C
    int main(int argc, char* argv[]) {
      int x = 10;

      {
        int x = 10;
      }

      return 0;
    }
  #+END_SRC

* 关键字
  |----------+----------------------------------------------------------|
  | 关键字   | 作用                                                     |
  |----------+----------------------------------------------------------|
  | register | 将变量尽可能的放在寄存器中，提高访问速度，常用语循环变量 |
  | volatile | 禁止进行指令重排序，并保证变量的可见性                   |
  | inline   | 定义内联函数，提高函数的执行效率，但会导致代码膨胀       |
  |----------+----------------------------------------------------------|

  参考链接：
  + [[https://blog.csdn.net/zqixiao_09/article/details/50877383][内联函数 —— C 中关键字 inline 用法解析_c语言,inline,内联函数_知秋一叶-CSDN博客]]
  + [[https://zh.cppreference.com/w/c/keyword][C 关键词 - cppreference.com]]

* 相关问题
** 整数类型的自动提升是如何的
   整数类型的自动提升通常是由小宽度提升为大宽度，这个提升过程中需要注意符号位的问题，对于无符号数来算，类型提升时会在前面补 0，
   但是对于有符号数来说，前面补的是符号位。

  比如说：
  #+begin_src c
    char val = 0xe8;

    if (val == 0xe8) {  // 0xffffffe8 == 0x000000e8
      // ...
    }
  #+end_src

  而位运算时默认会将数字提升为 ~int~ 类型，因此得到如下错误的结果：
  #+begin_src C
    char val = 0xe8;

    val ^ 0xff;  // => 0xffffffe8 ^ 0xff
  #+end_src

  但是，对于无符号数来说，一般都能表现出正常的行为。
  
  小结：整数的强制类型转换，宽度相同时只改变解释方式，宽度变小时进行截断，宽度变大时，无符号数补 0，有符号数补符号位。

