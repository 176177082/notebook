#+TITLE:      Makefile

* 目录                                                    :TOC_4_gh:noexport:
- [[#简单使用][简单使用]]
  - [[#自动化变量][自动化变量]]
  - [[#内置函数][内置函数]]
  - [[#make-指令][$(MAKE) 指令]]
- [[#相关问题][相关问题]]
  - [[#怎样在-makefile-中使用环境变量][怎样在 Makefile 中使用环境变量]]
  - [[#获取-shell-命令的输出][获取 Shell 命令的输出]]
  - [[#怎样在编译的时候通过命令行参数定义宏][怎样在编译的时候通过命令行参数定义宏]]

* 简单使用
** 自动化变量
   |------+---------------------------------------------------------------------------------------------------|
   | Name | Description                                                                                       |
   |------+---------------------------------------------------------------------------------------------------|
   | $@   | 表示规则中的目标文件集                                                                            |
   | $%   | 仅当目标是函数库文件中，表示规则中的目标成员名                                                    |
   | $<   | 依赖目标中的第一个目标名字                                                                        |
   | $?   | 所有比目标新的依赖目标的集合                                                                      |
   | $^   | 所有的依赖目标的集合. 如果在依赖目标中有多个重复的，那个这个变量会去除重复的依赖目标，只保留一份. |
   | $+   | 这个变量很像 *$^*, 也是所有依赖目标的集合.只是它不去除重复的依赖目标                                |
   |------+---------------------------------------------------------------------------------------------------|

** 内置函数
   + 循环函数，注意需要执行的命令尾部的分号：
     #+BEGIN_SRC makefile
       $(foreach n, $(PRG), gcc -o $(n) $(n).o;)
     #+END_SRC

     相当于：
     #+BEGIN_SRC python
       for n in $(PRG):
           gcc -o $(n) $(n).o;
     #+END_SRC
    
     同时：自动构建时列出的目标如果不在当前目录就不能直接用 for 循环得出, 即不能使用 VPATH 指定的文件找寻路径

** $(MAKE) 指令
   通过如下指令可以指定 Make 的执行目录：
   #+BEGIN_EXAMPLE
     $(MAKE) -C dirname
   #+END_EXAMPLE
    
* 相关问题
** 怎样在 Makefile 中使用环境变量
   可以通过 ~${var}~ 使用环境变量：
   #+BEGIN_SRC makefile
     PATH = ${PATH}
   #+END_SRC

** 获取 Shell 命令的输出
   #+BEGIN_SRC makefile
     VAR = $(shell command...)
   #+END_SRC

** 怎样在编译的时候通过命令行参数定义宏
   C/C++ 中常见的一种技巧便是通过在编译期间指定宏的方式来指定不同的编译参数，我们可以通过编译器的 ~-D~ 参数来调用宏：
   #+begin_example
     -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)
   #+end_example
   
   同时，我们可以借助 Makefile 指定环境变量的方式来指定宏：
   #+begin_src makefile
     MACRO=-D ${MACRO}
   #+end_src

   使用：
   #+begin_src bash
     make MACRO=DEBUG
   #+end_src
   
   参考：
   + [[https://stackoverflow.com/questions/2826029/passing-additional-variables-from-command-line-to-make][makefile - Passing additional variables from command line to make - Stack Overflow]]
   + [[https://stackoverflow.com/questions/28890634/how-to-get-a-shell-environment-variable-in-a-makefile][How to get a shell environment variable in a makefile? - Stack Overflow]]

