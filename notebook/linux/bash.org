#+TITLE:      Bash

* 目录                                                    :TOC_4_gh:noexport:
- [[#基础][基础]]
  - [[#变量][变量]]
  - [[#数组][数组]]
  - [[#字符串替换][字符串替换]]
  - [[#函数][函数]]
  - [[#条件语句][条件语句]]
  - [[#循环][循环]]
- [[#命令行参数][命令行参数]]
- [[#相关技巧][相关技巧]]
- [[#相关问题][相关问题]]
  - [[#怎样将字符串转换为小写][怎样将字符串转换为小写]]
  - [[#怎样在命令行格式化-json-字符串][怎样在命令行格式化 json 字符串]]
  - [[#如何在脚本里面调用另一个脚本][如何在脚本里面调用另一个脚本]]
  - [[#遍历命令行参数][遍历命令行参数]]
  - [[#在函数内部使用-getopts][在函数内部使用 getopts]]
  - [[#执行传入的命令][执行传入的命令]]
  - [[#var-var-和-var-的区别][${var}, "$var" 和 "${var}" 的区别]]
  - [[#单引号和双引号的区别][单引号和双引号的区别]]

* 基础
  脚本第一行叫做 ~shebang~, 用于告诉 ~shell~ 使用什么程序执行这个脚本。

  #+BEGIN_SRC bash
    #!/usr/bin/env bash
  #+END_SRC

** 变量
   变量名和等号之间不能有空格， 使用变量需要在变量名前面加上 ~$~. 可以使用 ~${}~ 的形式来确定变量边界：
   #+BEGIN_SRC bash
     str="hello world"

     echo $str  # hello world
     echo "${str}."  # hello world.
   #+END_SRC

** 数组
   数组的大小没有限制， 数组的第一个元素的下标为 ~0~. 创建数组的几种方法：
   #+BEGIN_SRC bash
     array[0] = val
     array[1] = val
     array[2] = val
     array=([2]=val [0]=val [1]=val)
     array=(val val val)
   #+END_SRC

   显示数组某个元素的值：
   #+BEGIN_SRC bash
     ${array[i]}     # where i is the index
   #+END_SRC

   如果未提供索引， 则假定为数组元素 0. 获取数组存在多少元素的方式：
   #+BEGIN_SRC bash
     ${#array[@]}
   #+END_SRC

   特殊的取值操作：
   #+BEGIN_SRC bash
     ${varname:-word}    # if varname exists and isn't null, return its value; otherwise return word
     ${varname:=word}    # if varname exists and isn't null, return its value; otherwise set it word and then return its value
     ${varname:+word}    # if varname exists and isn't null, return word; otherwise return null
     ${varname:offset:length}    # performs substring expansion. It returns the substring of $varname starting at offset and up to length characters
   #+END_SRC

** 字符串替换
   #+BEGIN_SRC bash
     ${variable#pattern}         # if the pattern matches the beginning of the variable's value, delete the shortest part that matches and return the rest
     ${variable##pattern}        # if the pattern matches the beginning of the variable's value, delete the longest part that matches and return the rest
     ${variable%pattern}         # if the pattern matches the end of the variable's value, delete the shortest part that matches and return the rest
     ${variable%%pattern}        # if the pattern matches the end of the variable's value, delete the longest part that matches and return the rest
     ${variable/pattern/string}  # the longest match to pattern in variable is replaced by string. Only the first match is replaced
     ${variable//pattern/string} # the longest match to pattern in variable is replaced by string. All matches are replaced
     ${#varname}     # returns the length of the value of the variable as a character string
   #+END_SRC

** 函数
   定义函数的方式：
   #+BEGIN_SRC bash
     function name() {
         shell commands
     }
   #+END_SRC

   例子：
   #+BEGIN_SRC bash
     #!/bin/bash
     function hello {
         echo world!
     }
     hello

     function say {
         echo $1
     }
     say "hello world!"
   #+END_SRC

   ~$1~ 表示传入函数的第一个参数。

** 条件语句
   #+BEGIN_SRC bash
     if [ expression ]; then
         will execute only if expression is true
     else
         will execute if expression is false
     fi
   #+END_SRC

   ~expression~ 和 ~[]~ 之间必须有空格， 即 *不能* 是 ~[expression]~.

   #+BEGIN_SRC bash
     case expression in
         pattern1 )
             statements
             ;;
         pattern2 )
             statements
             ;;
         ...
     esac
   #+END_SRC

   分号 ~;;~ 充当 ~break~ 的角色。

   各种表达式：
   #+BEGIN_SRC bash
     statement1 && statement2  # both statements are true
     statement1 || statement2  # at least one of the statements is true

     str1=str2       # str1 matches str2
     str1!=str2      # str1 does not match str2
     str1<str2       # str1 is less than str2
     str1>str2       # str1 is greater than str2
     -n str1         # str1 is not null (has length greater than 0)
     -z str1         # str1 is null (has length 0)

     -a file         # file exists
     -d file         # file exists and is a directory
     -e file         # file exists; same -a
     -f file         # file exists and is a regular file (i.e., not a directory or other special type of file)
     -r file         # you have read permission
     -s file         # file exists and is not empty
     -w file         # you have write permission
     -x file         # you have execute permission on file, or directory search permission if it is a directory
     -N file         # file was modified since it was last read
     -O file         # you own file
     -G file         # file's group ID matches yours (or one of yours, if you are in multiple groups)

     file1 -nt file2     # file1 is newer than file2
     file1 -ot file2     # file1 is older than file2

     -lt     # less than
     -le     # less than or equal
     -eq     # equal
     -ge     # greater than or equal
     -gt     # greater than
     -ne     # not equal
   #+END_SRC

** 循环
   ~bash~ 的三种循环为 ~for~, ~while~ 和 ~until~.

   三种 ~for~:
   #+BEGIN_SRC bash
     for x := 1 to 10 do
     begin
         statements
     end

     for name [in list]
     do
         statements that can use $name
     done

     for (( initialisation ; ending condition ; update ))
     do
         statements...
     done
   #+END_SRC
   
   ~while~:
   #+BEGIN_SRC bash
     while condition; do
         statements
     done
   #+END_SRC

   ~until~:
   #+BEGIN_SRC bash
     until condition; do
         statements
     done
   #+END_SRC
* 命令行参数
  在简单的 Shell 脚本中我们可以通过一些内置变量来处理命令行参数，包括：
  |----------+----------------------------------------------------------------------------|
  | 内置变量 | 含义                                                                       |
  |----------+----------------------------------------------------------------------------|
  | ~$0~       | 命令本身                                                                   |
  | ~$1..n~    | 第 1 到第 n 个参数                                                         |
  | ~$#~       | 命令行参数的个数                                                           |
  | ~$@~       | 参数本身的列表，命令本身除外                                               |
  | ~$*~       | 和 ~$@~ 相同，只不过 ="$*"= 会将参数解释成一个字符串，而 ="$@"= 会解释为参数数组 |
  | =$?=       | 上个命令的退出状态，或函数的返回值                                         |
  | =$$=       | 当前 Shell 进程 ID                                                         |
  |----------+----------------------------------------------------------------------------|
  
  但是在复杂的脚本中我们往往需要更好的处理命令行参数的方式，这时可以使用内置的 ~getopts~ 命令：
  #+begin_src bash
    while getopts "a:bc" arg            # 选项后面的冒号表示该选项需要参数
    do
        case $arg in
            a)
                echo "a's arg:$OPTARG"  # 参数存在 $OPTARG 中
                ;;
            b)
                echo "b"
                ;;
            c)
                echo "c"
                ;;
            ?)                          # 当有不认识的选项的时候 arg 为 ?
            echo "unkonw argument"
            ;;
        esac
    done
  #+end_src

  参数默认值：
  #+begin_src sh
    # not define
    ${VAR-DEFAULT}

    # not define or ''
    ${VAR:-DEFAULT}
  #+end_src

  参考：
  + [[https://www.cnblogs.com/franktan/archive/2010/03/01/1634516.html][Bash Shell 中命令行选项/参数处理 - Frank Tan - 博客园]]

* 相关技巧
  + 可以通过 type 判断命令是 可执行文件、shell 内置命令还是别名
  + 可以通过 apropos 和关键词在 man page 描述中查找相应的程序

* 相关问题
** 怎样将字符串转换为小写
   简单点的方式可以使用 ~tr~ 命令来完成这一操作：
   #+begin_src bash
     $ echo STRING | tr '[:upper:]' '[:lower:]'
   #+end_src

   参考：
   + [[https://stackoverflow.com/questions/2264428/how-to-convert-a-string-to-lower-case-in-bash][How to convert a string to lower case in Bash? - Stack Overflow]]

** 怎样在命令行格式化 json 字符串
   在拥有 ~Python~ 解释器的环境中可以通过如下方式实现：
   #+begin_src bash
     $ curl -s url | python -m json.tool
   #+end_src

   更多可以参考：
   + [[https://stackoverflow.com/questions/352098/how-can-i-pretty-print-json-in-a-shell-script][unix - How can I pretty-print JSON in a shell script? - Stack Overflow]]

** 如何在脚本里面调用另一个脚本
   可以使用如下三种方式，其中，使用 =bash= 的适合无法修改当前 shell 的环境变量，而 =.= 是 =source= 的一种 alias：
   #+begin_src sh
     bash another_script.sh
     source another_script.sh
     . another_script.sh
   #+end_src
   
   参考：
   + [[https://stackoverflow.com/questions/8352851/how-to-call-one-shell-script-from-another-shell-script][bash - How to call one shell script from another shell script? - Stack Overflow]]

** 遍历命令行参数
   #+begin_src sh
     for var in "$@"
     do
         echo "$var"
     done
   #+end_src

   参考：
   + [[https://stackoverflow.com/questions/255898/how-to-iterate-over-arguments-in-a-bash-script][command line - How to iterate over arguments in a Bash script - Stack Overflow]]

** 在函数内部使用 getopts
   在使用 =getopts= 之前设置 =local OPTIND= 就行了：
   #+begin_src sh
     foo()
     {
         foo_usage() { echo "foo: [-a <arg>]" 1>&2; exit; }

         local OPTIND o a
         while getopts ":a:" o; do
             case "${o}" in
                 a)
                     a="${OPTARG}"
                     ;;
                 ,*)
                     foo_usage
                     ;;
             esac
         done
         shift $((OPTIND-1))

         echo "a: [${a}], non-option arguments: $*"
     }
   #+end_src

   参考：
   + [[https://stackoverflow.com/questions/16654607/using-getopts-inside-a-bash-function][Using getopts inside a Bash function - Stack Overflow]]

** 执行传入的命令
   #+begin_src sh
     COMMAND="$@"
     http_proxy=... $COMMAND
   #+end_src

** ${var}, "$var" 和 "${var}" 的区别
   1. 大多数情况下，$var 和 ${var} 是一样的
   2. 通过双引号包裹时，它们被视为单个 word
      #+begin_src sh
        var="foo bar"
        for i in "$var"; do # Expands to 'for i in "foo bar"; do...'
            echo $i         #   so only runs the loop once
        done
        # foo bar

        var="foo bar"
        for i in "$varbar"; do # Expands to 'for i in ""; do...' since there is no
            echo $i            #   variable named 'varbar', so loop runs once and
        done                   #   prints nothing (actually "")

        var="foo bar"
        for i in "${var}bar"; do # Expands to 'for i in "foo barbar"; do...'
            echo $i              #   so runs the loop once
        done
        # foo barbar
      #+end_src

   参考：
   + [[https://stackoverflow.com/questions/18135451/what-is-the-difference-between-var-var-and-var-in-the-bash-shell][What is the difference between ${var}, "$var", and "${var}" in the Bash shell? - Stack Overflow]]

** 单引号和双引号的区别
   #+begin_src sh
     $ echo "$(echo "upg")"
     upg
     $ echo '$(echo "upg")'
     $(echo "upg")
   #+end_src
   
   参考：
   + [[https://stackoverflow.com/questions/6697753/difference-between-single-and-double-quotes-in-bash][shell - Difference between single and double quotes in Bash - Stack Overflow]]

