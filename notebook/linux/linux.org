#+TITLE:      Linux 基础笔记

* 目录                                                    :TOC_4_gh:noexport:
- [[#通过-man-获取帮助信息][通过 man 获取帮助信息]]
- [[#关闭系统][关闭系统]]
- [[#用户群组][用户群组]]
- [[#文件权限][文件权限]]
- [[#工作管理][工作管理]]
- [[#目录结构][目录结构]]
  - [[#dev][dev]]
- [[#进程相关][进程相关]]

* 通过 man 获取帮助信息
  ~Date(1)~ 括号中的代号的含义：
  |------+--------------------------------------------------------------------|
  | 代号 | 代表内容                                                           |
  |------+--------------------------------------------------------------------|
  |    1 | 使用者在shell环境中可以操作的命令或可运行文件                      |
  |    2 | 系统核心可呼叫的函数与工具等                                       |
  |    3 | 一些常用的函数(function)与函式库(library)，大部分为C的函式库(libc) |
  |    4 | 装置文件的说明，通常在/dev下的文件                                 |
  |    5 | 配置文件或者是某些文件的格式                                       |
  |    6 | 游戏(games)                                                        |
  |    7 | 惯例与协议等，例如Linux文件系统、网络协议、ASCII code等等的说明    |
  |    8 | 系统管理员可用的管理命令                                           |
  |    9 | 跟kernel有关的文件                                                 |
  |------+--------------------------------------------------------------------|

  指定代号： ~man 1 date.~

  ~map page~ 的快捷键：
  |-------------+----------------------------------------------------------------------|
  | 按键        | 进行工作                                                             |
  |-------------+----------------------------------------------------------------------|
  | 空格键      | 向下翻一页                                                           |
  | [Page Down] | 向下翻一页                                                           |
  | [Page Up]   | 向上翻一页                                                           |
  | [Home]      | 去到第一页                                                           |
  | [End]       | 去到最后一页                                                         |
  | /string     | 向『下』搜寻 string 这个字符串，如果要搜寻 vbird 的话，就输入 /vbird |
  | ?string     | 向『上』搜寻 string 这个字符串                                       |
  | n, N        | 下一个/上一个 匹配结果                                               |
  | q           | 退出                                                                 |
  |-------------+----------------------------------------------------------------------|

  ~man -f <name>~ 获取命令 ~name~ 拥有的代号：
  #+BEGIN_EXAMPLE
    $ main -f main
    man (1)              - an interface to the on-line reference manuals
    man (7)              - macros to format man pages
  #+END_EXAMPLE

* 关闭系统
  命令 ~sync~ 将缓存在内存中的数据写入磁盘，命令 ~shutdown/reboot/halt~ 等会自动执行 ~sync~ 命令。

  *shutdown* 的指令格式为：
  #+BEGIN_EXAMPLE
    shutdown [-t 秒] [-arkhncfF] 时间 [警告信息] 
  #+END_EXAMPLE
  
  常用选项：
  |------+------------------------------------|
  | 选项 | 作用                               |
  |------+------------------------------------|
  | ~-h~   | 将系统的服务停掉后，立即关机       |
  | ~-r~   | 在将系统的服务停掉之后就重新启动   |
  | ~-c~   | 取消已经在进行的 shutdown 命令内容 |
  |------+------------------------------------|

  例子：
  #+BEGIN_EXAMPLE
    [root@www ~]# shutdown -h now 
    立刻关机，其中 now 相当于时间为 0 的状态 
    [root@www ~]# shutdown -h 20:25 
    系统在今天的 20:25 分会关机，若在21:25才下达此命令，则隔天才关机 
    [root@www ~]# shutdown -h +10 
    系统再过十分钟后自动关机 
    [root@www ~]# shutdown -r now 
    系统立刻重新启动 
    [root@www ~]# shutdown -r +30 'The system will reboot'  
    再过三十分钟系统会重新启动，并显示后面的信息给所有在在线的使用者 
  #+END_EXAMPLE

* 用户群组
  ~Linux~ 中，任何一个文件都具有 [User, Group, Other] 三种身份的个别权限，代表：文件拥有者，拥有者所在群组，其他人。

  默认的情况下，所有的系统上的账号与一般身份使用者，还有 root 的相关信息，都是记录在 ~/etc/passwd~ 文件内。

  个人的密码则是记录在 ~/etc/shadow~ 这个文件下，而所有的组名都纪录在 ~/etc/group~ 内。

  可以通过命令 ~chown~ 修改文件和目录的拥有者，通过命令 ~chgrp~ 修改文件和目录的用户组。

* 文件权限
  使用 ~ls -l~ 得到的输出：
  #+BEGIN_EXAMPLE
    -rw-r--r-- 1 root root  728 Sep  3 12:25 .vimrc
  #+END_EXAMPLE

  结果分为七个字段，分别的含义为：
  + 第一个字段 ~-rw-r--r--~ 代表文件的类型和权限，其中：
    - 第一个字符代表文件类型
      |------+------------------------------|
      | 字符 | 对应的文件类型               |
      |------+------------------------------|
      | ~d~    | 目录                         |
      | ~-~    | 文件                         |
      | ~l~    | 链接文件，如：符号链接       |
      | ~b~    | 接口设备                     |
      | ~c~    | 串行端口设备，如：键盘、鼠标 |
      |------+------------------------------|
    - 剩下的字符三个一组，均为 ~rwx~ 的三个参数的组合。分别为：文件拥有者、同群组成员、其他人的权限。
      其中： *r - 可读*, *w - 可写*, *x - 可执行*.
  + 第二个字段 ~1~ 表示有多少档名连结到此节点
  + 第三个字段 ~root~ 表示这个文件的拥有者账号
  + 第四个字段 ~root~ 表示这个文件的所属群组
  + 第五个字段 ~728~ 表示文件的大小，单位默认为字节
  + 第六个字段 ~Sep 3 12:25~ 表示文件最后一次修改的日期
  + 第七个字段 ~.vimrc~ 表示文件名

  *改变所属群组 - chgrp*:
  #+BEGIN_EXAMPLE
    $ chgrp <group> <file>
  #+END_EXAMPLE

  *改变文件拥有者 - chown*
  #+BEGIN_EXAMPLE
    $ chown <user> <file>
    $ chown <user>:<group> <file>
  #+END_EXAMPLE

  *改变权限 - chmod*
  
  使用数字类型改变文件权限，不同的权限有一个分数：
  #+BEGIN_EXAMPLE
    r:4
    w:2
    x:1
  #+END_EXAMPLE
  
  每种身份的权限分数为各自的三个权限分数相加的和，比如：
  #+BEGIN_EXAMPLE
    owner = rwx = 4+2+1 = 7
    group = rwx = 4+2+1 = 7
    others= --- = 0+0+0 = 0
  #+END_EXAMPLE

  权限变更就可以这样：
  #+BEGIN_EXAMPLE
    $ chmod 770 filename
  #+END_EXAMPLE

  使用符号类型改变文件权限需要遵循一定的语法：
  #+BEGIN_EXAMPLE
    $ chmod [ugoa][+-=][rwx],... filename
  #+END_EXAMPLE

  *u, g, o* 代表文件拥有者、群组、其他人。 *a* 代表所有。

  *+, -, =* 代表添加、删除、设置。

  例如：
  #+BEGIN_EXAMPLE
    $ chmod u=rwx,go=rx .bashrc
  #+END_EXAMPLE

  使得：
  + 拥有者具有可读、可写、可执行的权限
  + 群组和其他人具有可读与执行的权限

* 工作管理
  在 ~Shell~ 中运行的程序可以分为 *前景运行* 和 *背景运行* 两种类型，其中，在 *前景* 中运行的程序可以通过 ~Ctrl-C~ 停止运行。

  而 *背景* 中运行的程序可以分为『暂停 (stop)』与『运行中 (running)』两种状态。
  
  可以通过在命令的尾部添加 ~&~ 字符的方式让改命令在背景中运行，这时，常常可以通过 ~> /dev/null~ 的方式将该命令的标准输出重定向，
  而正在前景运行的程序也可以通过 ~Ctrl-Z~ 的方式将它丢到背景暂停。

  这里需要注意的是，使用 ~Ctrl-Z~ 只是让任务在背景中暂停，而不是继续运行，这时，可以通过 ~bg~ 命令让暂停的程序在背景中继续运行。

  其他命令：
  + 命令 ~jobs~ 可以查看目前背景中的任务的工作状态
  + 命令 ~fg~ 可以将背景中的工作拿到前景中来运行
  + 命令 ~bg~ 可以让在背景中暂停的工作运行
  + 命令 ~kill~ 可以用在终止程序的运行，信号 ~9~ 强制终止，信号 ~15~ 正常结束，它的参数可以是 ~PID~ 或者 ~%jobnumber~

  同时，也可以通过 ~nohup~ 命令让程序忽略 ~SIGHUP~ 信号运行，常常用来在终端退出后也可以继续运行某程序。

* 目录结构
  Linux 的目录结构大致都是相同的，了解不同的目录的作用有助于 Linux 系统的使用：
  + [[https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E6%A0%87%E5%87%86][文件系统层次结构标准 - 维基百科，自由的百科全书]]

** dev
   + /dev/null - 丢弃一切写入它的数据，可以通过重定向到它来丢弃不必要的数据
   + /dev/zero - 提供无限的空字符，可以用来覆盖信息
   + /dev/random - 可以用于生成随机数
   + /dev/full - 写入时返回设备无剩余空间，读取时返回无限的空字符

* 进程相关
  和进程相关的概念还是很多的，比如父子进程、守护进程、孤儿进程和僵尸进程等，其中：
  + 在 Linux 中新的进程通常都是由 fork 来创建的，这时 fork 出来的新进程便是原来进程的子进程，同时，子进程会得到父进程资源的副本。

    这里需要注意的是，虽然进程之间存在父子关系，但实际上，父子进程之间的关系相对来说还是十分独立的，默认情况下父子进程的生死并不相依。

  + 由于在 Linux 中，每一个系统与用户进行交流的界面称为终端，每一个从此终端开始运行的进程都会依附于这个终端，这个终端就称为这些进程的控制终端，
    当控制终端被关闭时，相应的进程都会自动关闭。但是守护进程却能够突破这种限制，它从被执行开始运转，直到整个系统关闭时才退出。

    如果想让某个进程不因为用户或终端或其他地变化而受到影响，那么就必须把这个进程变成一个守护进程。

    这里需要注意的是，终端关闭时相应的进程自动关闭并不是因为父子进程的关系。

  + 如果一个子进程的父进程先于子进程结束，子进程就成为一个孤儿进程，它由 init 进程收养，成为 init 进程的子进程。

  + 僵尸进程是一种特殊的情况，虽然父子进程之间运行时算是独立的，但是，父子进程之间还是存在一定的依赖关系，每个进程在结束自己之前通常会调用 exit() 命令，
    资源即使早就全部释放了，但进程号，运行时间，退出状态却会因此命令而保留，等到 *父进程* 调用了 waitpid() 时，才会释放这些内容。

    如果父进程不调用 waitpid()，则子进程的信息永远不会释放，这就是所谓的僵尸进程。

  参考链接：
  + [[https://www.cnblogs.com/wuchanming/p/4037495.html][Linux进程学习（孤儿进程和守护进程） - Jessica程序猿 - 博客园]]
  + [[https://akaedu.github.io/book/ch34s03.html][3. 守护进程]]
  + [[https://www.jianshu.com/p/d0a3b4f65b1a][进程关系，父子是否生死相依 - 简书]]

