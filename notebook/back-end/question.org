#+TITLE:      后端问题集

* 目录                                                    :TOC_4_gh:noexport:
- [[#图片的存储方案][图片的存储方案]]
- [[#控制反转和依赖注入是个什么东西][控制反转和依赖注入是个什么东西]]

* 图片的存储方案
  首先，在数据库里存储二进制文件不是一个好主意，理由如下：
  + 将二进制文件存储在数据库中，除了对它进行 I/O 操作以外，你不能对它做其他任何操作（索引、比较……）
  + 备份和恢复数据库需要更多的时间
  + 图像倾向于使用绘画工具进行编辑，将其保存为文件更为方便
  + ……

  这一点的讨论可以参考：
  + [[https://www.quora.com/Why-is-it-considered-bad-to-store-images-in-a-database][Why is it considered bad to store images in a database? - Quora]]

  那么，我们保存图片的方式必然是将文件保存在文件系统中，同时在数据库中保存图片文件的路径。

  这是问题便转换为了目录结构的设计问题，需要考虑单个文件夹保存多少图片，建立几级目录……

  这里需要注意的便是：文件夹中的文件过多是会影响 I/O 性能的。

  这一点可以参考：
  + [[https://segmentfault.com/q/1010000000121448][图片存储 - 图片服务器应该如何设计文件结构？ - SegmentFault 思否]]

  在存储时，可以计算得到图片的 hash 值，避免重复存储。
  
* 控制反转和依赖注入是个什么东西
  根据文章 [[https://blog.tonyseek.com/post/notes-about-ioc-and-di/][控制反转 (IoC) 和依赖注入 (DI)]] 可以了解到：控制反转是框架和库的关键区别所在。对于一个库而言，用户程序员使用的方式是主动调用它，这是通常情况的做法，也就是正向控制。
  而对于一个框架，往往将用户程序员编写的代码注册到框架中，最后由框架来调用用户程序员编写的代码，这就构成了控制反转。也就是说，控制反转的关键在于控制者是谁。
  对于一个库而言，复用的可能只是算法和数据结构，而对于一个框架而言，复用的往往还有控制流逻辑，这也是控制反转的结果。

  而依赖注入时通过 DI 容器将依赖传递给目标对象的技术，这对于动态语言来说是不必要的，但是对于静态语言来说，就是一个很方便的功能。


