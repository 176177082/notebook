#+TITLE:      Go Development

* 目录                                                    :TOC_4_gh:noexport:
- [[#环境变量][环境变量]]
- [[#配置代理][配置代理]]
- [[#依赖管理][依赖管理]]

* 环境变量
  Go 环境变量可以通过配置系统环境变量的方式配置，但是在 ~Go version >= 1.13~ 时可以通过 =go env -w= 命令设置：
  #+begin_example
    go env -w GO111MODULE=on
  #+end_example

* 配置代理
  当我们使用 go get、go install、go mod 等命令时，会自动下载相应的包或依赖包。但由于众所周知的原因，
  类似于 golang.org/x/... 的包会出现下载失败的情况。如下所示：
  #+begin_example
    $ go get -u golang.org/x/sys

    go get golang.org/x/sys: unrecognized import path "golang.org/x/sys" (https fetch: Get https://golang.org/x/sys?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)
  #+end_example

  这时可以考虑通过设置代理的方式解决这一问题：
  #+begin_example
    go env -w GOPROXY=https://goproxy.io
  #+end_example
  
  参考：
  + [[https://shockerli.net/post/go-get-golang-org-x-solution/][一键解决 go get golang.org/x 包失败 - 格物]]
  
* 依赖管理
  Go 作为现代编程语言，是自带依赖管理功能的，但是，这个功能在历史上存在多次变动，带来了额外的理解学习成本。

  首先需要了解一下最初的两种依赖管理方式带来的影响：
  1. 基于 GOPATH 的依赖管理模式，要求项目和依赖都在 GOPATH 下，通过类似命名空间的方式隔离，这样的管理方式存在很多问题，比如，依赖不能存在多个版本，
     这使得不同项目无法使用不同版本的依赖。

     带来的影响：虽然现在项目可以不在 GOPATH 下，但是很多项目往往还是会在 GOPATH 下开发，而且 GOPATH 这个环境变量依然发挥着作用，
     下载的依赖现在也还保存在 GOPATH 下。

  2. 基于 vendor 目录的依赖管理模式，这是 Go 1.5 引入的模式，当 Go 工具发现存在 vendor 目录时，就会优先使用 vendor 目录中的依赖编译测试。
     这在一定程度上解决了依赖的版本问题。

     带来的影响：现在一些使用 go mod 的项目依然存在 vendor 目录，Go 工具也同样还识别该目录，go mod 也提供了 vendor 这个子命令。
     
  而在 Go 1.11 后引入的 Go Module 则是现在官方支持的依赖管理模式，在经过几个版本的迭代后，这种管理方式也完善了很多：
  1. 通过 go mod init 初始化项目，如果是基于旧的依赖管理模式的项目，那么会自动转换
  2. 通过 go mod download 下载依赖
  3. 命令 go build、go get 甚至 go list 都能识别 go.mod 并进行更新
  4. 通过 go mod vendor 将依赖拷贝到 vendor 目录
  5. ……

  命令使用：
  #+begin_src sh
    # 下载依赖，但不会更新
    $ go get

    # 更新所有依赖
    $ go get -u

    # 更新指定依赖及其依赖
    $ get get -u full_package_name

    # 获取依赖的指定版本
    $ go get package@version

    # 下载依赖
    $ go mod download

    # 移除无用依赖
    $ go mod tidy

    # 复制依赖到 vendor 目录
    $ go mod vendor

    # 判断为什么依赖
    $ go mod why
  #+end_src

  另外需要注意，Go 1.13 后使用 go get 命令下载依赖时会到特定位置下载和效验，这时，应该将私有库前缀放在 GOPRIVATE 环境变量里面。

