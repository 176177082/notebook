#+TITLE:      LeetCode 笔记2

* 目录                                                    :TOC_4_gh:noexport:
- [[#excel表列名称][Excel表列名称]]
- [[#求众数][求众数]]
- [[#阶乘后的零][阶乘后的零]]
- [[#旋转数组][旋转数组]]
- [[#颠倒二进制串][颠倒二进制串]]
- [[#位-1-的个数][位 1 的个数]]

* Excel表列名称
  + [[https://leetcode-cn.com/problems/excel-sheet-column-title/description/][Quesion]]

  + 本质就是进制转换

  #+BEGIN_SRC python
    class Solution:
        def convertToTitle(self, n):
            capital = list(map(chr, range(65, 91)))
            ans = str()
            while n > 0:
                n -= 1
                ans = capital[n % 26] + ans
                n //= 26
            return ans
  #+END_SRC

* 求众数
  + [[https://leetcode-cn.com/problems/majority-element/description/][Quesion]]

  #+BEGIN_SRC C
    int majorityElement(int* nums, int numsSize) {
      int majority = 0, count = 0;
    
      for (int i = 0; i < numsSize; ++i) {
        if (count == 0) {
          majority = nums[i];
          count++;
        }
        else if (nums[i] == majority) {
          count++;
        }
        else {
          count--;
        }
      }
    
      return majority;
    }
  #+END_SRC

* 阶乘后的零
  + [[https://leetcode-cn.com/problems/factorial-trailing-zeroes/description/][Quesion]]

  #+BEGIN_SRC python
    class Solution:
        def trailingZeroes(self, n):
            ans = 0
            while n:
                n = n // 5
                ans += n
            return ans
  #+END_SRC

* 旋转数组
  + [[https://leetcode-cn.com/problems/rotate-array/description/][Quesion]]
  + [[https://leetcode.com/problems/rotate-array/solution/][Solution]]

  #+BEGIN_SRC python
    class Solution:
        def rotate(self, nums, k):
            def reverse(start, end):
                while start < end:
                    nums[start], nums[end] = nums[end], nums[start]
                    start += 1
                    end -= 1
            length = len(nums)
            k = k % length
            reverse(0, length - 1)
            reverse(0, k - 1)
            reverse(k, length - 1)
  #+END_SRC

* 颠倒二进制串
  + [[https://leetcode-cn.com/problems/reverse-bits/description/][Quesion]]

  #+BEGIN_SRC C
    uint32_t reverseBits(uint32_t n) {
      uint32_t ans = 0;
    
      for (int i = 0; i < 32; ++i) {
        ans = (ans << 1) + (n & 1);
        n = n >> 1;
      }
    
      return ans;
    }
  #+END_SRC

  #+BEGIN_SRC C
    uint32_t reverseBits(uint32_t n) {
      n = ((n >> 1) & 0x55555555) | ((n & 0x55555555) << 1);
      n = ((n >> 2) & 0x33333333) | ((n & 0x33333333) << 2);
      n = ((n >> 4) & 0x0F0F0F0F) | ((n & 0x0F0F0F0F) << 4);
      n = ((n >> 8) & 0x00FF00FF) | ((n & 0x00FF00FF) << 8);
      n = (n >> 16) | (n << 16);

      return n;
    }
  #+END_SRC

* 位 1 的个数
  + [[https://leetcode-cn.com/problems/number-of-1-bits/description/][Quesion]]

  #+BEGIN_SRC C
    int hammingWeight(uint32_t n) {
      int count = 0;
    
      while (n) {
        count += n & 1;
        n = n >> 1;
      }
    
      return count;
    }
  #+END_SRC

  #+BEGIN_SRC python
    class Solution(object):
        def hammingWeight(self, n):
            count = 0
            while n != 0:
                count += 1
                n = n & (n - 1)
            return count
  #+END_SRC
