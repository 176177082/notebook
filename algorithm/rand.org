#+SETUPFILE:  ./_style/style.setup
#+TITLE:      随机算法

* 随机数的分类
  随机数的随机性检验的三个标准：
  1. *统计学伪随机性* 
     
     统计学伪随机性指的是在给定的随机比特流样本中，1 的数量大致等于 0 的数量，同理，“10” “01” “00” “11” 四者数量大致相等。
     类似的标准被称为统计学随机性。满足这类要求的数字在人类“一眼看上去”是随机的

  2. *密码学安全伪随机性*

     其定义为，给定随机样本的一部分和随机算法，不能有效的演算出随机样本的剩余部分

  3. *真随机性* 
     
     其定义为随机样本不可重现。实际上只要给定边界条件，真随机数并不存在，可是如果产生一个真随机数样本的边界条件十分复杂且难以捕捉，
     可以认为用这个方法演算出来了真随机数

  相应的三类随机数：
  1. *伪随机数：* 满足第一个条件的随机数
  2. *密码学安全的伪随机数：* 同时满足前两个条件的随机数。可以通过密码学安全伪随机数生成器计算得出
  3. *真随机数：* 同时满足三个条件的随机数


  [[https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E6%95%B0][维基百科]]

* 线性同余方法
  *线性同余方法(LCG)* 是个生生伪随机数的方法。

  递归公式： [[file:img/rand.svg]]

  其中， *A*, *B*, *M* 是生成器设定的常数。

  LCG的周期最大为 *M*, 但大部分情况都会少于 *M*. 要令LCG达到最大周期，应符合以下条件：
  1. *B*, *M* 互质
  2. *M* 的所有质因数都能整除 *A - 1*
  3. 若 *M* 是 4 的倍数， *A - 1* 也是
  4. *A*, *B*, *N₀* 都比 *M* 小
  5. *A*, *B* 是正整数

  *PS:* 如果要获得 ~(0, 1)~ 之间的随机数， 可以用获取的随机数 *除M*

* C 语言随机数生成器代码
  #+BEGIN_SRC c
    /* rand */

    unsigned long _Randseed = 1;

    int (rand) (void) {
      _Randseed = _Randseed * 1103515245 + 12345;
      return ((unsigned int)(_Randseed >> 16) & RAND_MAX)
    }


    /* srand */

    void (srand) (unsigned int seed) {
      _Randseed = seed;
    }
  #+END_SRC

  其中， ~RAND_MAX~ 是由头文件 ~<stdlib.h>~ 定义的宏， 值为 ~rand~ 函数返回的最大值。

  *PS:* 如果要获得 ~0-1.0~ 之间的随机数， 可以：
  #+BEGIN_SRC c
    double rand_num = (double)rand() / RADN_MAX;
  #+END_SRC

