#+SETUPFILE:  ./_style/style.setup
#+TITLE:      LeetCode 笔记

* 题 746
  On a staircase, the ~i~-th step has some non-negative cost ~cost[i]~ assigned (0 indexed).
  
  Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor,
  and you can either start from the step with index 0, or the step with index 1.

  Example1:
  #+BEGIN_EXAMPLE
    Input: cost = [10, 15, 20]
    Output: 15
    Explanation: Cheapest is start on cost[1], pay that cost and go to the top.
  #+END_EXAMPLE

  Example2:
  #+BEGIN_EXAMPLE
    Input: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
    Output: 6
    Explanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].
  #+END_EXAMPLE

  Python:
  #+BEGIN_SRC python
    class Solution:
        def minCostClimbingStairs(self, cost):
            """
            :type cost: List[int]
            :rtype: int
            """
            f1 = f2 = 0
            for x in reversed(cost):
                f1, f2 = x + min(f1, f2), f1
            return min(f1, f2)
  #+END_SRC

  C:
  #+BEGIN_SRC C
    int minCostClimbingStairs(int* cost, int costSize) {
      int f1 = 0, f2 = 0;

      for (int i = costSize - 1; i >= 0; --i) {
        int tmp = f1;
        f1 = cost[i] + (f1 > f2 ? f2 : f1);
        f2 = tmp;
      }

      return f1 > f2 ? f2 : f1;
    }
  #+END_SRC

