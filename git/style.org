#+TITLE:      Git 相关使用规范


* 目录                                                    :TOC_4_gh:noexport:
- [[#commit-template][commit template]]
- [[#分支命名规范][分支命名规范]]

* commit template
  #+BEGIN_EXAMPLE
    # Commit message template
    # Header, Body, Footer

    <type>(<scope>): <subject>

    <body>

    <footer>

    # Header 是必需的, Body 和 Footer 可以省略
    #
    # Header(只有一行): type(必须), scope(可选), subject(必须)
    #   type:       
    #       feat: 新功能(feature)
    #       fix: 修补bug
    #       docs: 文档(documentation)
    #       style: 格式(不影响代码运行的变动)
    #       refactor: 重构(既不是新增功能, 也不是修改bug的代码变动
    #       test: 增加测试
    #       chore: 构建过程或辅助工具的变动
    #
    #       如果type为feat和fix, 则该 commit 将肯定出现在 Change log 之中
    #       其他情况视情况决定要不要放入 Change log, 建议是不要
    #
    #   scope:
    #       scope用于说明 commit 影响的范围 
    #       比如数据层, 控制层, 视图层等等, 视项目不同而不同
    #       如果修改影响了不止一个scope, 可以使用 * 代替
    #
    #   subject:
    #       subject是 commit 目的的简短描述, 不超过50个字符
    #       
    #       其他注意事项:
    #           * 以动词开头, 使用第一人称现在时
    #           * 第一个字母小写
    #           * 结尾不加句号
    #   
    # Body(可选, 可以分成多行): 对本次 commit 的详细描述
    #   范例:
    #       More detailed explanatory text, if necessary.  Wrap it to 
    #       about 72 characters or so. 
    #
    #       Further paragraphs come after blank lines.
    #
    #       - Bullet points are okay, too
    #       - Use a hanging indent
    #   
    #   注意事项:
    #       * 使用第一人称现在时
    #       * 永远别忘了第2行是空行
    #       * 该说明代码变动的动机, 以及与以前行为的对比
    #
    # Footer(不兼容变动, 关闭Issue): 只用于这两种情况
    #   不兼容变动:
    #       如果当前代码与上一个版本不兼容, 则 Footer 部分以BREAKING CHANGE开头
    #       后面是对变动的描述, 以及变动理由和迁移方法
    #        
    #       BREAKING CHANGE: isolate scope bindings definition has changed.
    #
    #           To migrate the code follow the example below:
    #
    #           Before:
    #
    #           scope: {
    #               myAttr: 'attribute',
    #           }
    #
    #           After:
    #
    #           scope: {
    #               myAttr: '@',
    #           }   
    #
    #           The removed `inject` wasn't generaly useful for directives so there should be no code using it.
    #
    #   关闭Issue:
    #       如果当前 commit 针对某个issue, 那么可以在 Footer 部分关闭这个 issue
    #
    #       Closes #234
    #
    # Revert(特殊情况): 如果当前 commit 用于撤销以前的 commit, 则必须以revert:开头, 后面跟着被撤销 Commit 的 Header
    #   revert: feat(pencil): add 'graphiteWidth' option
    #
    #   This reverts commit 667ecc1654a317a13331b17617d973392f415f02.
    #   
    #   Body部分的格式是固定的，必须写成This reverts commit &lt;hash>., 其中的hash是被撤销 commit 的 SHA 标识符
    #

  #+END_EXAMPLE

* 分支命名规范
  通常的分支类型：
  + ~master~ - 主分支，有一个、且仅有一个
  + ~develop~ - 开发分支
  + ~feature~ - 功能分支，新特性的开发
  + ~release~ - 预发布分支
  + ~fixbug~ - 修复 bug 分支

  常用的分支命名方式：
  + ~prefix/about~, 如 ~feature/xxx~
  + ~prefix-about~, 如 ~feature-xxx~
