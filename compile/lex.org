#+TITLE:      编译原理 - 词法分析

* 目录                                                    :TOC_4_gh:noexport:
- [[#词法分析器的作用][词法分析器的作用]]
- [[#词法单元的规约][词法单元的规约]]

* 词法分析器的作用
  词法分析器在编译器中负责读取源程序、识别词素、过滤注释和空白、 将编译器生成的错误信息与源程序的位置联系起来。
   
  + *词法单元、模式、词素*
    1. *词法单元* 由一个词法单元名和一个可选的属性值组成。
    2. *模式* 描述了一个词法单元可能具有的形式
    3. *词素* 是源程序中的一个字符序列，和某个词法模式匹配

    举例说明：
    |----------+-----------+---------------|
    | 词法单元 | 模式      | 词素          |
    |----------+-----------+---------------|
    | number   | \d+(.\d+) | 1024, 255.255 |
    |----------+-----------+---------------|

  + *词法错误*

    假设出现所有词法单元的模式都无法和剩余输入的某个前缀相匹配的情况，此时词法分析器就不能继续处理输入。

    出现这种情况时，最简单的错误恢复策略为： *恐慌模式* 恢复。从剩余的输入中不断删除字符，
    直到词法分析器能够在剩余的输入的开头发现一个正确的词法单元为止。

    可能采取的其他错误恢复动作：
    1. 从剩余的输入中删除一个字符
    2. 向剩余的输入中插入一个遗漏的字符
    3. 用一个字符来替换另一个字符
    4. 交换两个相邻的字符

* 词法单元的规约
  + *串和语言*

    字母表是一个有限的符号集合。比如集合 {0, 1} 是 *二进制字母表*.

    某个字母表上的 *串* 是该字母表中符号的一个有穷序列。串 s 的长度记作 |s|. 
    *空串* 是长度为 0 的串，用 ε 表示。

    *语言* 是某个给定字母表上任意的可数的串的集合。

    串的连接： x = dog, y = house, xy = doghouse

    对于任何串 s 有： sε = εs = s.

    一个串的 n 次幂表示 n 个该串的连接。

  + *语言上的运算*
     
    |------------------+---------------------------|
    | 运算             | 定义                      |
    |------------------+---------------------------|
    | L 和 M 的并      | 串 s 属于 L 或属于 M      |
    | L 和 M 的连接    | 串 st, s 属于 L, t 属于 M |
    | L 的 Kleene 闭包 | 零个或多个 L 的连接       |
    | L 的正闭包       | 一个或多个 L 的连接       |
    |------------------+---------------------------|

  + *正则表达式*

    *归纳基础：* 
    1. *空串* 是一个正则表达式，表示的语言为 {ε}, 即该语言只包含空串
    2. 如果 a 是字母表中中的一个符号，那么 a 是一个正则表达式，并且 a 表示的语言为 {a}.

    *归纳步骤：* 假定 r 和 s 都是正则表达式，分别表示语言 L(r) 和 L(s)，那么：
    1. (r)|(s) 是一个正则表达式，表示语言 L(r)|L(s)
    2. (r)(s) 是一个正则表达式，表示语言 L(r)(Ls)
    3. (r)* 是一个正则表达式，表示语言 (L(r))*
    4. (r) 是一个正则表达式，表示语言 L(r)

    运算符优先级： * > 连接 > |, 都是左结合的运算符。

    通过运算符，可以简化正则表达式，比如 (a)|((b)*(c)) 可以简写为 a|b*c.

  + *正则定义*

    如果字符集 Σ 是基本符号的集合，那么一个 *正则定义* 是具有如下形式的定义序列：
    #+BEGIN_EXAMPLE
      d1 -> r1
      d2 -> r2
        ...
      dn -> rn
    #+END_EXAMPLE
     
    其中：
    + 每个 di 都是一个新符号，它们都不在 Σ 中，并且各不相同
    + 每个 ri 是字母表 Σ∪{d1, d2, ···, di-1} 上的正则表达式
   
