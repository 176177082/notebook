#+TITLE:      编译原理 - 简单的语法制导翻译器

* 目录                                                    :TOC_4_gh:noexport:
- [[#引言][引言]]
- [[#上下文无关文法组成][上下文无关文法组成]]
- [[#推导][推导]]
- [[#语法分析树][语法分析树]]
- [[#运算符的结合性和优先级][运算符的结合性和优先级]]
- [[#语法分析树的构建][语法分析树的构建]]
- [[#语法制导翻译][语法制导翻译]]

* 引言
  一个程序设计语言的 *语法* 描述了该语言的程序的正确形式，而改语言的 *语义* 则定义了程序的含义，
  即每个程序在运行时做什么事。

* 上下文无关文法组成
  1. *终结符号* 集合
  2. *非终结符号* 集合
  3. *产生式* 集合
  4. 指定一个非终结符号作为 *开始* 符号

  这是一个产生式：
  #+BEGIN_EXAMPLE
    stmt -> IF ( expr ) stmt ELSE stmt
  #+END_EXAMPLE

  + 终结符号： ~IF~, ~(~, ~)~ 和 ~ELSE~.
  + 非终结符号： ~stmt~ 和 ~expr~
  + 箭头 ~->~ 可以读作： 可以具有如下形式

  零个终结符号组成的串称为 *空串*, 记为 *ε*.

* 推导
  可以从开始符号推导得到的所有终结符号串的集合称为该文法定义的 *语言*.

* 语法分析树
  假设非终结符号 ~A~ 存在产生式 ~A -> XYZ~, 其语法分析树可以表示为：
  #+BEGIN_EXAMPLE
        A
      / | \
     X  Y  Z
  #+END_EXAMPLE
   
  语法分析树的性质：
  1. 根结点的标号为文法的开始符号
  2. 每个叶子节点的标号为一个终结符号位 *ε*
  3. 每个内部节点的标号为一个非终结符号
  4. 子节点序列必然对应一个产生式

* 运算符的结合性和优先级
  + 左结合： 当一个运算分量左右两侧都有 *左结合* 运算符时，它属于其左边的运算符
    #+BEGIN_EXAMPLE
      left -> left - digit | digit
      digit -> 0 | 1 | ··· | 9

      9 - 5 - 2 == (9 - 5) - 2
    #+END_EXAMPLE

  + 右结合： 当一个运算分量右右两侧都有 *右结合* 运算符时，它属于其右边的运算符
    #+BEGIN_EXAMPLE
      right -> letter ** right | letter
      letter -> a | b | ··· | z

      a ** b ** c == a ** (b ** c)
    #+END_EXAMPLE

  + 加减乘除都是 *左结合* 的运算符，但它们的优先级存在区别，优先级的文法实现：
    #+BEGIN_EXAMPLE
      factor -> digit | (expr)

      term -> term * factor
           |  term / factor
           |  factor

      expr -> expr + term
           |  expr - term
           |  term
    #+END_EXAMPLE

* 语法分析树的构建
  上下文无关文法：
  #+BEGIN_EXAMPLE
    S -> SS+ | SS* | a
  #+END_EXAMPLE

  文法生成的串：
  #+BEGIN_EXAMPLE
    aa+a*
  #+END_EXAMPLE

  构建语法分析树：
  #+BEGIN_EXAMPLE
    aa+

        S
      / | \
     S  S  +
     |  |
     a  a

    aa+a*
               S
         /     |    \
        S      S     *
      / | \    |  
     S  S  +   a
     |  |
     a  a
  #+END_EXAMPLE
   
* 语法制导翻译
  语法制导翻译将一种形式翻译为另一种形式。

  两种实现方式：
  + *属性* - 在语法分析树的节点上附加额外的属性，同时将每个产生式和一组 *语义规则* 相关联
  + *翻译方案* - 在文法产生式中附加一些程序片段来描述翻译结果，这些程序片段称为 *语义动作*.
    这些语义动作作为语法分析树中的额外节点存在

