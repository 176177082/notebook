#+TITLE:      ECF: 异常控制流

* 目录                                                    :TOC_4_gh:noexport:
- [[#ecf-异常控制流][ECF: 异常控制流]]
- [[#异常][异常]]

* ECF: 异常控制流
  + 控制流 :: 程序计时器假设的连续平滑的指令序列， 下一指令和上一条指令在内存中是相邻的， 上一条指令过渡到下一条指令为 *控制转移*.
  + 异常 :: 平滑控制流的突变， 两条指令在内存中不在相邻， 可能由跳转， 调用， 返回等指令造成
  + 异常控制流 :: 操作系统通过是控制流发生突变来对某些情况作出反应， 这些突变被称为 *突变控制流* - ECF
  + 异常控制流的层次 :: 异常、系统调用、 信号、 非本地跳转。 

* 异常
  异常是异常控制流的一种形式， 一部分由硬件实现， 一部分由操作系统实现。

  处理器的状态会被编码为不同的位和信号， 状态的 *变化* 被称为 *事件*.

  当处理器检测到有事件发生时， 会通过 *异常表* 进行一个间接过程调用， 到专门的异常处理程序处理这些事件， 然后可能会：
  1. 处理程序将控制返回给当前指令， 即事件发生时正在执行的指令
  2. 处理程序将控制返回给下一条指令
  3. 处理程序终止被中断的程序

  异常表的起始地址放在 *异常表基址寄存器* 中， 每一个表目包含了对应异常处理程序的地址。

  处理器检测到事件后， 会确定该事件的异常号， 然后通过异常号确定对应异常条目在 *异常表* 中的位置。

  异常可以分为：
  + 中断： 由硬件变化引起的异常， 不是有任何一条指令造成， 因此为 *异步* 的。

    处理流程为：
    1. 当前指令执行时， 硬件变化引起异常

    2. 当前指令执行完后， 处理器检测到异常， 将控制传递给处理程序

    3. 中断处理程序运行

    4. 处理程序将控制返回给下一条指令

  + 陷阱： 由系统调用指令一起， 是同步的。

    处理流程为：
    1. 应用程序执行系统调用指令

    2. 处理器将控制转移给对应的处理程序

    3. 陷阱处理程序运行

    4. 处理程序将控制返回给系统调用指令的下一条指令

  + 故障： 由错误引起， 这个错误可能被故障处理程序修正， 同步。

    处理流程为：
    1. 当前指令导致一个故障

    2. 控制传递给处理程序

    3. 故障处理程序运行

    4. 故障排除， 控制返回给当前指令， 故障排除失败， 程序终止

  + 终止： 不可恢复的致命错误， 直接终止程序， 同步。

